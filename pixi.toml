[project]
name = "Ribasim"
version = "2024.7.0"
description = "Water resources modeling"
authors = ["Deltares and contributors <ribasim.info@deltares.nl>"]
channels = ["conda-forge"]
platforms = ["win-64", "linux-64", "osx-arm64", "osx-64"]
readme = "README.md"
license = "MIT"
license-file = "LICENSE"
homepage = "https://deltares.github.io/Ribasim/"
documentation = "https://deltares.github.io/Ribasim/"
repository = "https://github.com/Deltares/Ribasim"

[tasks]
# Installation
install-ribasim-python = "pip install --no-build-isolation --no-deps --disable-pip-version-check --editable python/ribasim"
install-ribasim-api = "pip install --no-build-isolation --no-deps --disable-pip-version-check --editable python/ribasim_api"
install-ribasim-testmodels = "pip install --no-build-isolation --no-deps --disable-pip-version-check --editable python/ribasim_testmodels"
install-python = { depends_on = [
    "install-ribasim-python",
    "install-ribasim-api",
    "install-ribasim-testmodels",
] }
# Tests
test-ribasim-python = "pytest --numprocesses=4 python/ribasim/tests"
test-ribasim-python-cov = "pytest --numprocesses=4 --cov=ribasim --cov-report=xml python/ribasim/tests"
test-ribasim-api = "pytest --basetemp=python/ribasim_api/tests/temp --junitxml=report.xml python/ribasim_api/tests"

[feature.dev.tasks]
# Installation
install-julia = "juliaup add 1.10.0 && juliaup default 1.10.0"
install-pre-commit = "pre-commit install"
install-ci = { depends_on = [
    "install-python",
    "install-julia",
    "update-registry-julia",

] }
install = { depends_on = [
    "install-ci",
    "install-qgis-plugins",
    "install-pre-commit",
] }
# Julia
update-registry-julia = "julia --eval='using Pkg; Registry.update()'"
update-manifest-julia = "julia --project --eval='using Pkg; Pkg.update()'"
instantiate-julia = "julia --project --eval='using Pkg; Pkg.instantiate()'"
initialize-julia = { depends_on = [
    "update-registry-julia",
    "instantiate-julia",
] }
# Docs
build-julia-docs = { cmd = "julia --project docs/make.jl", depends_on = [
    "initialize-julia",
], inputs = [
    "core",
    "docs/make.jl",
], outputs = [
    "docs/build",
] }
quartodoc-build = { cmd = "quartodoc build && rm objects.json", cwd="docs", inputs = [
    "docs/_quarto.yml",
    "python/ribasim",
], outputs = [
    "docs/python/reference",
] }
quarto-preview = { cmd = "quarto preview docs", depends_on = [
    "quartodoc-build",
    "generate-testmodels",
] }
quarto-check = { cmd = "quarto check all", depends_on = ["quartodoc-build"] }
quarto-render = { cmd = "julia --project --eval 'using Pkg; Pkg.build(\"IJulia\")' && quarto render docs --to html --execute", depends_on = [
    "quartodoc-build",
    "generate-testmodels",
] }
docs = { depends_on = ["build-julia-docs", "quarto-preview"] }
# Lint
mypy-ribasim-python = "mypy python/ribasim/ribasim"
mypy-ribasim-testmodels = "mypy python/ribasim_testmodels/ribasim_testmodels"
mypy-ribasim-api = "mypy python/ribasim_api/ribasim_api"
pre-commit = "pre-commit run --all-files"
lint = { depends_on = [
    "pre-commit",
    "mypy-ribasim-python",
    "mypy-ribasim-testmodels",
    "mypy-ribasim-api",
    "mypy-ribasim-qgis",
] }
# Build
build-ribasim-cli = { cmd = "julia --project build.jl --app", cwd = "build", depends_on = [
    "generate-testmodels",
    "initialize-julia",
] }
build-libribasim = { cmd = "julia --project build.jl --lib", cwd = "build", depends_on = [
    "generate-testmodels",
    "initialize-julia",
] }
build = { "cmd" = "julia --project build.jl --app --lib", cwd = "build", depends_on = [
    "generate-testmodels",
    "initialize-julia",
] }
remove-artifacts = "julia --eval 'rm(joinpath(Base.DEPOT_PATH[1], \"artifacts\"), force=true, recursive=true)'"
# Tests
test-ribasim-cli = "pytest --numprocesses=4 --basetemp=build/tests/temp --junitxml=report.xml build/tests"
test-ribasim-core = { cmd = "julia --project=core --eval 'using Pkg; Pkg.test()'", depends_on = [
    "generate-testmodels",
] }
test-ribasim-core-cov = { cmd = "julia --project=core --eval 'using Pkg; Pkg.test(coverage=true, julia_args=[\"--check-bounds=yes\"])'", depends_on = [
    "generate-testmodels",
] }
generate-testmodels = { cmd = "python utils/generate-testmodels.py", inputs = [
    "python/ribasim",
    "python/ribasim_testmodels",
], outputs = [
    "generated_testmodels",
] }
tests = { depends_on = ["lint", "test-ribasim-python", "test-ribasim-core"] }
# Codegen
codegen = { cmd = "julia --project utils/gen_python.jl && ruff format python/ribasim/ribasim/schemas.py", depends_on = [
    "initialize-julia",
], inputs = [
    "core",
], outputs = [
    "python/ribasim/ribasim/schemas.py",
] }
# Publish
build-ribasim-python-wheel = { cmd = "rm --recursive --force dist && python -m build && twine check dist/*", cwd = "python/ribasim" }
build-ribasim-api-wheel = { cmd = "rm --recursive --force dist && python -m build && twine check dist/*", cwd = "python/ribasim_api" }
build-wheels = { depends_on = [
    "build-ribasim-python-wheel",
    "build-ribasim-api-wheel",
] }
publish-ribasim-python = { cmd = "twine upload dist/*", cwd = "python/ribasim", depends_on = [
    "build-ribasim-python-wheel",
] }
publish-ribasim-api = { cmd = "twine upload dist/*", cwd = "python/ribasim_api", depends_on = [
    "build-ribasim-api-wheel",
] }
# QGIS
qgis = "qgis --profiles-path .pixi/qgis_env"
install-ribasim-qgis = "python ribasim_qgis/scripts/install_ribasim_qgis.py"
install-imod-qgis = "python ribasim_qgis/scripts/install_qgis_plugin.py iMOD && python ribasim_qgis/scripts/enable_plugin.py imodqgis"
install-plugin-reloader-qgis = "python ribasim_qgis/scripts/install_qgis_plugin.py \"Plugin Reloader\" && python ribasim_qgis/scripts/enable_plugin.py plugin_reloader"
install-qgis-plugins = { depends_on = [
    "install-plugin-reloader-qgis",
    "install-ribasim-qgis",
    "install-imod-qgis",
] }
test-ribasim-qgis-ui = { cmd = "python ribasim_qgis/scripts/run_qgis_ui_tests.py", depends_on = [
    "install-ribasim-qgis",
] }
test-ribasim-qgis = { cmd = "pytest --numprocesses=auto ribasim_qgis/tests", depends_on = [
    "install-ribasim-qgis",
] }
test-ribasim-qgis-cov = { cmd = "pytest --numprocesses=auto --cov=ribasim_qgis --cov-report=xml --cov-config=ribasim_qgis/.coveragerc ribasim_qgis/tests", depends_on = [
    "install-ribasim-qgis",
] }
mypy-ribasim-qgis = "mypy ribasim_qgis"
# Run
ribasim-core = { cmd = "julia --project=core -e 'using Ribasim; Ribasim.main(ARGS)'", depends_on = [
    "initialize-julia",
] }
ribasim-core-testmodels = { cmd = "julia --project --threads=4 utils/testmodelrun.jl", depends_on = [
    "generate-testmodels",
    "initialize-julia",
] }
# Release
github-release = "python utils/github-release.py"

[dependencies]
geopandas = "*"
hatchling = "*"
matplotlib = "*"
netCDF4 = "*"
numpy = "*"
pandas = "*"
pandas-stubs = "*"
pandera = "*"
pip = "*"
pyarrow = "*"
pydantic = ">=2"
pyogrio = "*"
pytest = "*"
pytest-cov = "*"
pytest-xdist = "*"
python = ">=3.10"
shapely = ">=2.0"
tomli = "*"
tomli-w = "*"
xmipy = "*"
xugrid = "*"
xarray = "*"


[feature.dev.dependencies]
build = "*"
gh = "*"
juliaup = "*"
jupyterlab = "*"
libgdal-arrow-parquet = "*"
mypy = "*"
pre-commit = "*"
pyqt-stubs = "*"
qgis = "*"
qgis-plugin-manager = "*"
quarto = "*"
quartodoc = "*"
ruff = "*"
twine = "*"

[feature.py312.dependencies]
python = "3.12.*"

[feature.py311.dependencies]
python = "3.11.*"

[feature.py310.dependencies]
python = "3.10.*"

[environments]
default = { features = ["py312"], solve-group = "py312" }
dev = { features = ["py312", "dev"], solve-group = "py312" }
py312 = { features = ["py312"], solve-group = "py312" }
py311 = ["py311"]
py310 = ["py310"]

[activation]
scripts = ["utils/env_setup.sh"]

[target.win-64.activation]
scripts = ["utils/env_setup.bat"]

[system-requirements]
linux = "3.10.0"
