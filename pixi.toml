[project]
name = "Ribasim"
version = "0.3.0"
description = "Water resources modeling"
authors = ["Deltares and contributors <ribasim.info@deltares.nl>"]
channels = ["conda-forge"]
platforms = ["win-64", "linux-64", "osx-arm64", "osx-64"]
readme = "README.md"
license = "MIT"
license-file = "LICENSE"
homepage = "https://deltares.github.io/Ribasim/"
documentation = "https://deltares.github.io/Ribasim/"
repository = "https://github.com/Deltares/Ribasim"

[tasks]
# Installation
install-ribasim-python = "pip install --no-deps --editable python/ribasim"
install-ribasim-api = "pip install --no-deps --editable python/ribasim_api"
install-ribasim-testmodels = "pip install --no-deps --editable python/ribasim_testmodels"
install-pre-commit = "pre-commit install"
install-without-pre-commit = { depends_on = [
    "install-ribasim-python",
    "install-ribasim-api",
    "install-ribasim-testmodels",
] }
install = { depends_on = ["install-without-pre-commit", "install-pre-commit"] }
# Instantiate
instantiate-julia = "julia --project --eval='using Pkg; Pkg.instantiate()'"
# Docs
build-julia-docs = { cmd = "julia --project=docs docs/make.jl", depends_on = [
    "instantiate-julia",
] }
quartodoc-build = { cmd = "quartodoc build && rm objects.json", cwd = "docs" }
quarto-preview = { cmd = "export QUARTO_PYTHON=python && quarto preview docs", depends_on = [
    "quartodoc-build",
] }
quarto-check = { cmd = "quarto check all", depends_on = ["quartodoc-build"] }
quarto-render = { cmd = "export QUARTO_PYTHON=python && quarto render docs --to html --execute", depends_on = [
    "quartodoc-build",
] }
docs = { depends_on = ["build-julia-docs", "quarto-preview"] }
# Lint
mypy-ribasim-python = "mypy python/ribasim/ribasim"
mypy-ribasim-testmodels = "mypy python/ribasim_testmodels/ribasim_testmodels"
mypy-ribasim-api = "mypy python/ribasim_api/ribasim_api"
pre-commit = "pre-commit run --all-files"
lint = { depends_on = [
    "pre-commit",
    "mypy-ribasim-python",
    "mypy-ribasim-testmodels",
    "mypy-ribasim-api",
    "mypy-ribasim-qgis",
] }
# Build
build-ribasim-cli = { cmd = "julia --project build.jl --app", cwd = "build/create_binaries", depends_on = [
    "generate-testmodels",
    "instantiate-julia",
] }
build-libribasim = { cmd = "julia --project build.jl --lib", cwd = "build/create_binaries", depends_on = [
    "generate-testmodels",
    "instantiate-julia",
] }
build = { "cmd" = "julia --project build.jl --app --lib", cwd = "build/create_binaries", depends_on = [
    "generate-testmodels",
    "instantiate-julia",
] }
# Test
test-ribasim-python = "pytest --numprocesses=auto python/ribasim/tests"
test-ribasim-api = "pytest --basetemp=python/ribasim_api/tests/temp --junitxml=report.xml python/ribasim_api/tests"
test-ribasim-cli = "pytest --numprocesses=auto --basetemp=build/ribasim_cli/tests/temp --junitxml=report.xml build/ribasim_cli/tests"
test-ribasim-core = { cmd = "julia --project=core --eval 'using Pkg; Pkg.test()'", depends_on = [
    "instantiate-julia",
    "generate-testmodels",
] }
generate-testmodels = "python utils/generate-testmodels.py"
tests = { depends_on = ["lint", "test-ribasim-python", "test-ribasim-core"] }
# Codegen
generate-schema = { cmd = "julia --project=docs docs/gen_schema.jl", depends_on = [
    "instantiate-julia",
] }
generate-python = "datamodel-codegen --output-model-type pydantic_v2.BaseModel --base-class ribasim.input_base.BaseModel --use-union-operator --use-title-as-name --use-double-quotes --disable-timestamp --use-default --strict-nullable --input-file-type=jsonschema --input docs/schema/root.schema.json --output python/ribasim/ribasim/models.py"
codegen = { depends_on = ["generate-schema", "generate-python", "lint"] }
# Publish
build-ribasim-python-wheel = { cmd = "rm --recursive --force dist && python -m build && twine check dist/*", cwd = "python/ribasim" }
build-ribasim-api-wheel = { cmd = "rm --recursive --force dist && python -m build && twine check dist/*", cwd = "python/ribasim_api" }
build-wheels = { depends_on = [
    "build-ribasim-python-wheel",
    "build-ribasim-api-wheel",
] }
publish-ribasim-python = { cmd = "twine upload dist/*", cwd = "python/ribasim", depends_on = [
    "build-ribasim-python-wheel",
] }
publish-ribasim-api = { cmd = "twine upload dist/*", cwd = "python/ribasim_api", depends_on = [
    "build-ribasim-api-wheel",
] }
# QGIS
install-ribasim-qgis = "python ribasim_qgis/scripts/install_ribasim_qgis.py"
install-imod-qgis = "python ribasim_qgis/scripts/install_qgis_plugin.py iMOD && python ribasim_qgis/scripts/enable_plugin.py imodqgis"
install-plugin-reloader = "python ribasim_qgis/scripts/install_qgis_plugin.py \"Plugin Reloader\" && python ribasim_qgis/scripts/enable_plugin.py plugin_reloader"
start-docker-qgis = { cmd = "sh ./start.sh", cwd = ".docker" }
test-ribasim-qgis = { cmd = "sh ./test.sh; sh ./stop.sh", cwd = ".docker", depends_on = ["start-docker-qgis"] }
install-qgis-plugins = { depends_on = [
    "install-plugin-reloader",
    "install-ribasim-qgis",
    "install-imod-qgis",
] }
mypy-ribasim-qgis = "mypy ribasim_qgis"

[dependencies]
build = "*"
datamodel-code-generator = "*"
geopandas = "*"
jupyterlab = "*"
matplotlib = "*"
mypy = "*"
pandas = "*"
pandas-stubs = "*"
pandera = "*"
pip = "*"
pre-commit = "*"
pyarrow = "*"
pydantic = ">=2"
pyogrio = "*"
pytest = "*"
pytest-cov = "*"
pytest-xdist = "*"
python = ">=3.10"
quartodoc = "*"
ruff = "*"
shapely = ">=2.0"
tomli = "*"
tomli-w = "*"
twine = "*"
typing-extensions = ">=4.6"
xarray = "*"
xmipy = "*"
qgis = "3.28.*"
platformdirs = "*"
pyqt-stubs = "*"
types-requests = "*"
qgis-plugin-manager = "*"

[target.win-64.dependencies]
quarto = "*"

[target.linux-64.dependencies]
quarto = "*"

[target.osx-64.dependencies]
quarto = "*"
