---
title: "Release process"
---

# What is a release

The [Ribasim repository](https://github.com/Deltares/Ribasim) contains several components, e.g., the Julia core, the Python tooling and QGIS plugin.
The components are currently only guaranteed to work together if they have the same version number.
Therefore we release Ribasim as a collection of all the components at once, all carrying the same version number.
For maximum interoperability it is suggested to only release all components together, and not individually.

For these releases we use [Calender Versioning](https://calver.org/), which makes it clear in which month the release was made.

# Release steps

This section provides a guide for developers to follow when preparing a new release.

## Pre-release checks

Before starting the release process, ensure that all tests are passing and that all features intended for the release are complete and merged into the main branch.

## Update version numbers of the components

Determine the new version number like `2023.08.0`, filling in the current year, month and a sequential "MICRO" number.
This follows `YYYY.0M.MICRO` from [calver](https://calver.org/).

Update the version numbers in the repository to the new version number.
A single find and replace can update all 5 locations:

- `pixi.toml`
- `core/Project.toml`
- `python/ribasim/ribasim/__init__.py`
- `python/ribasim_api/ribasim_api/__init__.py`
- `ribasim_qgis/metadata.txt`

Now submit a pull request to update the version numbers.

## Create a new release

When the pull request is merged to main, checkout the commit that updates the version numbers.

Create a new tag, which is the letter `v` followed by the version number, like, `v2023.08.0`.

This can be done by executing:
```bash
git tag <tagname>
```
Then push the tags:
```bash
git push --tags
```

This will trigger a workflow on TeamCity that will publish a new release on GitHub as soon as it is finished.
You can follow the progress [here](https://dpcbuild.deltares.nl/buildConfiguration/Ribasim_Ribasim_MakeGitHubRelease?mode=builds).
It also auto-generates a changelog.
You'll probably want to curate that by rearranging the most important changes for users to the top in the form of [Keep a Changelog](https://keepachangelog.com/en/1.0.0/).
The possibly long list of generated release notes can put below an "All changes" collapsed item as such:

```
<details>
<summary>
All changes
</summary>

# Put Github flavored markdown here

</details>

```

## Release the Ribasim Python packages to PyPI

To be able to install packages with `pip`, they need to be released on the Python Package Index (PyPI).
In order to publish Ribasim Python or Ribasim API follow the following steps:

1) Open a terminal and run `pixi run publish-ribasim-python`

2) Open a terminal and run `pixi run publish-ribasim-api`

## Do manual checks

Our continuous integration (CI) should have caught most issues.
A current weak spot in our testing is the QGIS plugin, so it is a good idea to do some manual checks to see if it works properly.
Start with running the automated task to see if it can be correctly installed.

```sh
# This test might give a fatal error on the first run, this is most likely a timing issue.
# Try to run it again when that happens.
pixi run test-ribasim-qgis-ui
```

It is a good idea to load new test models if there are any, or test any other changed functionality.

## Announce release

Announce the release in appropriate channels.
Include a link to the release notes and assets, which is whatever [this](https://github.com/Deltares/Ribasim/releases/latest) resolves to at that time.
Also include a link to the [documentation](https://deltares.github.io/Ribasim/).
