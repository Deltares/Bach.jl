---
title: "Python tooling development"
---

# Set up the developer environment

## Setting up pixi

First, set up pixi as described on their getting started [page](https://prefix.dev/docs/pixi/overview).

Then set up the environment by running the following commands:

```
pixi run install
```


## Running the tests {#sec-test}

In order to run tests on Ribasim Python execute

```bash
pixi run test-ribasim-python
```

## Updating example notebooks

Make sure to run `Clear All Outputs` on the notebook before committing.

## Prepare model input

Before running the Julia tests or building binaries, example model input needs to created.
This is done by running the following:

```
pixi run generate-testmodels
```

This places example model input files under `./generated_testmodels/`.
If the example models change, re-run this script.

## Setup Visual Studio Code (optional) {#sec-vscode}

Install the [Python](https://marketplace.visualstudio.com/items?itemName=ms-python.python), [ruff](https://marketplace.visualstudio.com/items?itemName=charliermarsh.ruff) and [autoDocstring](https://marketplace.visualstudio.com/items?itemName=njpwerner.autodocstring) extensions.

## Linting

To run our linting suite locally, execute:

```
pixi run lint
```

# Code maintenance {#sec-codecov}

For new features new tests have to be added. To monitor how much of the code is covered by the tests we use [Codecov](https://about.codecov.io/).
For a simple overview of the local code coverage run
```
pixi shell
pytest --cov=ribasim tests/
```
from  `python/ribasim`. For an extensive overview in `html` format use
```
pixi shell
pytest --cov=ribasim --cov-report=html tests/
```
which creates a folder `htmlcov` in the working directory. To see te contents open `htmlcov/index.html` in a browser.

The code coverage of pushed branches can be seen [here](https://app.codecov.io/gh/Deltares/Ribasim).
