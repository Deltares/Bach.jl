---
title: "Python tooling development"
---

# Set up the developer environment

## Setting up conda

In order to develop on `ribasim` locally, please follow the following steps:

- Download and install [miniconda](https://docs.conda.io/en/latest/miniconda.html).

- Initialize `conda` by running the following in the `Miniconda prompt`:

```
conda init
```

- Depending on your company settings, you might also have to run the following in a Powershell terminal as administrator:

```
Set-ExecutionPolicy -ExecutionPolicy RemoteSigned
```

## Creating (or updating) the environment

- Create (or update) the environment by executing the following in your terminal:

```
conda env create --file=environment.yml --force
```

## Installing Python packages

- Activate the environment

```
conda activate ribasim
```

In order to develop on `ribasim` locally, execute the following line inside your virtual environment with the repo root as your working directory:

```bash
pip install --editable python/ribasim
pip install --editable python/ribasim_testmodels
pip install --editable python/ribasim_api
```

## Install the pre-commit hook {#sec-precommit}

If not already done, activate the environment:

```
conda activate ribasim
```

Pre-commit ensures that all linters are happy with your code before you commit your files.
In order to install the pre-commit hook run:

```bash
pre-commit install
```


## Running the tests {#sec-test}

If not already done, activate the environment:

```
conda activate ribasim
```

To run the tests call `pytest` with the path to the Python package.
Here the the root of the repository is the working directory:

```bash
pytest python/ribasim
```

## Building the documentation

Run in the docs folder:

```
quartodoc build
```

This will generate the `.qmd` files in `docs/python/reference` for inspection.

## Updating example notebooks

Make sure to run `Clear All Outputs` on the notebook before committing.

## Prepare model input

Before running the Julia tests or building binaries, example model input needs to created.
This is done by running the following Python script:

```
python python/ribasim/tests/conftest.py
```

This places example model input files under `./data/`.
If the example models change, re-run this script.

## Setup Visual Studio Code (optional) {#sec-vscode}

1. Install the [Python](https://marketplace.visualstudio.com/items?itemName=ms-python.python), [ruff](https://marketplace.visualstudio.com/items?itemName=charliermarsh.ruff) and [autoDocstring](https://marketplace.visualstudio.com/items?itemName=njpwerner.autodocstring) extensions.

2. Copy `.vscode/settings_template.json` into `.vscode/settings.json`

## How to publish to PyPI

1) Update `__version__` in `ribasim/__init__.py`

2) Open a terminal and run `cd python/ribasim`

3) Activate the ribasim environment with `conda activate ribasim`

4) If present remove dist folder

5) Re-create the wheels:
```
python -m build
```

6) Check the package files:
```
twine check dist/*
```

7) Make a new commit with the updated version number, and push to remote

8) Re-upload the new files:
```
twine upload dist/*
```

## Automatic code formatting with Black {#sec-black}

We use the [Black](https://black.readthedocs.io/en/stable/) code formatter.
Code only passes the continuous integration checks if it is fully formatted according to the Black code style.
When working in VS Code the settings suggested in @sec-vscode run Black automatically when saving Python files.

If you want to run Black manually, you can run it from the command line.
To run it on the entire repository, use the command below.
Here the repository root is the working directory.

```
black .
```

## Code linting with Ruff {#sec-ruff}

We use the [Ruff](https://github.com/charliermarsh/ruff) linter to help finding issues with Python code.
Code only passes the continuous integration checks if Ruff does not find any issues.

To run Ruff on the entire repository, use the command below.
Here the repository root is the working directory.

```
ruff .
```

# Code maintenance {#sec-codecov}

For new features new tests have to be added. To monitor how much of the code is covered by the tests we use [Codecov](https://about.codecov.io/).
For a simple overview of the local code coverage run
```
pytest --cov=ribasim tests/
```
from  `python/ribasim`. For an extensive overview in `html` format use
```
ytest --cov=ribasim --cov-report=html tests/
```
which creates a folder `htmlcov` in the working directory. To see te contents open `htmlcov/index.html` in a browser.

The code coverage of pushed branches can be seen [here](https://app.codecov.io/gh/Deltares/Ribasim).
