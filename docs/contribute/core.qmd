---
title: "Julia core development"
---

# Julia core overview

This section is about the Julia core in `Ribasim.jl`. See the component overview [here](index.qmd) for the context of this computational core.

`Ribasim.jl` can be divided into 3 parts:

- Model initialization
- Running the simulation loop
- Writing the output files

The figure below gives a more detailed description of the simulation loop in the form of a [sequence diagram](https://en.wikipedia.org/wiki/Sequence_diagram). From top to bottom, it contains the following blocks:

- Allocation optimization; activated when the allocation timestep has been passed;
- Control actions; activated when some discrete control callback is triggered;
- Water balance; computing the flows over flow edges happens each timestep;
- Time integration step; done by the integrator from `OrdinaryDiffEq.jl`.

```{mermaid, style="margin-top: 0"}
sequenceDiagram
    autonumber
    participant Int as Process: Integrator
    participant Optim as Process: Allocation optimization
    participant Param as Data: Parameters
    participant State as Data: State
    participant Sim as Process: Water balance
    loop Simulation loop (OrdinaryDiffEq.jl)
        activate Int
        %% Allocation
        rect rgb(200, 200, 200)
            opt Allocation optimization, per allocation network (JuMP.jl, HiGHS)
                activate Optim
                Int->>Optim: Callback: allocation timestep has passed
                Param-->>Optim: Input
                State-->>Optim: Input
                Optim->>Optim: Optimize Basin allocations if below target level
                Optim->>Optim: Optimize User allocation, per priority
                Optim-->>Param: Set allocated flow rates
                deactivate Optim
            end
        end
        %% Control
        rect rgb(200, 200, 200)
            opt Control actions
                Int->>Int: DiscreteControl callback
                Int-->>Param: Parameter updates by control
            end
        end
        %% water_balance!
        rect rgb(200, 200, 200)
            activate Sim
            State-->>Sim: Input
            Param-->>Sim: Input
            Sim->>Sim: Compute flows over edges per node type
            Sim-->>Param: Set flows
            deactivate Sim
        end
        %% Time integration
        rect rgb(200, 200, 200)
            State-->>Int: Input
            Param-->>Int: Input
            Int->>Int: Time integration step
            Int-->>State: Update state
        end
        deactivate Int
  end
```

# Set up the developer environment

## Install optional Julia libraries

Start the Julia [REPL](https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop) by executing `pixi run julia` in your terminal.
Within the REPL type `]` to enter the Pkg REPL.
For more information on how to use `Pkg`, see the [Getting Started](https://pkgdocs.julialang.org/v1/getting-started/) page in its documentation.
There you can add `Revise` and `TestEnv` to your global environment.

```julia
pkg> add Revise TestEnv
```

## Setup Revise.jl

Revise.jl is a library that allows you to modify code and use the changes without restarting Julia.
You can let it start automatically by following these [instructions](https://timholy.github.io/Revise.jl/stable/config/#Using-Revise-by-default-1).

## Install Visual Studio Code (optional)

There is a section on editors and IDEs for Julia on <https://julialang.org/>, scroll down to see it.
We use and recommend Microsoft's free editor [Visual Studio Code](https://code.visualstudio.com/).
When combined with the [Julia extension](https://www.julia-vscode.org/) it provides a powerful and interactive development experience.
Make sure to have the correct environment when opening your IDE by running `pixi run code .`, or opening a `pixi shell` and then calling the command to open the editor of your choice.

# Developing on Ribasim

## Running tests {#sec-test}

You will want to run the testsuite on a regular basis to check if your changes had unexpected side effects.
It is also a good way to find out if your development environment is set up correctly.

Before the tests can run, you need to [prepare model input](./python.qmd#prepare-model-input).

With the root of the repository as your working directory you can start the REPL with activated `Ribasim` environment by running the following:

```bash
julia --project
```

While not technically required, it is advised to import Ribasim first to catch installation issues early on.

```julia
julia> using Ribasim
```

Then open the Pkg REPL by typing `]` and execute:

```julia
pkg> test Ribasim
```

In order to debug tests, it is very useful to run them in a REPL.
However, here, you don't have the dependencies available in the `[extras]` section of your `Project.toml`.
[`TestEnv.jl`](https://github.com/JuliaTesting/TestEnv.jl) that we installed earlier solves that problem.

When you then debug your tests inside the REPL, you can include the `[extras]` dependencies as follows:

```julia
using TestEnv,
TestEnv.activate("Ribasim")
```

## Render documentation

Example models are created and simulated as part of the rendering of the documentation.
The Julia API reference is created using Documenter.jl by running this command:

```bash
pixi run build-julia-docs
```

In order to preview documentation you can run the following command from the `docs/` folder.
Afterwards, a browser tab will open with the rendered documentation, updating it as you
make changes.

```bash
pixi run quarto-preview
```

The documentation also includes [Jupyter notebooks](https://jupyter.org/).
Note that they are stored in the repository without any output, and this should stay
this way to keep the repository small. The documentation rendering process adds the output
by running the notebooks.

:::{.callout-tip}
The Jupyter VS Code [extension](https://marketplace.visualstudio.com/items?itemName=ms-toolsai.jupyter) allows you to run Jupyter notebooks directly in VS Code.
:::

## Run Ribasim simulations

Assuming your working directory is the root of the repository,
you can activate this project by entering the Pkg mode of the REPL with `]` and execute:

```julia
pkg> activate .
pkg> instantiate
```

Press backspace to go back to the Julia REPL.
There you can run a model with:
```julia
julia> Ribasim.run("path/to/model/ribasim.toml")
```

:::{.callout-tip}
The Julia VS Code extension allows you to [execute code cells in REPL](https://www.julia-vscode.org/docs/stable/userguide/runningcode/#Running-code-in-the-Julia-REPL).
This is a very convenient way of executing only parts of your source file.
:::
