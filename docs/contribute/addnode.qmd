---
title: "Adding node types"
---

Several parts of the code have to be made aware of the new node type. In the rest of this page we shall call our new node type `NewNodeType`.

# The Julia core

## Parameters

The parameters object (defined in `solve.jl`) passed to the ODE solver must be made aware of the new node type. Therefore define a struct in `solve.jl` which holds the data for each node of the new node type:

```julia
struct NewNodeType
    node_id::Vector{Int}
    # Other fields
end
```

These fields do not have to correspond 1:1 with the input tables (see below). The vector with all node IDs that are of the new type in a given model is a mandatory field. Now you can:

- Add `new_node_type::NewNodeType` to the Parameters object;
- Add `new_node_type = NewNodeType(db,config)` to the function `Parameters` in `create.jl` and add new_node_type at the proper location in the `Parameters` constructor call.

## Reading from configuration

There can be several schemas associated with a single node type. To define a schema for the new node type, add the following to `validation.jl`:

```julia
@schema "ribasim.newnodetype.static" NewNodeTypeStatic

"""
node_id: node ID of the NewNodeType node
"""
@version NewNodeTypeStaticV1 begin
    node_id::Int
    # Other fields
end
```

Here `Static` refers to data that does not change over time. For naming conventions of these schemas see [Node usage](../core/usage.qmd#node).

`validation.jl` also deals with checking and applying a specific sorting order for the tabular data (default is sorting by node ID only), see `sort_by_function` and `sorted_table!`.

Now we define the function that is called in the second bullet above, in `create.jl`:

```julia
function NewNodeType(db::DB, config::Config)::NewNodeType
    static = load_structvector(db, config, NewNodeTypeStaticV1)
    defaults = (; foo = 1, bar = false)
    # Process potential control states in the static data
    parsed_parameters, valid = parse_static_and_time(db, config, "Outlet"; static, defaults)

    if !valid
        error("Errors occurred when parsing NewNodeType data.")
    end

    # Unpack the fields of static as inputs for the NewNodeType constructor
    return NewNodeType(
        parsed_parameters.node_id,
        parsed_parameters.some_property,
        parsed_parameters.control_mapping)
end
```

## Node behavior

In general if the new node type dictates flow, the behaviour of the new node in the Ribasim core is defined in a method of the `formulate_flow!` function, which is called within the `water_balance!` (both in `solve.jl`) function being the right hand side of the system of differential equations solved by Ribasim. Here the details depend highly on the specifics of the node type. An example structure of a `formulate_flow!` method is given below.

```julia
function formulate_flow!(new_node_type::NewNodeType, p::Parameters)::Nothing
    # Retrieve relevant parameters
    (; connectivity) = p
    (; flow) = connectivity
    (; node_id, param_1, param_2) = new_node_type

    # Loop over nodes of NewNodeType
    for (i, id) in enumerate(node_id)
        # compute e.g. flow based on param_1[i], param_2[i]
    end

    return nothing
end
```

If the new node type is non-conservative, meaning it either adds or removes water from the model, these boundary flows also need to be recorded.
This is done by storing it on the diagonal of the `flow[from, to]` matrix, e.g. `flow[id, id] = q`, where `q` is positive for water added to the model.
Non-conservative node types need to be added to the `nonconservative_nodetypes` set such that this diagonal is set to a nonzero on creating the flow sparse matrix in the `Connectivity` constructor.

## The Jacobian

See [Equations](../core/equations.qmd#the-jacobian) for a mathematical description of the Jacobian.

Before the Julia core runs its simulation, the sparsity structure `jac_prototype` of $J$ is determined with `get_jac_prototype` in `utils.jl`. This function runs trough all node types and looks for nodes that create dependencies between states. It creates a sparse matrix of zeros and ones, where the ones denote locations of possible non-zeros in $J$.

We divide the various node types in groups based on what type of state dependencies they yield, and these groups are discussed below. Each group has its own method `update_jac_prototype!` in `utils.jl` for the sparsity structure induced by nodes of that group. `NewNodeType` should be added to the signature of one these methods, or to the list of node types that do not contribute to the Jacobian in the method of `update_jac_prototype!` whose signature contains `node::AbstractParameterNode`. Of course it is also possible that a new method of `update_jac_prototype!` has to be introduced.

The current dependency groups are:

- Out-neighbor dependencies: examples are `TabulatedRatingCurve`, `Pump` (the latter only in the reduction factor regime and not PID controlled). If the in-neighbor of a node of this group is a basin, then the storage of this basin affects itself and the storage of the outneighbor (or the basin one node further if it is connected with a `FractionalFlow` in between) if that is also a basin;
- Either-neighbor dependencies: examples are `LinearResistance`, `ManningResistance`. If either the in-neighbor or out-neighbor of a node of this group is a basin, the storage of this basin depends on itself. If both the in-neighbor and the out-neighbor are basins, their storages also depend on eachother.
- The `PidControl` node is a special case which is discussed in [equations](../core/equations.qmd#sec-PID).

Using `jac_prototype` the Jacobian of `water_balance!` is computed automatically using [ForwardDiff.jl](https://juliadiff.org/ForwardDiff.jl/stable/) with memory management provided by [PreallocationTools.jl](https://docs.sciml.ai/PreallocationTools/stable/). These computations make use of `DiffCache` and dual numbers.

# Python I/O

## Python class

Create a new file `python/ribasim/ribasim/node_types/new_node_type.py` which is structured as follows:

```python
from typing import Optional

import pandera as pa
from pandera.engines.pandas_engine import PydanticModel
from pandera.typing import DataFrame
from pydantic import ConfigDict

from ribasim import models
from ribasim.input_base import TableModel

__all__ = ("NewNodeType",)

class StaticSchema(pa.SchemaModel):
    class Config:
        """Config with dataframe-level data type."""

        dtype = PydanticModel(models.NewNodeTypeStatic)

# Possible other schemas


class NewNodeType(TableModel):
    """
    Description of this node type.

    Parameters
    ----------
    static: pandas.DataFrame
        table with data for this node type.

    possible other schemas
    """

    static: Optional[DataFrame[StaticSchema]] = None
    # possible other schemas

    model_config = ConfigDict(validate_assignment=True)

    def sort(self):
        self.static.sort_values("node_id", ignore_index=True, inplace=True)

```
The `sort` method should implement the same sorting as in `validation.jl`.

Now in both `python/ribasim/ribasim/__init__.py` and `python/ribasim/ribasim/node_types/__init__.py` add

- `from ribasim.node_types.new_node_type import NewNodeType`;
- `"NewNodeType"` to `__all__`.

In `python/ribasim/ribasim/model.py`, add

- `from ribasim.new_node_type import NewNodeType`;
- new_node_type as a parameter and in the docstring of the `Model` class.

In `python/ribasim/ribasim/geometry/node.py` add a color and shape description in the `MARKERS` and `COLORS` dictionaries.

# QGIS plugin

The script `ribasim_qgis/core/nodes.py` has to be updated to specify how the new node type is displayed by the QGIS plugin. Specifically:

- Add a color and shape description in the `MARKERS` dictionary in `Node.renderer`,
  consistent with the entries added above;
- Add an input class per schema, e.g.

```python
class NewNodeTypeStatic:
    input_type = "NewNodeType / static"
    geometry_type = "No Geometry"
    attributes = [
        QgsField("node_id", QVariant.Int)
        # Other fields for properties of this node
    ]
```


# Validation

The new node type might have associated restrictions for a model with the new node type so that it behaves properly. Basic node ID and node type validation happens in `Model.validate_model` in `python/ribasim/ribasim/model.py`, which automatically considers all node types in the `node_types` module.

Connectivity validation happens in `valid_edges` and `valid_n_flow_neighbors` in `core/src/solve.jl`. Connectivity rules are specified in `core/src/validation.jl`. Allowed upstream and downstream neighbor types for `NewNodeType` in are specified as follows:

```julia
# set allowed downstream types
neighbortypes(::Val{:NewNodeType}) = Set((:Basin,))
# add your newnodetype as acceptable downstream connection of other types
neighbortypes(::Val{:Pump}) = Set((:Basin, :NewNodeType))
```

The minimum and maximum allowed number of inneighbors and outneighbors for `NewNodeType` are specified as follows:

```julia
# Allowed number of flow/control inneighbors and outneighbors per node type
struct n_neighbor_bounds
    in_min::Int
    in_max::Int
    out_min::Int
    out_max::Int
end

n_neighbor_bounds_flow(::Val{:NewNodeType}) =
    n_neighbor_bounds(0, 0, 1, typemax(Int))

n_neighbor_bounds_control(::Val{:NewNodeType}) =
    n_neighbor_bounds(0, 1, 0, 0)
```

Here `typemax(Int)` effectively means unbounded.


# Tests

Models for the julia tests are generated by running `pixi run generate-testmodels`, which uses model definitions from the `ribasim_testmodels` package, see [here](python.qmd#installing-python-packages). These models should also be updated to contain the new node type. Note that certain tests must be updated accordingly when the models used for certain tests are updated, e.g. the final state of the models in `core/test/basin.jl`. The following function is used to format the array of this final state.

```julia
reprf(x) = repr(convert(Vector{Float32}, x))
```

See [here](python.qmd#sec-codecov) for monitoring of Python test coverage.

If the new node type introduces new (somewhat) complex behaviour, a good test is to construct a minimal model containing the new node type in `python/ribasim_testmodels/ribasim_testmodels/equations.py` and compare the simulation result to the analytical solution (if possible) in `core/test/equations.jl`.


# Documentation

There are several parts of the documentation which should be updated with the new node type:

- `docs/core/equations` should contain a short explanation and if possible an analytical expression for the behaviour of the new node;
- `docs/core/usage.qmd` should contain a short explanation of the node and the possible schemas associated with it;
- The example models constructed in `docs/python/examples.ipynb` should be extended with the new node type or a new example model with the new node type should be made.
- In `_quarto.yml` add `NewNodeType` to the "Node types" contents for the Python API reference.


# Finishing up

When a new node type is created, one needs to run

```
pixi run codegen
```

This will derive all JSON Schemas from the julia code, and write them to the docs folder.
From these JSON Schemas the Python modules `models.py` and `config.py` are generated.

Since adding a node type touches both the Python and Julia code,
it is a good idea to run both the [Python test suite](python.qmd#test) and [Julia test suite](core.qmd#test) locally before creating a pull request.
You can run all tests with:

```
pixi run tests
```
