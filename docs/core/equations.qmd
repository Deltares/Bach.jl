---
title: "Equations"
---

Ribasim currently simulates the following "natural" water balance terms:

1. Precipitation
2. Evaporation
3. Infiltration
4. Drainage
5. Urban runoff
6. Upstream and downstream flow

Additionally, Ribasim simulates the following "allocated" water balance terms:

1. General user
2. Flushing

Depending on the type of boundary conditions, Ribasim requires relation between
storage volume and wetted area $A$, and between the storage volume and the
water level $h$. These are (currently) represented by piecewise linear
relationships.

# Formal model description
In this section we give a formal description of the problem that is solved by Ribasim.
The problem is of the form

$$
\frac{\text{d}\mathbf{u}}{\text{d}t} = f(\mathbf{u},p(t),t),\quad t \in [t_0,t_\text{end}],
$$

i.e. a system of coupled first order ordinary differential equations, with initial condition $\mathbf{u}(t_0)= \mathbf{u}_0$ and time dependent input data denoted by $p(t)$.

The model is given by a directed graph, consisting of a set of nodes (or vertices) $V$ and edges $E$.
Let $V$ be the set of node IDs and let $E$ be the set of ordered tuples $(i,j)$ meaning that node $i$ is connected to node $j$.

We can split the set of nodes into two subsets $V = B \cup N$, where $B$ is the set of basins and $N$ is the set of non-basins.
The basins have an associated storage state and the non-basins dictate how water flows to or from basins.

$\mathbf{u}(t)$ is given by all the states of the model, which are (currently) the storage of the basins.
Given a single basin with node ID $i \in B$, the equation that dictates the change of its storage over time is given by

$$
\frac{\text{d}S_i}{\text{d}t} =
\sum_{(i',j') \in E | j' = i} Q_{i',j'} - \sum_{(i',j') \in E | i' = i} Q_{i',j'} + F_i(\mathbf{u},p,t).
$$

Here $Q_{i,j}$ is the flow along an edge, where the graph direction dictates positive flow.
So the first term denotes flow towards the basin, the second one denotes flow away from the basin, and the third term denotes external forcing.
$F_i(\mathbf{u},p,t)$ is given by input data and the current state of the model, and $Q_{i' ,j'}$ is determined by the type of nodes that connect to that edge.

The various node and forcing types that the model can contain are explained below.

# Natural water balance terms
## Precipitation

The precipitation term is given by

$$
    Q_P = P \cdot A(S).
$$ {#eq-precip}

Here $P = P(t)$ is the precipitation rate and $A$ is the wetted area. $A$ is a
function of the storage $S = S(t)$: as the volume of water changes, the area of the free water
surface may change as well, depending on the slopes of the surface waters.

## Evaporation

The evaporation term is given by

$$
    Q_E = E_\text{pot} \cdot A(S) \cdot r.
$$ {#eq-evap}

Here $E_\text{pot} = E_\text{pot}(t)$ is the potential evaporation rate and $A$ is the wetted area. $r$ is the reduction factor which depends on the depth $d$ and is given by
$$
    r = \frac{\min\{d,0.1\}}{0.1} \le 1.
$$ {#eq-reduc}
It provides a smooth gradient as $S \rightarrow 0$ (but not at $d=0.1$).

A straightforward formulation $Q_E = \mathrm{max}(E_\text{pot} A(S),
0)$ is unsuitable, as $\frac{\mathrm{d}Q_E}{\mathrm{d}S}(S=0)$ is then not well-defined.

<!--
A hyperbolic tangent is a commonly used activation function
[@enwiki:1106669904] to approximate on-off behavior while preserving a smooth
derivative.
-->

A non-smooth derivative results in extremely small timesteps and long
computation time: ModelingToolkit identifies the singular behavior and adjusts
its timestepping. In a physical interpretation, evaporation is switched on or
off per individual droplet of water. In general, the effect of the reduction term
is negligible, or not even necessary. As a surface water dries, its wetted area
decreases and so does the evaporative flux. However, for (simplified) cases with
constant wetted surface (a rectangular profile), evaporation only stops at $S =
0$.

## Infiltration and Drainage

Infiltration is provided as a lump sum for the basin. If Ribasim is coupled with
MODFLOW 6, the infiltration is computed as the sum of all **positive** flows of the
MODFLOW 6 boundary conditions in the basin:

$$
    Q_\text{inf} = \sum_{i=1}^{n} \sum_{j=1}^{m} \max(Q_{\mathrm{mf6}_{i,j}}, 0.0)
$$ {#eq-inf}.

Where $i$ is the index of the boundary condition, $j$ the MODFLOW 6 cell index,
$n$ the number of boundary conditions, and $m$ the number of MODFLOW 6 cells in
the basin. $Q_{\mathrm{mf6}_{i,j}}$ is the flow computed by MODFLOW 6 for cell $j$
for boundary condition $i$.

Drainage is a lump sump for the basin, and consists of the sum of the absolute
value of all **negative** flows of the MODFLOW 6 boundary conditions in the
basin.

$$
    Q_\text{drn} = \sum_{i=1}^{n} \sum_{j=1}^{m} \left| \min(Q_{\mathrm{mf6}_{i,j}}, 0.0) \right|
$$ {#eq-drn}

The interaction with MODFLOW 6 boundary conditions is explained in greater
detail in the [the MODFLOW coupling section](../couple/modflow.qmd) of the documentation.

## Upstream and downstream flow

Ribasim's basins can be connected to each other, and each basin expects an
explicit connection. Two connections are currently available for inter-basin
flows:

1. `OutflowTable`
2. `LinearResistance`

The flow direction of the basin is not pre-determined: flow directions may
freely reverse, provided the connection allows it. Currently, a `LinearResistance`
allows bidirectional flow, but the

Additionally, three additional "connections" area available for the "outmost"
basins (external nodes) in a network.

1. `Terminal`
2. `LevelBoundary`
3. `FlowBoundary`

### OutflowTable

The OutflowTable is a tabulation of a basin's discharge behavior. It describes
a piecewise linear relationship between the basin's storage volume and its
discharge. It can be understood as an empirical description of a basin's
properties. This can include a weir, but also the lumped hydraulic behavior of the
upstream channels.

The OutflowTable should indicate at which volume no discharge occurs (the dead
storage volume).

:::{.callout-note}
Currently, the discharge relies only on the basin's volume; it could also use
the volume of both connected basins to simulate backwater effects, submersion
of weirs, or even reversal of flows for high precipitation events.
:::

### LinearResistance

A `LinearResistance` connects two basins together. The flow between the two basins
is determined by a linear relationship:

$$
    Q = \frac{h_a - h_b}{R}
$$ {#eq-basinflow}

Here $h_a$ is the water level in the first basin, $h_b$ is the water level in
the second basin, and $R$ is the resistance of the link. A `LinearResistance` makes
no assumptions about the direction of the flow: water flows from high to low.

### Terminal

This only allows outflow from a basin into a terminal node.

### LevelBoundary

This can be connected to a basin via a `LinearResistance`. This boundary node will then
exchange water with the basin based on the difference in water level between the two.

### FlowBoundary

This can be connected directly to a basin and prescribes the flow to or from that basin. We require that the edge connecting the flow boundary to the basin should point towards the basin, so that positive flow corresponds to water being added to the model.

### Manning connection

Ribasim is capable of simulating steady flow between basins through a reach
described by a trapezoidal profile and a Manning roughness coefficient.

We describe the discharge from basin $a$ to basin $b$ solely as a function of
the water levels in $a$ and $b$.

$$
Q = f(h_a, h_b)
$$

where:

* The subscripts $a,b$ denote basins
* $h$ is the hydraulic head, or water level

The energy equation for open channel flow is:

$$
H = h + \frac{v^2}{2g}
$$

Where

* $H$ is total head
* $v$ is average water velocity
* $g$ is gravitational acceleration

The discharge $Q$ is defined as:

$$
Q = Av
$$

where $A$ is cross-sectional area.

We use conservation of energy to relate the total head at $a$ to $b$,
with $H_a > H_b$ as follows:

$$
H_a = H_b + h_{\text{loss}}
$$

Or:

$$
h_a + \frac{v_a^2}{2g} = h_b + \frac{v_b^2}{2g} + h_{\text{loss}}
$$

Where $v$ is the average water velocity. $h_{\text{loss}}$ is a combination of
friction and contraction/expansion losses:

$$
h_{\text{loss}} = S_f L + \frac{C}{2g} (v_b^2 - v_a^2)
$$

Where:

* $L$ is the reach length
* $S_f$ is the representative friction slope
* $C$ is the expansion or contraction coefficient, $0 \le C \le1$

We assume velocity differences in a connection are negligible ($v_a = v_b$):

$$
h_a = h_b + S_f L
$$

Friction losses are computed with the Gauckler-Manning formula:

$$
Q = \frac{A}{n} R_h^\frac{2}{3} \sqrt{S_f}
$$

Where:

* $A$ is the **representative** area.
* $R_h$ is the **representative** wetted radius.
* $S_f$ is the **representative** friction slope.
* $n$ is Manning's roughness coefficient.

We can rewrite to express $S_f$ in terms of Q:

$$
S_f = Q^2 \frac{n^2}{A^2 R_h^{4/3}}
$$

No water is added or removed in a connection:

$$
Q_a = Q_b = Q
$$

Filling in:

$$
h_a = h_b + Q^2 \frac{n^2}{A^2 R_h^{4/3}} L
$$

We can then express $Q$ as a function of head difference:

$$
Q = \textrm{sign}(h_a - h_b) \frac{A}{n} R_h^{2/3}\sqrt{\frac{|h_a - h_b|}{L} }
$$

The $\textrm{sign}(h_a - h_b)$ term causes the direction of the flow to reverse
if the head in basin $b$ is larger than in basin $a$.

:::{.callout-note}
The computation of $S_f$ is not exact: we base it on a representative area and
hydraulic radius, rather than integrating $S_f$ along the length of a reach.
Direct analytic solutions exist for e.g. parabolic profiles (Tolkmitt), but
other profiles requires relatively complicated approaches (such as
approximating the profile with a polynomial).

Instead, we choose a representative radius and area at the upstream node. This
ensures that a basin will still receive water after it has gone dry. The size
of the resulting error will depend on the water depth difference between the
upstream and downstream basin.
:::

The cross sectional area for a trapezoidal or rectangular profile:

$$
A = w d + \frac{\Delta y}{\Delta z} d^2
$$

Where

* $w$ is the width at $d = 0$ (A triangular profile has $w = 0$)
* $\frac{\Delta y}{\Delta z}$ is the slope of the profile expressed as the
  horizontal length for one unit in the vertical (A slope of 45 degrees has
  $\frac{\Delta y}{\Delta z} = 1$; a rectangular profile 0).

Accordingly, the wetted perimeter is:

$$
B = w + 2 d \sqrt{\left(\frac{\Delta y}{\Delta z}\right)^2 + 1}
$$


# Allocated water balance terms

Ribasim has been designed with the functionality to allocate water to different
users within each basin. The volume allocated is determined by the user demand,
the available water, and the priority of each user with respect to other users
within the same basin. The water demands for a given basin can be summarized into
three user categories. The handling of the allocation of water for different
user categories varies, as explained in more detail below.

::: {.hidden}
$$
 \def\qavail{{Q_\text{avail vol}}}
 \def\demwm{{D_{\text{wm}}}}
 \def\demuser{{D_\text{user}}}
$$
:::

## General User

The General User category include the users Agriculture, Industry and Public
Water supply. These users extract water from the basin and the demand
($\demuser$) is determined externally.  The source of water allocated to the
General User is dependent on if the basin is a free-flowing type basin or a
level-controlled basin.

If the basin is free-flowing, the water source will be the available water within
the basin. If the basin is level-controlled additional water can be sourced from
the regional network, should the water available from the basin be insufficient
to satisfy $\demuser$.

The availability of water ($\qavail$) internally in a basin in a given timestep
is calculated by @eq-q-avail. This volume is available to be extracted by the
General Users. In the Ribasim prototype, additional water from the regional
network is currently modelled as an unlimited supply.

$$
    \qavail = \frac{(P - E_\text{pot}) \cdot A}{\mathrm{Δ}t} - \min(0, Q_\text{infil} - Q_\text{drain} - Q_\text{runoff}).
$$ {#eq-q-avail}

Here $A$ is the area. The $\qavail$ can be assigned to multiple users in the same basin. Allocation is
based upon user priority. For a given user, in the case where $\qavail >
\demuser$, the user demand is satisfied and the remaining $\qavail$ becomes
available for the user of next highest priority. For a given user, in the case
where $\demuser > \qavail$ then all of the available water is assigned to the
user. This results in an allocation shortage and no remaining local water for
any users of lower priority.

However, as discussed, if the basin is a level-controlled basin, additional water
can then be sourced from the regional network and is allocated to satisfy the
allocation shortage of the General User.

The allocation of water is decided intermittently by a separate process. This
separate process is not all-knowing and it may overextract. Like other water
balance sinks, negative storage is avoided and smooth numerical behavior is
ensured via an activation function:

$$
    Q_\text{user} = Q_\text{alloc} \cdot r
$$ {#eq-userflow}

## Flushing

The flushing requirement for the basin is a special case of user. Flushing is
required to maintain water quality in the basin. This is determined externally.
Water from the national network flows into the basin, and the same volume gets
removed from the basin back to the national network. This water cannot be
allocated to other users and there is no net change to the water level in the
basin or the $\qavail$, see @eq-flushing.

$$
    Q_\text{in} = -Q_\text{out}
$$ {#eq-flushing}

# Numerical solution

Ribasim uses OrdinaryDiffEq.jl to provide a numerical solution to the water
balance equations. Changes to forcings or parameters such as precipitation, but
also the allocated water abstraction is managed through the use of CallBack
functions [@callbacks]. In a coupled run, the exchanges with MODFLOW 6 are also
managed via the use of a callback function.

# Performance

Ribasim needs to be sufficiently fast to make application on the national scale, with
~10000 basins, practical. Therefore, whilst developing, we need to be mindful that
our approach can scale to such a size. We currently simulate a set of 40 connected
free-flowing basins for a period of 2 years in about 10 seconds.

For a real scaling test we would need to do a national simulation, but we expect these
computation times not to be problematic, considering that simulating those same 40 basins
in MODFLOW 6 takes minutes.

There are many things that can influence the calculations times, for instance:

- [Solver tolerance](https://diffeq.sciml.ai/stable/basics/faq/#What-does-tolerance-mean-and-how-much-error-should-I-expect)
    we currently use a very conservative tolerance of `1e-10`, whereas with larger
    tolerances step sizes can easily be 3x longer, leading to a 3x speedup.
- [ODE solvers](https://diffeq.sciml.ai/stable/solvers/ode_solve/): The `Rosenbrock23`
    method we use is robust to oscillations and massive stiffness, however other solvers
    should be tried as well.
- Forcing: Every time new forcing data is injected into the model, it needs to pause.
    Moreover, the larger the forcing fluxes are, the bigger the shock to the system,
    leading to smaller timesteps and thus longer simulation times.

Similarly to other models that solve using a system of equations, like MODFLOW 6, if one
basin takes longer to converge due to extreme forcing, or bad schematization, the system as
a whole need to iterate longer. It is important to be mindful of this, as poor
schematization choices can slow down the model.

When scaling up the model, we will need spend some time to strike the right balance between
error tolerance, schematization and forcing. The SciML software we use has many
[showcases](https://sciml.ai/showcase/) of large scale applications, as well as
documentation on how to achieve the optimal performance for your system.
