---
title: "Allocation"
---

# Introduction
Allocation is the process of assigning an allocated abstraction flow rate to user nodes in the physical layer of the model based on information about sources, user demands over various priorities, constraints introduced by nodes, local water availability and graph topology. The allocation procedure implemented in Ribasim is heavily inspired by the [maximum flow problem](https://en.wikipedia.org/wiki/Maximum_flow_problem).

The allocation problem is solved per subnetwork of the Ribasim model. The subnetwork is used to formulate an optimization problem with the [JuMP](https://jump.dev/JuMP.jl/stable/) package, which is solved using the [HiGHS solver](https://highs.dev/). For more in-depth information see also the example of solving the maximum flow problem with `JuMP.jl` [here](https://jump.dev/JuMP.jl/stable/tutorials/linear/network_flows/#The-max-flow-problem).

# The high level algorithm
The allocation algorithm consists of 3 types of optimization problems:

1. **Subnetwork demand collection**: Collect the demands of a subnetwork from the main network by optimizing with unlimited capacity from the main network;
2. **Main network allocation**: Allocate to subnetworks with the above collected demand, and users in the main network;
3. **Subnetwork allocation**: Allocate to users in the subnetworks with the flows allocated to the subnetwork in the main network allocation.

The total allocation algorithm consists of performing 1 for all subnetworks, then performing 2, then performing 3 for all subnetworks. Not having a main network is also supported, then 1 and 2 are skipped.

# Elements of allocation

The following data of the parameters and state of a Ribasim model are relevant for the allocation problem.

## Schematisation input

### The subnetwork

The allocation problem is solved per subnetwork, which is given by a subset $S \subset V$ of node ids. Different subnetworks are disjoint from eachother.

### Source flows

Sources are indicated by a set of edges in the subnetwork
$$
E_S^\text{source} \subset \left(S \times S\right) \cap E.
$$
That is, if $(i,j) \in E_S^\text{source}$, then $Q_{ij}$ (see the [formal model description](equations.qmd#formal-model-description)) is treated as a source flow in the allocation problem. These edges are either coming from a boundary/source node (e.g. a level or flow boundary) or connect the main network to a subnetwork.

### User demands

The subnetwork contains a subset of user nodes $U_S \subset S$, who all have time varying demands over various priorities $p$:
$$
    d^p_i(t), \quad i \in U_S, p = 1,2,\ldots, p_{\max}.
$$

:::{.callout-note}
On this page we assume that the priorities are given by all integers from $1$ to some $p_{\max} \in \mathbb{N}$. However, in the Ribasim input this is not a requirement; some of these in between priority values can be missing, only the ordering of the given priorities is taken into account.
:::

## Simulation (physical layer) input

### Vertical fluxes and local storage

Apart from the source flows denoted by edges, there are other sources of water in the subnetwork, associated with the basins in the subnetwork $B_S = B \cap S$. Firstly there is the sum of the vertical fluxes (precipitation, evaporation, infiltration and drainage) for each basin
$$
    \phi_i(t), \quad \forall i \in B_S.
$$

Secondly, there is the available water in each basin above the minimum level $l_{\min,i}$ corresponding to a minimum storage $s_{\min,i}$:
$$
    u_i(t)-s_{\min,i}, \quad \forall i \in B_S.
$$
Note that this value can be negative, which we interpret as a demand from the basin.

### Constraining factors

#### Flow magnitude and direction constraints
Nodes in the Ribasim model that have a `max_flow_rate`, i.e. pumps and outlets, put a constraint on the flow through that node. Some nodes only allow flow in one direction, like pumps, outlets and tabulated rating curves.

#### Fractional flows and user return flows
Both fractional flow nodes and user nodes dictate proportional relationships between flows over edges in the subnetwork. Users have a return factor $0 \le r_i \le 1, i \in U_S$.

## The allocation graph

A new graph is created from the subnetwork, which we call an allocation graph. The allocation graph is almost a subgraph of the main (flow) model, apart from the fact that an allocation graph can contain edges which are not in the main model.

### Nodes and edges

The allocation graph consists of:

- Nodes $V'_S \subset V_S$, where each basin, source and user in the subnetwork get a node in the allocation graph. Also nodes that have fractional flow outneighbors get a node in the allocation graph.
- Edges $E_S$, which are either edges that also appear between nodes in the subnetwork or represent a sequence of those, creating a shortcut.

For notational convenience, we use the notation

\begin{align}
    V^{\text{out}}_S(i) = \left\{j \in V'_S : (i,j) \in E_S\right\} \\
    V^{\text{in}}_S(j) = \left\{i \in V'_S : (i,j) \in E_S\right\}
\end{align}

for the set of in-neighbors and out-neighbors of a node in the allocation graph respectively.

### Capacities

Each edge in the allocation graph has an associated capacity. These capacities are collected in the sparse capacity matrix $C_S \in \overline{\mathbb{R}}_{\ge 0}^{n'\times n'}$ where $n' = \#V'_S$ is the number of nodes in the allocation graph. The capacities can be infinite, if there is nothing in the model constraining the capacity of the edge.

The capacities are determined in 4 different ways:

- If an edge does not exist in the allocation graph, i.e. $(i,j) \notin E_S$ for certain $1 \le i,j\le n'$, then $(C_S)_{i,j} = 0$;
- The capacity of the edge $e \in E_S$ is given by the smallest `max_flow_rate` of the nodes along the equivalent edges in the subnetwork. If there are no nodes with a `max_flow_rate`, the edge capacity is infinite;
- If the edge is a source, the capacity of the edge is given by the flow rate of that source.

# The optimization problem

The optimization problem for a subnetwork is a linear optimization problem consisting of an objective function with associated constraints on a set of variables, all of which are introduced below.

## The optimization variables

There are 2 types of variable whose value has to be determined to solve the allocation problem:

- The flows $F \in \mathbb{R}_{\ge 0}^{n'\times n'}$ over the edges in the allocation graph;
- The allocations to the basins
$$
    A^\text{basin}_{i} \ge 0, \quad B_S.
$$

:::{.callout-note}
Currently the basin allocations are not taken into account in the implementation.
:::

## The optimization objective

The goal of allocation is to get the flow to the users as close as possible to their demand. To achieve this, the following objectives are supported:

- `quadratic_absolute`:
$$
    \min \sum_{(i,j)\in E_S\;:\; i\in U_S} \left( F_{ij} - d_j^p(t)\right)^2
$$
- `quadratic_relative`:
$$
    \min \sum_{(i,j)\in E_S\;:\; i\in U_S} \left( 1 - \frac{F_{ij}}{d_j^p(t)}\right)^2
$$
- `linear_absolute` (default):
$$
    \min \sum_{(i,j)\in E_S\;:\; i\in U_S} \left| F_{ij} - d_j^p(t)\right| + c \sum_{e \in E_S} F_e
$$
- `linear_relative`:
$$
    \min \sum_{(i,j)\in E_S\;:\; i\in U_S} \left|1 - \frac{F_{ij}}{d_j^p(t)}\right| + c \sum_{e \in E_S} F_e
$$

:::{.callout-note}
When performing main network allocation, the connections to subnetworks are also interpreted as users with demands determined by subnetwork demand collection.
:::


To avoid division by $0$ errors, if a `*_relative` objective is used and a demand is $0$, the coefficient of the flow $F_{ij}$ is set to $0$.

For `*_absolute` objectives the optimizer cares about the actual amount of water allocated to a user, for `*_relative` objectives it cares about the fraction of the demand allocated to the user. For `quadratic_*` objectives the optimizer cares about avoiding large shortages, for `linear_*` objectives it treats all deviations equally.

The second sum in the `linear_*` objectives adds a small cost to using flows. This incentivizes the solver to use as little flow as possible. The cost $c > 0$ is small enough such that it is always better to bring water to users than to not use flow at all. This can be achieved for `linear_*` objectives but not for `quadratic_*` objectives, and therefore this cost term is only added to the former. Therefore the `linear_*` objectives make the solver more conservative with flow than the `quadratic_*` objectives.

:::{.callout-note}
These options for objectives for allocation to users have not been tested thoroughly, and might change in the future.
:::

The absolute value applied here is not supported in a linear programming context directly; this requires introduction of new variables and constraints. For more details see [here](https://optimization.cbe.cornell.edu/index.php?title=Optimization_with_absolute_values).

:::{.callout-note}
In the future new optimization objectives will be introduced, for demands of basins and priorities over sources. These will be used in combination with the above, in the form of goal programming.
:::

## The optimization constraints
- Flow conservation: For the basins in the allocation graph we have that
$$
    \sum_{j=1}^{n'} F_{kj} \le \sum_{i=1}^{n'} F_{ik}, \quad \forall k \in B_S.
$$  {#eq-flowconservationconstraint}
Note that we do not require equality here; in the allocation we do not mind that excess flow is 'forgotten' if it cannot contribute to the allocation to the users.
- Capacity: the flows over the edges are positive and bounded by the edge capacity:
$$
    F_{ij} \le \left(C_S\right)_{ij}, \quad \forall(i,j) \in E_S.
$$ {#eq-capacityconstraint}
By the definition of $C_S$ this also includes the source flows.

:::{.callout-note}
When performing subnetwork demand collection, these capacities are set to $\infty$ for edges which connect the main network to a subnetwork.
:::


- User outflow: The outflow of the user is dictated by the inflow and the return factor:
$$
    F_{ik} = r_k \cdot F_{kj} \quad
    \quad \forall k \in U_S, \quad
    V^{\text{in}}_S(k) = \{i\},\;
     V^{\text{out}}_S(k) = \{j\}.
$$ {#eq-returnflowconstraint}
Here we use that each user node in the allocation graph has a unique in-edge and out-edge.
- User demand: user demand constraints are discussed in [the next section](allocation.qmd#sec-solving-allocation).
- Fractional flow: Let $L_S \subset V_S$ be the set of nodes in the max flow graph with fractional flow outneighbors, and $f_j$ the flow fraction associated with fractional flow node $j \in V_S$. Then
$$
    F_{ij} \le f_j \sum_{k\in V^\text{in}_S(i)} F_{ki} \qquad
    \forall i \in L_S, \;
    j \in V_S^\text{out}(i).
$$ {#eq-fractionalflowconstraint}

- Flow sign: Furthermore there are the non-negativity constraints for the flows and allocations, see [The optimization variables](allocation.qmd#the-optimization-variables).

## Final notes on the allocation problem

### Users using their own return flow

If not explicitly avoided, users can use their own return flow in this allocation problem formulation.
Therefore, return flow of users is only taken into account by allocation if that return flow is downstream of the user where it comes from. That is, if there is no path in the directed allocation graph from the user outflow node back to the user.

# Solving the allocation problem {#sec-solving-allocation}

The allocation problem for an allocation graph at time $t$ is solved per priority, as follows:

1. Define a capacity matrix with capacities as described above, that will be updated for each priority:
$$
    C_S^p \leftarrow C_S;
$$
2. Set the capacities of the edges that end in an user to their priority 1 demands:
$$
    (C_S^p)_{i,j} \leftarrow d_j^1(t) \quad\text{ for all } (i,j) \in U_S;
$$
3. Maximize the objective function given the constraints;
4. Subtract the used flows from the edge capacities:
$$
    C_S^p \leftarrow C_S^p - F;
$$
5. Repeat steps 2-4 for the remaining priorities up to $p_{\max}$.

:::{.callout-note}
In the future there will be 2 more optimization solves:
- One before optimizing for users, taking the demand/supply from basins into account;
- One after optimizing for users, taking preferences over sources into account.
:::

## Example

The following is an example of an optimization problem for the example shown [here](../python/examples.ipynb#model-with-allocation):


```{julia}
# | code-fold: true
using Ribasim
using SQLite

toml_path = normpath(@__DIR__, "../../generated_testmodels/allocation_example/ribasim.toml")
p = Ribasim.Model(toml_path).integrator.p

allocation_model = p.allocation.allocation_models[1]
t = 0.0
priority_idx = 1

Ribasim.set_flow!(p.graph, Ribasim.NodeID(1), Ribasim.NodeID(2), 1.0)

Ribasim.adjust_source_capacities!(allocation_model, p, priority_idx)
Ribasim.adjust_edge_capacities!(allocation_model, p, priority_idx)
Ribasim.set_objective_priority!(allocation_model, p, t, priority_idx)

println(p.allocation.allocation_models[1].problem)
```
