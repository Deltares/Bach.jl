{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# Call stacks\n"
      ],
      "id": "15ad546e"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "# | code-fold: true\n",
        "# adapted from https://gist.github.com/mkborregaard/81825c3d370bb4d8dbfe59c3b2ae4b33\n",
        "# by mkborregaard\n",
        "\n",
        "using JuliaInterpreter, OrderedCollections\n",
        "using Graphs, MetaGraphsNext\n",
        "\n",
        "const callchains = OrderedSet{Vector{Method}}()\n",
        "const modules = Set{Module}()\n",
        "\n",
        "function callchain(frame::JuliaInterpreter.Frame)\n",
        "    chain = Method[]\n",
        "    sc = JuliaInterpreter.scopeof(frame)\n",
        "    while sc isa Method\n",
        "        push!(chain, sc)\n",
        "        frame = frame.caller\n",
        "        frame === nothing && break\n",
        "        sc = JuliaInterpreter.scopeof(frame)\n",
        "    end\n",
        "    return chain\n",
        "end\n",
        "\n",
        "function log_far!(@nospecialize(recurse), frame, istoplevel::Bool=false)\n",
        "    chain = callchain(frame)\n",
        "    chain[1].module âˆˆ modules && push!(callchains, chain)\n",
        "    return JuliaInterpreter.finish_and_return!(recurse, frame, istoplevel)\n",
        "end\n",
        "\n",
        "function encode_vertices(callchains)\n",
        "    i = 0\n",
        "    vertices = Dict{Array{Method},Int}()\n",
        "    for chain in callchains\n",
        "        for ind in length(chain):-1:1\n",
        "            vert = chain[ind:end]\n",
        "            haskey(vertices, vert) || (vertices[vert] = (i += 1))\n",
        "        end\n",
        "    end\n",
        "    vertices\n",
        "end\n",
        "\n",
        "function getnames(vertices)\n",
        "    names = Vector{String}(undef, length(vertices))\n",
        "    for (k, v) in vertices\n",
        "        names[v] = \"$(k[1].module).$(k[1].name)\"\n",
        "    end\n",
        "    names\n",
        "end\n",
        "\n",
        "function construct_graph(callchains)\n",
        "    vertices = encode_vertices(callchains)\n",
        "    names = getnames(vertices)\n",
        "\n",
        "    graph = MetaGraph(\n",
        "        DiGraph(); \n",
        "        label_type = Int,\n",
        "        vertex_data_type = String\n",
        "    )\n",
        "\n",
        "    for (i, name) in enumerate(names)\n",
        "        graph[i] = name\n",
        "    end\n",
        "\n",
        "    for chain in callchains\n",
        "        for ind in length(chain)-1:-1:1\n",
        "            src = vertices[chain[ind+1:end]]\n",
        "            dst = vertices[chain[ind:end]]\n",
        "            graph[src, dst] = nothing\n",
        "        end\n",
        "    end\n",
        "\n",
        "    graph\n",
        "end\n",
        "\n",
        "function tracecall(mods::Tuple, call, arg)\n",
        "    empty!(callchains)\n",
        "    empty!(modules)\n",
        "    for m in mods\n",
        "        push!(modules, m)\n",
        "    end\n",
        "    frame = JuliaInterpreter.enter_call(call, arg)\n",
        "    log_far!(log_far!, frame, false)\n",
        "    construct_graph(callchains)\n",
        "end\n",
        "\n",
        "#############################################\n",
        "\n",
        "using Ribasim"
      ],
      "id": "3b0556e6",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Model initialization\n"
      ],
      "id": "4dedb203"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "toml_path = normpath(@__DIR__, \"../../generated_testmodels/trivial/ribasim.toml\")\n",
        "graph = tracecall((Ribasim,), toml_path)"
      ],
      "id": "a216be8f",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "using GLMakie\n",
        "\n",
        "f = Figure()\n",
        "\n",
        "f"
      ],
      "id": "f3ddc75c",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "julia-1.11",
      "language": "julia",
      "display_name": "Julia 1.11.1",
      "path": "C:\\Users\\konin_bt\\AppData\\Roaming\\jupyter\\kernels\\julia-1.11"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}
