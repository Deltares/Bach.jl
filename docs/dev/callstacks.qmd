# Call stacks

```{julia}
# | code-fold: true

using CairoMakie
using Colors
using Graphs, MetaGraphsNext
using JuliaInterpreter, OrderedCollections

include("scripts/trace_call.jl")
include("scripts/plot_trace.jl")

using Ribasim
using Random

Random.seed!(1);
```

The plots below show the call stack within the Julia core for several important entrypoints. The function names are colored by the script in which they are defined, and the lines between the function names have random colors to be able to differentiate between them. Solid lines refer to calls to functions defined in the same script, dashed ones to functions defined in a different script.

Note that these graphs are obtained by dynamic analysis, i.e. by running parts of the code with specific inputs. This means that there can be unshown paths through the code that are not reached for these particular inputs.

## Parameter initialization

```{julia}
# | code-fold: true
using SQLite
toml_path = normpath(@__DIR__, "../../generated_testmodels/basic_transient/ribasim.toml")
config = Ribasim.Config(toml_path)
db_path = Ribasim.database_path(config)
db = SQLite.DB(db_path)

graph, verts = tracecall((Ribasim,), Ribasim.Parameters, (db, config))
close(db)

plot_graph(
    graph;
    size = (2000, 1200),
    squash_methods = [
        :n_neighbor_bounds_flow,
        :n_neighbor_bounds_control,
        :sort_by_function,
        :neighbortypes
    ],
    xlims = (-0.4, 5.6)
)
```

## `water_balance!` (The ODE system right hand side function)

```{julia}
# | code-fold: true
using OrdinaryDiffEqCore: get_du
model = Ribasim.Model(toml_path)
du = get_du(model.integrator)
(; u, p, t) = model.integrator
graph, verts = tracecall((Ribasim,), Ribasim.water_balance!, (du, u, p, t))
plot_graph(graph, size = (1700, 1000), xlims = (-0.4, 4.5))
```

## Allocation initialization
```{julia}
# | code-fold: true
toml_path = normpath(@__DIR__, "../../generated_testmodels/main_network_with_subnetworks/ribasim.toml")
config = Ribasim.Config(toml_path; allocation_use_allocation=false)
db_path = Ribasim.database_path(config)
db = SQLite.DB(db_path)
p = Ribasim.Parameters(db, config)
graph, verts = tracecall((Ribasim,), Ribasim.initialize_allocation!, (p, config))
plot_graph(graph, size = (1800, 1000), xlims = (-0.5, 5.5))
```

## Allocation run
```{julia}
# | code-fold: true
model = Ribasim.Model(toml_path)
graph, verts = tracecall((Ribasim,), Ribasim.update_allocation!, (model.integrator,))
plot_graph(graph, size = (2000, 1000), xlims = (-0.4, 5.5))
```

## Discrete control

```{julia}
# | code-fold: true
toml_path = normpath(@__DIR__, "../../generated_testmodels/pump_discrete_control/ribasim.toml")
model = Ribasim.Model(toml_path)
(; u, t) = model.integrator
model.integrator.p.basin.storage0 .= [0.1, 100.0]
graph, verts = tracecall((Ribasim,), Ribasim.apply_discrete_control!, (u, t, model.integrator))
plot_graph(graph; size = (1300, 500), prune_from = [:water_balance!], xlims = (-0.5, 3.5))
```

## Writing output
```{julia}
# | code-fold: true
toml_path = normpath(@__DIR__, "../../generated_testmodels/basic_transient/ribasim.toml")
model = Ribasim.Model(toml_path)
graph, verts = tracecall((Ribasim,), Ribasim.write_results, (model,))
plot_graph(graph, size = (1600, 1000), xlims = (-0.5, 4.5))
```
