---
title: "Julia core development"
---

# Set up the developer environment

## Install Julia via Juliaup

Install Julia via Juliaup as described in its [README](https://github.com/JuliaLang/juliaup#installation).

## Install Julia libraries

Start the Julia [REPL](https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop) by executing `julia` in your terminal.
Within the REPL type `]` to enter the Pkg REPL.
For more information on how to use `Pkg`, see the [Getting Started](https://pkgdocs.julialang.org/v1/getting-started/) page in its documentation.
There you can add `Revise` to your global environment.

```julia
pkg> add Revise
```

## Setup Revise.jl

Revise.jl is a library that allows you to modify code and use the changes without restarting Julia. 
You can let it start automatically by following these [instructions](https://timholy.github.io/Revise.jl/stable/config/#Using-Revise-by-default-1).

## Install Quarto

Quarto is the publishing system that builds our documentation.
The installation instructions can be found on their [web page](https://quarto.org/docs/get-started/).

## Clone Ribasim

In order to have the Ribasim repository locally available, run the following command at a directory of your choice:

```bash
git clone https://github.com/Deltares/Ribasim.git
```


## Install Visual Studio Code (optional)

There is a section on editors and IDEs for Julia on <https://julialang.org/>, scroll down to see it. 
We use and recommend Microsoft's free editor [Visual Studio Code](https://code.visualstudio.com/). 
When combined with the [Julia extension](https://www.julia-vscode.org/) it provides a powerful and interactive development experience.



# Developing on Ribasim

## Running tests

You will want to run the testsuite on a regular basis to check if your changes had unexpected side effects.
It is also a good way to find out if your development environment is set up correctly.
While not technically required, it is advised to import Ribasim first to catch installation issues early on.

```julia
julia> using Ribasim
```

Then open the Pkg REPL by typing `]` and execute:

```julia
pkg> test
```

If you are in a different environment that depends on Ribasim, you can test Ribasim with the following command:

```julia
pkg> test Ribasim
```

:::{.callout-tip}
The Julia VS Code extension allows you to [open a REPL](https://www.julia-vscode.org/docs/stable/userguide/runningcode/#The-Julia-REPL) with the Ribasim environment already activated: `"julia.environmentPath": "Ribasim/core"`.
That way you don't have to type `activate core` every time you open the REPL.
:::

## Render documentation

Example models are created and simulated as part of the rendering of the documentation.
Therefore you need to have both the `ribasim` Python package and the Julia `Ribasim` package
installed. Furthermore you need these 3 Python packages installed: `jupyter quartodoc xarray`.

The Python API reference is created using quartodoc by running this command from the `docs/`
folder:

```bash
python -m quartodoc build
```

You typically only have to run this once, or if you want to check out how it looks after
changing Python docstrings.

In order to preview documentation you can run the following command from the `docs/` folder.
Afterwards, a browser tab will open with the rendered documentation, updating it as you
make changes.

```bash
quarto preview
```

The documentation also includes [Jupyter notebooks](https://jupyter.org/).
Note that they are stored in the repository without any output, and this should stay
this way to keep the repository small. The documentation rendering process adds the output
by running the notebooks.

:::{.callout-tip}
The Jupyter VS Code [extension](https://marketplace.visualstudio.com/items?itemName=ms-toolsai.jupyter) allows you to run Jupyter notebooks directly in VS Code.
:::

## Run Ribasim simulations

Assuming your working directory is the root of the repository,
you can activate this project by entering the Pkg mode of the REPL with `]` and execute:

```julia
pkg> activate core
pkg> instantiate
```

Press backspace to go back to the Julia REPL.
There you can run a model with:
```julia
julia> Ribasim.run("path/to/model.toml")
```

:::{.callout-tip}
The Julia VS Code extension allows you to [execute code cells in REPL](https://www.julia-vscode.org/docs/stable/userguide/runningcode/#Running-code-in-the-Julia-REPL).
This is a very convenient way of executing only parts of your source file.
:::
