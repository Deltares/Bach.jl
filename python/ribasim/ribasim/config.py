# generated by datamodel-codegen:
#   filename:  Config.schema.json

from __future__ import annotations

from typing import List, Optional, Union

from pydantic import BaseModel

from ribasim.input_base import NodeModel, TableModel
from ribasim.schemas import (
    BasinProfileSchema,
    BasinStateSchema,
    BasinStaticSchema,
    BasinTimeSchema,
    DiscreteControlConditionSchema,
    DiscreteControlLogicSchema,
    FlowBoundaryStaticSchema,
    FlowBoundaryTimeSchema,
    FractionalFlowStaticSchema,
    LevelBoundaryStaticSchema,
    LevelBoundaryTimeSchema,
    LinearResistanceStaticSchema,
    ManningResistanceStaticSchema,
    OutletStaticSchema,
    PidControlStaticSchema,
    PidControlTimeSchema,
    PumpStaticSchema,
    TabulatedRatingCurveStaticSchema,
    TabulatedRatingCurveTimeSchema,
    TerminalStaticSchema,
    UserStaticSchema,
    UserTimeSchema,
)


class Allocation(BaseModel):
    timestep: Optional[float] = None
    use_allocation: bool = False


class Results(BaseModel):
    basin: str = "results/basin.arrow"
    flow: str = "results/flow.arrow"
    control: str = "results/control.arrow"
    outstate: Optional[str] = None
    compression: str = "zstd"
    compression_level: int = 6


class Solver(BaseModel):
    algorithm: str = "QNDF"
    saveat: float | List[float] = []
    adaptive: bool = True
    dt: Optional[float] = None
    dtmin: Optional[float] = None
    dtmax: Optional[float] = None
    force_dtmin: bool = False
    abstol: float = 1e-06
    reltol: float = 0.001
    maxiters: int = 1000000000
    sparse: bool = True
    autodiff: bool = True


class Logging(BaseModel):
    verbosity: str = "info"
    timing: bool = False


class Terminal(NodeModel):
    static: TableModel[TerminalStaticSchema]


class PidControl(NodeModel):
    static: TableModel[PidControlStaticSchema]
    time: TableModel[PidControlTimeSchema]


class LevelBoundary(NodeModel):
    static: TableModel[LevelBoundaryStaticSchema]
    time: TableModel[LevelBoundaryTimeSchema]


class Pump(NodeModel):
    static: TableModel[PumpStaticSchema]


class TabulatedRatingCurve(NodeModel):
    static: TableModel[TabulatedRatingCurveStaticSchema]
    time: TableModel[TabulatedRatingCurveTimeSchema]


class User(NodeModel):
    static: TableModel[UserStaticSchema]
    time: TableModel[UserTimeSchema]


class FlowBoundary(NodeModel):
    static: TableModel[FlowBoundaryStaticSchema]
    time: TableModel[FlowBoundaryTimeSchema]


class Basin(NodeModel):
    profile: TableModel[BasinProfileSchema]
    state: TableModel[BasinStateSchema]
    static: TableModel[BasinStaticSchema]
    time: TableModel[BasinTimeSchema]


class ManningResistance(NodeModel):
    static: TableModel[ManningResistanceStaticSchema]


class DiscreteControl(NodeModel):
    condition: TableModel[DiscreteControlConditionSchema]
    logic: TableModel[DiscreteControlLogicSchema]


class Outlet(NodeModel):
    static: TableModel[OutletStaticSchema]


class LinearResistance(NodeModel):
    static: TableModel[LinearResistanceStaticSchema]


class FractionalFlow(NodeModel):
    static: TableModel[FractionalFlowStaticSchema]
