# generated by datamodel-codegen:
#   filename:  Config.schema.json
#   timestamp: 2023-09-07T15:04:09+00:00

from __future__ import annotations

from datetime import datetime
from typing import Any, Dict, Optional, Union

from pydantic import BaseModel, Field


class Output(BaseModel):
    compression: Optional[Dict[str, Any]] = Field("zstd", description="compression")
    basin: Optional[str] = Field("output/basin.arrow", description="basin")
    flow: Optional[str] = Field("output/flow.arrow", description="flow")
    control: Optional[str] = Field("output/control.arrow", description="control")
    outstate: Optional[str] = Field(None, description="outstate")
    compression_level: Optional[int] = Field(6, description="compression_level")


class LevelBoundary(BaseModel):
    time: Optional[str] = Field(None, description="time")
    static: Optional[str] = Field(None, description="static")


class Pump(BaseModel):
    static: Optional[str] = Field(None, description="static")


class DiscreteControl(BaseModel):
    logic: Optional[str] = Field(None, description="logic")
    condition: Optional[str] = Field(None, description="condition")


class Solver(BaseModel):
    reltol: Optional[float] = Field(0.001, description="reltol")
    saveat: Optional[Union[float, Any]] = Field([], description="saveat")
    maxiters: Optional[int] = Field(1000000000, description="maxiters")
    autodiff: Optional[bool] = Field(True, description="autodiff")
    adaptive: Optional[bool] = Field(True, description="adaptive")
    algorithm: Optional[str] = Field("QNDF", description="algorithm")
    abstol: Optional[float] = Field(1e-06, description="abstol")
    dt: Optional[float] = Field(0, description="dt")
    sparse: Optional[bool] = Field(True, description="sparse")


class FlowBoundary(BaseModel):
    time: Optional[str] = Field(None, description="time")
    static: Optional[str] = Field(None, description="static")


class PidControl(BaseModel):
    time: Optional[str] = Field(None, description="time")
    static: Optional[str] = Field(None, description="static")


class FractionalFlow(BaseModel):
    static: Optional[str] = Field(None, description="static")


class ManningResistance(BaseModel):
    static: Optional[str] = Field(None, description="static")


class TabulatedRatingCurve(BaseModel):
    time: Optional[str] = Field(None, description="time")
    static: Optional[str] = Field(None, description="static")


class Logging(BaseModel):
    timing: Optional[bool] = Field(False, description="timing")
    verbosity: Optional[str] = Field("info", description="verbosity")


class Outlet(BaseModel):
    static: Optional[str] = Field(None, description="static")


class Terminal(BaseModel):
    static: Optional[str] = Field(None, description="static")


class Basin(BaseModel):
    profile: Optional[str] = Field(None, description="profile")
    static: Optional[str] = Field(None, description="static")
    forcing: Optional[str] = Field(None, description="forcing")
    state: Optional[str] = Field(None, description="state")


class LinearResistance(BaseModel):
    static: Optional[str] = Field(None, description="static")


class Config(BaseModel):
    output: Optional[Output] = None
    starttime: datetime = Field(..., description="starttime")
    update_timestep: Optional[float] = Field(86400, description="update_timestep")
    input_dir: Optional[str] = Field(".", description="input_dir")
    output_dir: Optional[str] = Field(".", description="output_dir")
    level_boundary: Optional[LevelBoundary] = None
    pump: Optional[Pump] = None
    discrete_control: Optional[DiscreteControl] = None
    solver: Optional[Solver] = None
    flow_boundary: Optional[FlowBoundary] = None
    pid_control: Optional[PidControl] = None
    fractional_flow: Optional[FractionalFlow] = None
    relative_dir: Optional[str] = Field(".", description="relative_dir")
    endtime: datetime = Field(..., description="endtime")
    manning_resistance: Optional[ManningResistance] = None
    tabulated_rating_curve: Optional[TabulatedRatingCurve] = None
    logging: Optional[Logging] = None
    outlet: Optional[Outlet] = None
    geopackage: str = Field(..., description="geopackage")
    terminal: Optional[Terminal] = None
    basin: Optional[Basin] = None
    linear_resistance: Optional[LinearResistance] = None
