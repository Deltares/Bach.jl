# generated by datamodel-codegen:
#   filename:  Config.schema.json

from enum import Enum
from pathlib import Path
from typing import List, Optional

from ribasim.input_base import BaseModel, NodeModel, TableModel
from ribasim.schemas import (
    BasinProfileSchema,
    BasinStateSchema,
    BasinStaticSchema,
    BasinTimeSchema,
    DiscreteControlConditionSchema,
    DiscreteControlLogicSchema,
    FlowBoundaryStaticSchema,
    FlowBoundaryTimeSchema,
    FractionalFlowStaticSchema,
    LevelBoundaryStaticSchema,
    LevelBoundaryTimeSchema,
    LinearResistanceStaticSchema,
    ManningResistanceStaticSchema,
    OutletStaticSchema,
    PidControlStaticSchema,
    PidControlTimeSchema,
    PumpStaticSchema,
    TabulatedRatingCurveStaticSchema,
    TabulatedRatingCurveTimeSchema,
    TerminalStaticSchema,
    UserStaticSchema,
    UserTimeSchema,
)


class Allocation(BaseModel):
    timestep: Optional[float] = None
    use_allocation: bool = False


class Compression(str, Enum):
    zstd = "zstd"
    lz4 = "lz4"


class Results(BaseModel):
    basin: Path = "results/basin.arrow"
    flow: Path = "results/flow.arrow"
    control: Path = "results/control.arrow"
    outstate: Optional[str] = None
    compression: Compression = "zstd"
    compression_level: int = 6


class Solver(BaseModel):
    algorithm: str = "QNDF"
    saveat: float | List[float] = []
    adaptive: bool = True
    dt: Optional[float] = None
    dtmin: Optional[float] = None
    dtmax: Optional[float] = None
    force_dtmin: bool = False
    abstol: float = 1e-06
    reltol: float = 0.001
    maxiters: int = 1000000000
    sparse: bool = True
    autodiff: bool = True


class Verbosity(str, Enum):
    debug = "debug"
    info = "info"
    warn = "warn"
    error = "error"


class Logging(BaseModel):
    verbosity: Verbosity = Verbosity.info
    timing: bool = False


class Terminal(NodeModel):
    static: TableModel[TerminalStaticSchema] = TableModel[TerminalStaticSchema]()


class PidControl(NodeModel):
    static: TableModel[PidControlStaticSchema] = TableModel[PidControlStaticSchema]()
    time: TableModel[PidControlTimeSchema] = TableModel[PidControlTimeSchema](
        sort_keys=["time", "node_id"]
    )


class LevelBoundary(NodeModel):
    static: TableModel[LevelBoundaryStaticSchema] = TableModel[
        LevelBoundaryStaticSchema
    ]()
    time: TableModel[LevelBoundaryTimeSchema] = TableModel[LevelBoundaryTimeSchema](
        sort_keys=["time", "node_id"]
    )


class Pump(NodeModel):
    static: TableModel[PumpStaticSchema] = TableModel[PumpStaticSchema]()


class TabulatedRatingCurve(NodeModel):
    static: TableModel[TabulatedRatingCurveStaticSchema] = TableModel[
        TabulatedRatingCurveStaticSchema
    ](sort_keys=["node_id", "level"])
    time: TableModel[TabulatedRatingCurveTimeSchema] = TableModel[
        TabulatedRatingCurveTimeSchema
    ](sort_keys=["time", "node_id", "level"])


class User(NodeModel):
    static: TableModel[UserStaticSchema] = TableModel[UserStaticSchema](
        sort_keys=["node_id", "priority"]
    )
    time: TableModel[UserTimeSchema] = TableModel[UserTimeSchema](
        sort_keys=["node_id", "priority", "time"]
    )


class FlowBoundary(NodeModel):
    static: TableModel[FlowBoundaryStaticSchema] = TableModel[
        FlowBoundaryStaticSchema
    ]()
    time: TableModel[FlowBoundaryTimeSchema] = TableModel[FlowBoundaryTimeSchema](
        sort_keys=["time", "node_id"]
    )


class Basin(NodeModel):
    profile: TableModel[BasinProfileSchema] = TableModel[BasinProfileSchema](
        sort_keys=["node_id", "level"]
    )
    state: TableModel[BasinStateSchema] = TableModel[BasinStateSchema]()
    static: TableModel[BasinStaticSchema] = TableModel[BasinStaticSchema]()
    time: TableModel[BasinTimeSchema] = TableModel[BasinTimeSchema](
        sort_keys=["time", "node_id"]
    )


class ManningResistance(NodeModel):
    static: TableModel[ManningResistanceStaticSchema] = TableModel[
        ManningResistanceStaticSchema
    ]()


class DiscreteControl(NodeModel):
    condition: TableModel[DiscreteControlConditionSchema] = TableModel[
        DiscreteControlConditionSchema
    ]()
    logic: TableModel[DiscreteControlLogicSchema] = TableModel[
        DiscreteControlLogicSchema
    ]()


class Outlet(NodeModel):
    static: TableModel[OutletStaticSchema] = TableModel[OutletStaticSchema]()


class LinearResistance(NodeModel):
    static: TableModel[LinearResistanceStaticSchema] = TableModel[
        LinearResistanceStaticSchema
    ]()


class FractionalFlow(NodeModel):
    static: TableModel[FractionalFlowStaticSchema] = TableModel[
        FractionalFlowStaticSchema
    ]()
