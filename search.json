[
  {
    "objectID": "install.html",
    "href": "install.html",
    "title": "Installation",
    "section": "",
    "text": "1 Components\nThe figure below illustrates the relation between the various components of the Ribasim software package.\n\n\n\n\n\nflowchart TB\nmodeler([Modeler]):::user\n\napi[\"Ribasim Python\\n[python]\"]\nmodeler--&gt;|prepare model|api\n\nribasim[\"Ribasim\\n[julia]\"]\nmodeler--&gt;|start|ribasim\n\nsubgraph qgisBoundary[QGIS]\n    QGIS[QGIS Application]:::system_ext\n    qgisPlugin[\"Ribasim QGIS plugin\\n[python]\"]\n    QGIS--&gt;qgisPlugin\nend\nmodeler--&gt;|prepare model|qgisBoundary\n\nmodel[(\"input model data\\n[toml + geopackage + arrow]\")]\nqgisPlugin--&gt;|read/write|model\napi--&gt;|read/write|model\nribasim--&gt;|simulate|model\n\noutput[(\"simulation results\\n[arrow]\")]\nribasim--&gt;|write|output\n\nclass qgisBoundary boundary\n\n%% class definitions for C4 model\nclassDef user fill:#ABD0BC\nclassDef system_ext fill:#D2D2D2\nclassDef boundary fill:transparent,stroke-dasharray:5 5\n\n\n\n\n\n\nThe kernel of Ribasim is written in the Julia programming language and is built on top of the SciML: Open Source Software for Scientific Machine Learning libraries, notably DifferentialEquations.jl.\nThe Ribasim Python package is available to build, update and analyze Ribasim models programmatically. For runtime data exchange and coupling with other kernels, the Julia kernel is wrapped in a Python API (ribasim_api) which implements the Basic Modelling Interface BMI.\nThe Ribasim QGIS plugin allows users to view or edit a model without programming. For specific tasks, like adding long timeseries, using Python is strongly recommended.\nOne can also use Ribasim Python to build entire models from base data, such that your model setup is fully reproducible.\n\n\n2 Download\n\nRibasim executable - Windows: ribasim_windows.zip\nRibasim executable - Linux: ribasim_linux.zip\nQGIS plugin: ribasim_qgis.zip.\nGenerated testmodels: generated_testmodels.zip\n\nThe Ribasim Python package is registered in PyPI and conda-forge and can therefore be installed with pip, conda or pixi:\npip install ribasim\n\n\n3 Ribasim core\nRibasim is typically used as a command-line interface (CLI). It is distributed as a .zip archive, that must be downloaded and unpacked. It can be placed anywhere, however it is important that the contents of the zip file are kept together in a directory. The Ribasim CLI executable is in the bin directory.\nTo check whether the installation was performed successfully, run ribasim with no arguments in the command line. This will give the following message:\nUsage: ribasim 'path/to/model/ribasim.toml'\n\n\n4 Ribasim Python\nThe Ribasim Python package (named ribasim) aims to make it easy to build, update and analyze Ribasim models programmatically.\nThe Ribasim QGIS plugin allows users to construct a model from scratch without programming. For specific tasks, like adding observed rainfall timeseries, it can be faster to use Python instead.\nOne can also use Ribasim Python to build entire models from base data, such that your model setup is fully reproducible.\nThe package is registered in PyPI and can therefore be installed with pip:\npip install ribasim\nFor documentation please see the examples and API reference.",
    "crumbs": [
      "Overview",
      "Installation"
    ]
  },
  {
    "objectID": "reference/node/linear-resistance.html",
    "href": "reference/node/linear-resistance.html",
    "title": "LinearResistance",
    "section": "",
    "text": "Bidirectional flow proportional to the level difference between the connected basins.",
    "crumbs": [
      "Reference",
      "Nodes",
      "LinearResistance"
    ]
  },
  {
    "objectID": "reference/node/linear-resistance.html#static",
    "href": "reference/node/linear-resistance.html#static",
    "title": "LinearResistance",
    "section": "1.1 Static",
    "text": "1.1 Static\n\n\n\ncolumn\ntype\nunit\nrestriction\n\n\n\n\nnode_id\nInt32\n-\nsorted\n\n\ncontrol_state\nString\n-\n(optional) sorted per node_id\n\n\nactive\nBool\n-\n(optional, default true)\n\n\nresistance\nFloat64\n\\(sm^{-2}\\)\n-\n\n\nmax_flow_rate\nFloat64\n\\(m^3 s^{-1}\\)\nnon-negative",
    "crumbs": [
      "Reference",
      "Nodes",
      "LinearResistance"
    ]
  },
  {
    "objectID": "reference/node/pump.html",
    "href": "reference/node/pump.html",
    "title": "Pump",
    "section": "",
    "text": "Pump water from a source node to a destination node. The set flow rate will be pumped unless the intake storage is less than \\(10~m^3\\), in which case the flow rate will be linearly reduced to \\(0~m^3/s\\). The intake must be either a Basin or LevelBoundary. When PID controlled, the pump must point away from the controlled basin in terms of edges.",
    "crumbs": [
      "Reference",
      "Nodes",
      "Pump"
    ]
  },
  {
    "objectID": "reference/node/pump.html#static",
    "href": "reference/node/pump.html#static",
    "title": "Pump",
    "section": "1.1 Static",
    "text": "1.1 Static\n\n\n\n\n\n\n\n\n\ncolumn\ntype\nunit\nrestriction\n\n\n\n\nnode_id\nInt32\n-\nsorted\n\n\ncontrol_state\nString\n-\n(optional) sorted per node_id\n\n\nactive\nBool\n-\n(optional, default true)\n\n\nflow_rate\nFloat64\n\\(m^3 s^{-1}\\)\nnon-negative\n\n\nmin_flow_rate\nFloat64\n\\(m^3 s^{-1}\\)\n(optional, default 0.0)\n\n\nmax_flow_rate\nFloat64\n\\(m^3 s^{-1}\\)\n(optional)",
    "crumbs": [
      "Reference",
      "Nodes",
      "Pump"
    ]
  },
  {
    "objectID": "reference/node/tabulated-rating-curve.html",
    "href": "reference/node/tabulated-rating-curve.html",
    "title": "TabulatedRatingCurve",
    "section": "",
    "text": "A TabulatedRatingCurve determines outflow from a Basin by looking up the flow rate that corresponds to the current upstream level from a rating curve. The TabulatedRatingCurve takes a rating curve as input. Use it for instance to model flow over a weir.",
    "crumbs": [
      "Reference",
      "Nodes",
      "TabulatedRatingCurve"
    ]
  },
  {
    "objectID": "reference/node/tabulated-rating-curve.html#static",
    "href": "reference/node/tabulated-rating-curve.html#static",
    "title": "TabulatedRatingCurve",
    "section": "1.1 Static",
    "text": "1.1 Static\n\n\n\n\n\n\n\n\n\ncolumn\ntype\nunit\nrestriction\n\n\n\n\nnode_id\nInt32\n-\nsorted\n\n\ncontrol_state\nString\n-\n(optional) sorted per node_id\n\n\nactive\nBool\n-\n(optional, default true)\n\n\nlevel\nFloat64\n\\(m\\)\nsorted per control_state, unique\n\n\nflow_rate\nFloat64\n\\(m^3 s^{-1}\\)\nstart at 0, increasing\n\n\n\nThus a single rating curve can be given by the following table:\n\n\n\nnode_id\nflow_rate\nlevel\n\n\n\n\n2\n0.0\n-0.10\n\n\n2\n0.0001\n0.09\n\n\n2\n0.01\n0.29\n\n\n2\n0.9\n20.09\n\n\n\nBelow the lowest given level of -0.10, the flow rate is kept at 0. Between given levels the flow rate is interpolated linearly. Above the maximum given level of 20.09, the flow rate keeps increases linearly according to the slope of the last segment.",
    "crumbs": [
      "Reference",
      "Nodes",
      "TabulatedRatingCurve"
    ]
  },
  {
    "objectID": "reference/node/tabulated-rating-curve.html#time",
    "href": "reference/node/tabulated-rating-curve.html#time",
    "title": "TabulatedRatingCurve",
    "section": "1.2 Time",
    "text": "1.2 Time\nThis table is the transient form of the TabulatedRatingCurve table. The only difference is that a time column is added. The table must by sorted by time, and per time it must be sorted by node_id. With this the rating curves can be updated over time. Note that a node_id can be either in this table or in the static one, but not both.\n\n\n\ncolumn\ntype\nunit\nrestriction\n\n\n\n\nnode_id\nInt32\n-\nsorted\n\n\ntime\nDateTime\n-\nsorted per node_id\n\n\nlevel\nFloat64\n\\(m\\)\nsorted per node_id per time\n\n\nflow_rate\nFloat64\n\\(m^3 s^{-1}\\)\nnon-negative",
    "crumbs": [
      "Reference",
      "Nodes",
      "TabulatedRatingCurve"
    ]
  },
  {
    "objectID": "reference/node/flow-demand.html",
    "href": "reference/node/flow-demand.html",
    "title": "FlowDemand",
    "section": "",
    "text": "A FlowDemand node associates a non-consuming flow demand to a connector node (e.g.Â Pump, TabulatedRatingCurve) for one single priority. FlowDemand nodes can set a flow demand only for a single connector node.",
    "crumbs": [
      "Reference",
      "Nodes",
      "FlowDemand"
    ]
  },
  {
    "objectID": "reference/node/flow-demand.html#static",
    "href": "reference/node/flow-demand.html#static",
    "title": "FlowDemand",
    "section": "1.1 Static",
    "text": "1.1 Static\n\n\n\ncolumn\ntype\nunit\nrestriction\n\n\n\n\nnode_id\nInt32\n-\nsorted\n\n\npriority\nInt32\n-\npositive\n\n\ndemand\nFloat64\n\\(m^3 s^{-1}\\)\nnon-negative",
    "crumbs": [
      "Reference",
      "Nodes",
      "FlowDemand"
    ]
  },
  {
    "objectID": "reference/node/flow-demand.html#time",
    "href": "reference/node/flow-demand.html#time",
    "title": "FlowDemand",
    "section": "1.2 Time",
    "text": "1.2 Time\nThis table is the transient form of the FlowDemand table, in which a time-dependent demand can be supplied. Similar to the static version, only a single priority per FlowDemand node can be provided.\n\n\n\ncolumn\ntype\nunit\nrestriction\n\n\n\n\nnode_id\nInt32\n-\nsorted\n\n\ntime\nDateTime\n-\nsorted per node_id\n\n\npriority\nInt32\n-\npositive\n\n\ndemand\nFloat64\n\\(m^3 s^{-1}\\)\nnon-negative",
    "crumbs": [
      "Reference",
      "Nodes",
      "FlowDemand"
    ]
  },
  {
    "objectID": "reference/node/terminal.html",
    "href": "reference/node/terminal.html",
    "title": "Terminal",
    "section": "",
    "text": "A Terminal is a water sink without state or properties. Any water that flows into a Terminal node is removed from the model. No water can come into the model from a Terminal node. For example, Terminal nodes can be used as a downstream boundary.\n\n1 Tables\nNo tables are required for Terminal nodes.\n\n\n2 Equations\nThe incoming node determines the flow into the Terminal node.",
    "crumbs": [
      "Reference",
      "Nodes",
      "Terminal"
    ]
  },
  {
    "objectID": "reference/node/outlet.html",
    "href": "reference/node/outlet.html",
    "title": "Outlet",
    "section": "",
    "text": "The Outlet lets water flow downstream with a prescribed flow rate. It is similar to the Pump, with two additional physical constraints:\nWhen PID controlled, the outlet must point towards the controlled basin in terms of edges.",
    "crumbs": [
      "Reference",
      "Nodes",
      "Outlet"
    ]
  },
  {
    "objectID": "reference/node/outlet.html#static",
    "href": "reference/node/outlet.html#static",
    "title": "Outlet",
    "section": "1.1 Static",
    "text": "1.1 Static\n\n\n\n\n\n\n\n\n\ncolumn\ntype\nunit\nrestriction\n\n\n\n\nnode_id\nInt32\n-\nsorted\n\n\ncontrol_state\nString\n-\n(optional) sorted per node_id\n\n\nactive\nBool\n-\n(optional, default true)\n\n\nflow_rate\nFloat64\n\\(m^3 s^{-1}\\)\nnon-negative\n\n\nmin_flow_rate\nFloat64\n\\(m^3 s^{-1}\\)\n(optional, default 0.0)\n\n\nmax_flow_rate\nFloat64\n\\(m^3 s^{-1}\\)\n(optional)\n\n\nmin_crest_level\nFloat64\n\\(m\\)\n(optional)",
    "crumbs": [
      "Reference",
      "Nodes",
      "Outlet"
    ]
  },
  {
    "objectID": "reference/node/basin.html",
    "href": "reference/node/basin.html",
    "title": "Basin",
    "section": "",
    "text": "The Basin is the central node in each schematization, since it is the only one that stores water. It can exchange water with all other nodes. The connected nodes determine how water is exchanged; the Basin has no flow behavior of its own.",
    "crumbs": [
      "Reference",
      "Nodes",
      "Basin"
    ]
  },
  {
    "objectID": "reference/node/basin.html#static",
    "href": "reference/node/basin.html#static",
    "title": "Basin",
    "section": "1.1 Static",
    "text": "1.1 Static\nThe Basin / static table can be used to set the static value of variables. The time table has a similar schema, with the time column added. A static value for a variable is only used if there is no dynamic forcing data for that variable. Specifically, if there is either no time table, it is empty, or all timestamps of that variable are missing.\n\n\n\ncolumn\ntype\nunit\nrestriction\n\n\n\n\nnode_id\nInt32\n-\nsorted\n\n\nprecipitation\nFloat64\n\\(m s^{-1}\\)\nnon-negative\n\n\npotential_evaporation\nFloat64\n\\(m s^{-1}\\)\nnon-negative\n\n\ndrainage\nFloat64\n\\(m^3 s^{-1}\\)\nnon-negative\n\n\ninfiltration\nFloat64\n\\(m^3 s^{-1}\\)\nnon-negative\n\n\nurban_runoff\nFloat64\n\\(m^3 s^{-1}\\)\nnon-negative\n\n\n\nNote that if variables are not set in the static table, default values are used when possible. These are generally zero, e.g.Â no precipitation, no inflow. If it is not possible to have a reasonable and safe default, a value must be provided in the static table.",
    "crumbs": [
      "Reference",
      "Nodes",
      "Basin"
    ]
  },
  {
    "objectID": "reference/node/basin.html#time",
    "href": "reference/node/basin.html#time",
    "title": "Basin",
    "section": "1.2 Time",
    "text": "1.2 Time\nThis table is the transient form of the Basin table. The only difference is that a time column is added. The table must by sorted by time, and per time it must be sorted by node_id. At the given timestamps the values are set in the simulation, such that the timeseries can be seen as forward filled.",
    "crumbs": [
      "Reference",
      "Nodes",
      "Basin"
    ]
  },
  {
    "objectID": "reference/node/basin.html#state",
    "href": "reference/node/basin.html#state",
    "title": "Basin",
    "section": "1.3 State",
    "text": "1.3 State\nThe state table aims to capture the full state of the Basin, such that it can be used as an initial condition, potentially the outcome of an earlier simulation. Currently only the Basin node types have state.\n\n\n\ncolumn\ntype\nunit\nrestriction\n\n\n\n\nnode_id\nInt32\n-\nsorted\n\n\nlevel\nFloat64\n\\(m\\)\n\\(\\ge\\) basin bottom\n\n\n\nEach Basin ID needs to be in the table.",
    "crumbs": [
      "Reference",
      "Nodes",
      "Basin"
    ]
  },
  {
    "objectID": "reference/node/basin.html#profile",
    "href": "reference/node/basin.html#profile",
    "title": "Basin",
    "section": "1.4 Profile",
    "text": "1.4 Profile\nThe profile table defines the physical dimensions of the storage reservoir of each basin.\n\n\n\n\n\n\n\n\n\ncolumn\ntype\nunit\nrestriction\n\n\n\n\nnode_id\nInt32\n-\nsorted\n\n\narea\nFloat64\n\\(m^2\\)\nnon-negative, per node_id: start positive and not decreasing\n\n\nlevel\nFloat64\n\\(m\\)\nper node_id: increasing\n\n\n\nThe level is the level at the basin outlet. All levels are defined in meters above a datum that is the same for the entire model. An example of the first 5 rows of such a table is given below. The first 4 rows define the profile of ID 2. The number of rows can vary per ID, and must be at least 2. Using a very large number of rows may impact performance.\n\n\n\nnode_id\narea\nlevel\n\n\n\n\n2\n1.0\n6.0\n\n\n2\n1000.0\n7.0\n\n\n2\n1000.0\n9.0\n\n\n3\n1.0\n2.2\n\n\n\nWe use the symbol \\(A\\) for area, \\(h\\) for level and \\(S\\) for storage. The profile provides a function \\(A(h)\\) for each basin. Internally this get converted to two functions, \\(A(S)\\) and \\(h(S)\\), by integrating over the function, setting the storage to zero for the bottom of the profile. The minimum area cannot be zero to avoid numerical issues. The maximum area is used to convert the precipitation flux into an inflow.",
    "crumbs": [
      "Reference",
      "Nodes",
      "Basin"
    ]
  },
  {
    "objectID": "reference/node/basin.html#area",
    "href": "reference/node/basin.html#area",
    "title": "Basin",
    "section": "1.5 Area",
    "text": "1.5 Area\nThe optional area table is not used during computation, but provides a place to associate areas in the form of polygons to Basins. Using this makes it easier to recognize which water or land surfaces are represented by Basins.\n\n\n\ncolumn\ntype\nrestriction\n\n\n\n\nnode_id\nInt32\nsorted\n\n\ngeom\nPolygon or MultiPolygon\n(optional)",
    "crumbs": [
      "Reference",
      "Nodes",
      "Basin"
    ]
  },
  {
    "objectID": "reference/node/basin.html#subgrid",
    "href": "reference/node/basin.html#subgrid",
    "title": "Basin",
    "section": "1.6 Subgrid",
    "text": "1.6 Subgrid\nThe subgrid table defines a piecewise linear interpolation from a basin water level to a subgrid element water level. Many subgrid elements may be associated with a single basin, each with distinct interpolation functions. This functionality can be used to translate a single lumped basin level to a more spatially detailed representation (e.g comparable to the output of a hydrodynamic simulation).\n\n\n\ncolumn\ntype\nunit\nrestriction\n\n\n\n\nsubgrid_id\nInt32\n-\nsorted\n\n\nnode_id\nInt32\n-\nconstant per subgrid_id\n\n\nbasin_level\nFloat64\n\\(m\\)\nsorted per subgrid_id\n\n\nsubgrid_level\nFloat64\n\\(m\\)\nsorted per subgrid_id\n\n\n\nThe table below shows example input for two subgrid elements:\n\n\n\nsubgrid_id\nnode_id\nbasin_level\nsubgrid_level\n\n\n\n\n1\n9\n0.0\n0.0\n\n\n1\n9\n1.0\n1.0\n\n\n1\n9\n2.0\n2.0\n\n\n2\n9\n0.0\n0.5\n\n\n2\n9\n1.0\n1.5\n\n\n2\n9\n2.0\n2.5\n\n\n\nBoth subgrid elements use the water level of the basin with node_id 9 to interpolate to their respective water levels. The first element has a one to one connection with the water level; the second also has a one to one connection, but is offset by half a meter. A basin water level of 0.3 would be translated to a water level of 0.3 for the first subgrid element, and 0.8 for the second. Water levels beyond the last basin_level are linearly extrapolated.\nNote that the interpolation to subgrid water level is not constrained by any water balance within Ribasim. Generally, to create physically meaningful subgrid water levels, the subgrid table must be parametrized properly such that the spatially integrated water volume of the subgrid elements agrees with the total storage volume of the basin.",
    "crumbs": [
      "Reference",
      "Nodes",
      "Basin"
    ]
  },
  {
    "objectID": "reference/node/basin.html#sec-basin-conc",
    "href": "reference/node/basin.html#sec-basin-conc",
    "title": "Basin",
    "section": "1.7 Concentration",
    "text": "1.7 Concentration\nThis table defines the concentration(s) of (a) substance(s) for the inflow boundaries of a Basin node.\n\n\n\n\n\n\n\n\n\ncolumn\ntype\nunit\nrestriction\n\n\n\n\nnode_id\nInt32\n-\nsorted\n\n\ntime\nDateTime\n-\nsorted per node_id\n\n\nsubstance\nString\n\ncan correspond to known Delwaq substances\n\n\ndrainage\nFloat64\n\\(g m^{-3}\\)\n(optional)\n\n\nprecipitation\nFloat64\n\\(g m^{-3}\\)\n(optional)",
    "crumbs": [
      "Reference",
      "Nodes",
      "Basin"
    ]
  },
  {
    "objectID": "reference/node/basin.html#sec-basin-conc-state",
    "href": "reference/node/basin.html#sec-basin-conc-state",
    "title": "Basin",
    "section": "1.8 ConcentrationState",
    "text": "1.8 ConcentrationState\nThis table defines the concentration(s) of (a) substance(s) in the basin at the start of the simulation.\n\n\n\n\n\n\n\n\n\ncolumn\ntype\nunit\nrestriction\n\n\n\n\nnode_id\nInt32\n-\nsorted\n\n\ntime\nDateTime\n-\nsorted per node_id\n\n\nsubstance\nString\n-\ncan correspond to known Delwaq substances\n\n\nconcentration\nFloat64\n\\(g m^{-3}\\)",
    "crumbs": [
      "Reference",
      "Nodes",
      "Basin"
    ]
  },
  {
    "objectID": "reference/node/basin.html#concentrationexternal",
    "href": "reference/node/basin.html#concentrationexternal",
    "title": "Basin",
    "section": "1.9 ConcentrationExternal",
    "text": "1.9 ConcentrationExternal\nThis table is used for (external) concentrations, that can be used for Control lookups.\n\n\n\n\n\n\n\n\n\ncolumn\ntype\nunit\nrestriction\n\n\n\n\nnode_id\nInt32\n-\nsorted\n\n\ntime\nDateTime\n-\nsorted per node_id\n\n\nsubstance\nString\n-\ncan correspond to known Delwaq substances\n\n\nconcentration\nFloat64\n\\(g m^{-3}\\)",
    "crumbs": [
      "Reference",
      "Nodes",
      "Basin"
    ]
  },
  {
    "objectID": "reference/node/basin.html#sec-reduction_factor",
    "href": "reference/node/basin.html#sec-reduction_factor",
    "title": "Basin",
    "section": "2.1 The reduction factor",
    "text": "2.1 The reduction factor\nAt several points in the equations below a reduction factor is used. This is a term that makes certain transitions more smooth, for instance when a pump stops providing water when its source basin dries up. The reduction factor is given by\n\\[\\begin{align}\n    \\phi(x; p) =\n    \\begin{cases}\n    0 &\\text{if}\\quad x &lt; 0 \\\\\n        -2 \\left(\\frac{x}{p}\\right)^3 + 3\\left(\\frac{x}{p}\\right)^2 &\\text{if}\\quad 0 \\le x \\le p \\\\\n        1 &\\text{if}\\quad x &gt; p\n    \\end{cases}\n\\end{align}\\]\nHere \\(p &gt; 0\\) is the threshold value which determines the interval \\([0,p]\\) of the smooth transition between \\(0\\) and \\(1\\), see the plot below.\n\n\nCode\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef f(x, p = 3):\n    x_scaled = x / p\n    phi = (-2 * x_scaled + 3) * x_scaled**2\n    phi = np.where(x &lt; 0, 0, phi)\n    phi = np.where(x &gt; p, 1, phi)\n\n    return phi\n\nfontsize = 15\np = 3\nN = 100\nx_min = -1\nx_max = 4\nx = np.linspace(x_min,x_max,N)\nphi = f(x,p)\n\nfig,ax = plt.subplots(dpi=80)\nax.plot(x,phi)\n\ny_lim = ax.get_ylim()\n\nax.set_xticks([0,p], [0,\"$p$\"], fontsize=fontsize)\nax.set_yticks([0,1], [0,1], fontsize=fontsize)\nax.hlines([0,1],x_min,x_max, color = \"k\", ls = \":\", zorder=-1)\nax.vlines([0,p], *y_lim, color = \"k\", ls = \":\")\nax.set_xlim(x_min,x_max)\nax.set_xlabel(\"$x$\", fontsize=fontsize)\nax.set_ylabel(r\"$\\phi(x;p)$\", fontsize=fontsize)\nax.set_ylim(y_lim)\n\nfig.tight_layout()\nplt.show()",
    "crumbs": [
      "Reference",
      "Nodes",
      "Basin"
    ]
  },
  {
    "objectID": "reference/node/basin.html#precipitation",
    "href": "reference/node/basin.html#precipitation",
    "title": "Basin",
    "section": "2.2 Precipitation",
    "text": "2.2 Precipitation\nThe precipitation term is given by\n\\[\n    Q_P = P \\cdot A.\n\\tag{1}\\]\nHere \\(P = P(t)\\) is the precipitation rate and \\(A\\) is the maximum area given in the Basin / profile table. Precipitation in the Basin area is assumed to be directly added to the Basin storage. The modeler needs to ensure all precipitation enters the model, and there is no overlap in the maximum profile areas, otherwise extra water is created. If a part of the catchment is not in any Basin profile, the modeler has to verify that water source is not forgotten. It can for instance be converted to a flow rate and added to a Basin as a FlowBoundary.",
    "crumbs": [
      "Reference",
      "Nodes",
      "Basin"
    ]
  },
  {
    "objectID": "reference/node/basin.html#evaporation",
    "href": "reference/node/basin.html#evaporation",
    "title": "Basin",
    "section": "2.3 Evaporation",
    "text": "2.3 Evaporation\nThe evaporation term is given by\n\\[\n    Q_E = E_\\text{pot} \\cdot A(u) \\cdot \\phi(d;0.1).\n\\tag{2}\\]\nHere \\(E_\\text{pot} = E_\\text{pot}(t)\\) is the potential evaporation rate and \\(A\\) is the wetted area. \\(\\phi\\) is the reduction factor which depends on the depth \\(d\\). It provides a smooth gradient as \\(u \\rightarrow 0\\).\nA straightforward formulation \\(Q_E = \\mathrm{max}(E_\\text{pot} A(u), 0)\\) is unsuitable, as \\(\\frac{\\mathrm{d}Q_E}{\\mathrm{d}u}(u=0)\\) is not well-defined.\nA non-smooth derivative results in extremely small timesteps and long computation time. In a physical interpretation, evaporation is switched on or off per individual droplet of water. In general, the effect of the reduction term is negligible, or not even necessary. As a surface water dries, its wetted area decreases and so does the evaporative flux. However, for (simplified) cases with constant wetted surface (a rectangular profile), evaporation only stops at \\(u = 0\\).",
    "crumbs": [
      "Reference",
      "Nodes",
      "Basin"
    ]
  },
  {
    "objectID": "reference/node/basin.html#infiltration-and-drainage",
    "href": "reference/node/basin.html#infiltration-and-drainage",
    "title": "Basin",
    "section": "2.4 Infiltration and Drainage",
    "text": "2.4 Infiltration and Drainage\nInfiltration is provided as a lump sum for the Basin. If Ribasim is coupled with MODFLOW 6, the infiltration is computed as the sum of all positive flows of the MODFLOW 6 boundary conditions in the Basin:\n\\[\n    Q_\\text{inf} = \\sum_{i=1}^{n} \\sum_{j=1}^{m} \\max(Q_{\\mathrm{mf6}_{i,j}}, 0.0)\n\\tag{3}\\]\nWhere \\(i\\) is the index of the boundary condition, \\(j\\) the MODFLOW 6 cell index, \\(n\\) the number of boundary conditions, and \\(m\\) the number of MODFLOW 6 cells in the Basin. \\(Q_{\\mathrm{mf6}_{i,j}}\\) is the flow computed by MODFLOW 6 for cell \\(j\\) for boundary condition \\(i\\).\nDrainage is a lump sum for the Basin, and consists of the sum of the absolute value of all negative flows of the MODFLOW 6 boundary conditions in the Basin.\n\\[\n    Q_\\text{drn} = \\sum_{i=1}^{n} \\sum_{j=1}^{m} \\left| \\min(Q_{\\mathrm{mf6}_{i,j}}, 0.0) \\right|\n\\tag{4}\\]\nThe interaction with MODFLOW 6 boundary conditions is explained in greater detail in the the iMOD Coupler docs.",
    "crumbs": [
      "Reference",
      "Nodes",
      "Basin"
    ]
  },
  {
    "objectID": "reference/node/manning-resistance.html",
    "href": "reference/node/manning-resistance.html",
    "title": "ManningResistance",
    "section": "",
    "text": "The ManningResistance node calculates a flow rate between two Basins based on their water levels. The flow rate is calculated by conservation of energy and the Manning-Gauckler formula to estimate friction losses.",
    "crumbs": [
      "Reference",
      "Nodes",
      "ManningResistance"
    ]
  },
  {
    "objectID": "reference/node/manning-resistance.html#static",
    "href": "reference/node/manning-resistance.html#static",
    "title": "ManningResistance",
    "section": "1.1 Static",
    "text": "1.1 Static\n\n\n\ncolumn\ntype\nunit\nrestriction\n\n\n\n\nnode_id\nInt32\n-\nsorted\n\n\ncontrol_state\nString\n-\n(optional) sorted per node_id\n\n\nactive\nBool\n-\n(optional, default true)\n\n\nlength\nFloat64\n\\(m\\)\npositive\n\n\nmanning_n\nFloat64\n\\(s m^{-\\frac{1}{3}}\\)\npositive\n\n\nprofile_width\nFloat64\n\\(m\\)\npositive\n\n\nprofile_slope\nFloat64\n-\n-",
    "crumbs": [
      "Reference",
      "Nodes",
      "ManningResistance"
    ]
  },
  {
    "objectID": "reference/python/nodes.level_boundary.html",
    "href": "reference/python/nodes.level_boundary.html",
    "title": "1 nodes.level_boundary",
    "section": "",
    "text": "1 nodes.level_boundary\nnodes.level_boundary"
  },
  {
    "objectID": "reference/python/nodes.basin.html",
    "href": "reference/python/nodes.basin.html",
    "title": "1 nodes.basin",
    "section": "",
    "text": "1 nodes.basin\nnodes.basin"
  },
  {
    "objectID": "reference/python/nodes.pid_control.html",
    "href": "reference/python/nodes.pid_control.html",
    "title": "1 nodes.pid_control",
    "section": "",
    "text": "1 nodes.pid_control\nnodes.pid_control"
  },
  {
    "objectID": "reference/python/nodes.tabulated_rating_curve.html",
    "href": "reference/python/nodes.tabulated_rating_curve.html",
    "title": "1 nodes.tabulated_rating_curve",
    "section": "",
    "text": "1 nodes.tabulated_rating_curve\nnodes.tabulated_rating_curve"
  },
  {
    "objectID": "reference/python/nodes.level_demand.html",
    "href": "reference/python/nodes.level_demand.html",
    "title": "1 nodes.level_demand",
    "section": "",
    "text": "1 nodes.level_demand\nnodes.level_demand"
  },
  {
    "objectID": "reference/python/nodes.user_demand.html",
    "href": "reference/python/nodes.user_demand.html",
    "title": "1 nodes.user_demand",
    "section": "",
    "text": "1 nodes.user_demand\nnodes.user_demand"
  },
  {
    "objectID": "reference/python/nodes.flow_demand.html",
    "href": "reference/python/nodes.flow_demand.html",
    "title": "1 nodes.flow_demand",
    "section": "",
    "text": "1 nodes.flow_demand\nnodes.flow_demand"
  },
  {
    "objectID": "reference/python/Model.html",
    "href": "reference/python/Model.html",
    "title": "1 Model",
    "section": "",
    "text": "1 Model\nModel()"
  },
  {
    "objectID": "reference/python/nodes.linear_resistance.html",
    "href": "reference/python/nodes.linear_resistance.html",
    "title": "1 nodes.linear_resistance",
    "section": "",
    "text": "1 nodes.linear_resistance\nnodes.linear_resistance"
  },
  {
    "objectID": "reference/index.html",
    "href": "reference/index.html",
    "title": "Reference",
    "section": "",
    "text": "These pages contain the test models, node descriptions and developer documentation.",
    "crumbs": [
      "Reference"
    ]
  },
  {
    "objectID": "reference/usage.html",
    "href": "reference/usage.html",
    "title": "Usage",
    "section": "",
    "text": "Ribasim has a single configuration file, which is written in the TOML format. It contains settings, as well as paths to other input and output files. Ribasim expects the GeoPackage database database.gpkg as well as optional Arrow input files to be available in the input_dir.\n# start- and endtime of the simulation\n# can also be set to a date-time like 1979-05-27T07:32:00\nstarttime = 2019-01-01 # required\nendtime = 2021-01-01   # required\n\n# Coordinate Reference System\n# The accepted strings are documented here:\n# https://proj.org/en/9.4/development/reference/functions.html#c.proj_create\ncrs = \"EPSG:4326\"      # required\n\n# input files\ninput_dir = \".\"         # required\nresults_dir = \"results\" # required\n\nribasim_version = \"2024.9.0\" # required\n\n# Specific tables can also go into Arrow files rather than the database.\n# For large tables this can benefit from better compressed file sizes.\n# This is optional, tables are retrieved from the database if not specified in the TOML.\n[basin]\ntime = \"basin/time.arrow\"\n\n[allocation]\ntimestep = 86400                   # optional (required if use_allocation = true), default 86400\nuse_allocation = false             # optional, default false\n\n[solver]\nalgorithm = \"QNDF\"  # optional, default \"QNDF\"\nsaveat = 86400      # optional, default 86400, 0 saves every timestep, inf saves only at start- and endtime\ndt = 60.0           # optional, remove for adaptive time stepping\ndtmin = 0.0         # optional, default 0.0\ndtmax = 0.0         # optional, default length of simulation\nforce_dtmin = false # optional, default false\nabstol = 1e-6       # optional, default 1e-6\nreltol = 1e-5       # optional, default 1e-5\nmaxiters = 1e9      # optional, default 1e9\nsparse = true       # optional, default true\nautodiff = true     # optional, default true\n\n[logging]\n# defines the logging level of Ribasim\nverbosity = \"info\" # optional, default \"info\", can otherwise be \"debug\", \"warn\" or \"error\"\ntiming = false     # optional, whether to log debug timing statements\n\n[results]\n# These results files are always written\ncompression = true  # optional, default true, using zstd compression\ncompression_level = 6 # optional, default 6\n\n\nThe solver section in the configuration file is entirely optional, since we aim to use defaults that will generally work well. Common reasons to modify the solver settings are to adjust the calculation or result stepsizes: dt, and saveat. If your model does not converge, or your performance is lower than expected, it can help to adjust other solver settings as well.\nThe default solver algorithm = \"QNDF\", which is a multistep method similar to Matlabâs ode15s (Shampine and Reichelt 1997). It is an implicit method that supports the default adaptive timestepping. The full list of available solvers is: QNDF, Rosenbrock23, TRBDF2, Rodas5, KenCarp4, Tsit5, RK4, ImplicitEuler, Euler. Information on the solver algorithms can be found on the ODE solvers page.\nBy default Ribasim uses adaptive timestepping, though not all algorithms support adaptive timestepping. To use fixed timesteps, provide a timestep size in seconds; dt = 3600.0 corresponds to an hourly timestep. With adaptive timestepping, dtmin and dtmax control the minimum and maximum allowed dt. If a smaller dt than dtmin is needed to meet the set error tolerances, the simulation stops, unless force_dtmin is set to true. force_dtmin is off by default to ensure an accurate solution.\nThe default result stepsize, saveat = 86400 will save results after every day that passed. The calculation and result stepsize need not be the same. If you wish to save every calculation step, set saveat = 0. If you wish to not save any intermediate steps, set saveat = inf.\nThe Jacobian matrix provides information about the local sensitivity of the model with respect to changes in the states. For implicit solvers it must be calculated often, which can be expensive to do. There are several methods to do this. By default Ribasim uses a Jacobian derived automatically using ForwardDiff.jl with memory management provided by PreallocationTools.jl. If this is not used by setting autodiff = false, the Jacobian is calculated with a finite difference method, which can be less accurate and more expensive.\nBy default the Jacobian matrix is a sparse matrix (sparse = true). Since each state typically only depends on a small number of other states, this is generally more efficient, especially for larger models. The sparsity structure is calculated from the network and provided as a Jacobian prototype to the solver. For small or highly connected models it could be faster to use a dense Jacobian matrix instead by setting sparse = false.\nThe total maximum number of iterations maxiters = 1e9, can normally stay as-is unless doing extremely long simulations.\nThe absolute and relative tolerance for adaptive timestepping can be set with abstol and reltol. For more information on these and other solver options, see the DifferentialEquations.jl docs.\n\n\n\nCurrently there are the following allocation settings: - use_allocation: A boolean which says whether allocation should be used or not; - timestep: a float value in seconds which dictates the update interval for allocations.\n\n\n\nThe following entries can be set in the configuration in the [results] section.\n\n\n\n\n\n\n\n\nentry\ntype\ndescription\n\n\n\n\ncompression\nBool\nWhether to apply compression or not.\n\n\ncompression_level\nInt\nZstandard compression level. Default is 6, higher compresses more.\n\n\nsubgrid\nBool\nCompute and output more detailed water levels.\n\n\n\n\n\n\nThe following entries can be set in the configuration in the [logging] section.\n\n\n\n\n\n\n\n\nentry\ntype\ndescription\n\n\n\n\nverbosity\nString\nVerbosity level: debug, info, warn, or error.\n\n\ntiming\nBool\nEnable timings.",
    "crumbs": [
      "Reference",
      "Usage"
    ]
  },
  {
    "objectID": "reference/usage.html#sec-solver-settings",
    "href": "reference/usage.html#sec-solver-settings",
    "title": "Usage",
    "section": "",
    "text": "The solver section in the configuration file is entirely optional, since we aim to use defaults that will generally work well. Common reasons to modify the solver settings are to adjust the calculation or result stepsizes: dt, and saveat. If your model does not converge, or your performance is lower than expected, it can help to adjust other solver settings as well.\nThe default solver algorithm = \"QNDF\", which is a multistep method similar to Matlabâs ode15s (Shampine and Reichelt 1997). It is an implicit method that supports the default adaptive timestepping. The full list of available solvers is: QNDF, Rosenbrock23, TRBDF2, Rodas5, KenCarp4, Tsit5, RK4, ImplicitEuler, Euler. Information on the solver algorithms can be found on the ODE solvers page.\nBy default Ribasim uses adaptive timestepping, though not all algorithms support adaptive timestepping. To use fixed timesteps, provide a timestep size in seconds; dt = 3600.0 corresponds to an hourly timestep. With adaptive timestepping, dtmin and dtmax control the minimum and maximum allowed dt. If a smaller dt than dtmin is needed to meet the set error tolerances, the simulation stops, unless force_dtmin is set to true. force_dtmin is off by default to ensure an accurate solution.\nThe default result stepsize, saveat = 86400 will save results after every day that passed. The calculation and result stepsize need not be the same. If you wish to save every calculation step, set saveat = 0. If you wish to not save any intermediate steps, set saveat = inf.\nThe Jacobian matrix provides information about the local sensitivity of the model with respect to changes in the states. For implicit solvers it must be calculated often, which can be expensive to do. There are several methods to do this. By default Ribasim uses a Jacobian derived automatically using ForwardDiff.jl with memory management provided by PreallocationTools.jl. If this is not used by setting autodiff = false, the Jacobian is calculated with a finite difference method, which can be less accurate and more expensive.\nBy default the Jacobian matrix is a sparse matrix (sparse = true). Since each state typically only depends on a small number of other states, this is generally more efficient, especially for larger models. The sparsity structure is calculated from the network and provided as a Jacobian prototype to the solver. For small or highly connected models it could be faster to use a dense Jacobian matrix instead by setting sparse = false.\nThe total maximum number of iterations maxiters = 1e9, can normally stay as-is unless doing extremely long simulations.\nThe absolute and relative tolerance for adaptive timestepping can be set with abstol and reltol. For more information on these and other solver options, see the DifferentialEquations.jl docs.",
    "crumbs": [
      "Reference",
      "Usage"
    ]
  },
  {
    "objectID": "reference/usage.html#allocation-settings",
    "href": "reference/usage.html#allocation-settings",
    "title": "Usage",
    "section": "",
    "text": "Currently there are the following allocation settings: - use_allocation: A boolean which says whether allocation should be used or not; - timestep: a float value in seconds which dictates the update interval for allocations.",
    "crumbs": [
      "Reference",
      "Usage"
    ]
  },
  {
    "objectID": "reference/usage.html#results-settings",
    "href": "reference/usage.html#results-settings",
    "title": "Usage",
    "section": "",
    "text": "The following entries can be set in the configuration in the [results] section.\n\n\n\n\n\n\n\n\nentry\ntype\ndescription\n\n\n\n\ncompression\nBool\nWhether to apply compression or not.\n\n\ncompression_level\nInt\nZstandard compression level. Default is 6, higher compresses more.\n\n\nsubgrid\nBool\nCompute and output more detailed water levels.",
    "crumbs": [
      "Reference",
      "Usage"
    ]
  },
  {
    "objectID": "reference/usage.html#logging-settings",
    "href": "reference/usage.html#logging-settings",
    "title": "Usage",
    "section": "",
    "text": "The following entries can be set in the configuration in the [logging] section.\n\n\n\n\n\n\n\n\nentry\ntype\ndescription\n\n\n\n\nverbosity\nString\nVerbosity level: debug, info, warn, or error.\n\n\ntiming\nBool\nEnable timings.",
    "crumbs": [
      "Reference",
      "Usage"
    ]
  },
  {
    "objectID": "reference/usage.html#table-requirements",
    "href": "reference/usage.html#table-requirements",
    "title": "Usage",
    "section": "2.1 Table requirements",
    "text": "2.1 Table requirements\nBelow we give details per file, in which we describe the schema of the table using a syntax like this:\n\n\n\ncolumn\ntype\nunit\nrestriction\n\n\n\n\nnode_id\nInt32\n-\nsorted\n\n\nstorage\nFloat64\n\\(m^3\\)\nnon-negative\n\n\n\nThis means that two columns are required, one named node_id, that contained elements of type Int32, and a column named storage that contains elements of type Float64. The order of the columns does not matter. In some cases there may be restrictions on the values. This is indicated under restriction.\nTables are also allowed to have rows for timestamps that are not part of the simulation, these will be ignored. That makes it easy to prepare data for a larger period, and test models on a shorted period.\nWhen preparing the model for simulation, input validation is performed in the Julia core. The validation rules are described in the validation section.",
    "crumbs": [
      "Reference",
      "Usage"
    ]
  },
  {
    "objectID": "reference/usage.html#custom-metadata",
    "href": "reference/usage.html#custom-metadata",
    "title": "Usage",
    "section": "2.2 Custom metadata",
    "text": "2.2 Custom metadata\nIt may be advantageous to add metadata to rows. For example, basin areas might have names and objects such as weirs might have specific identification codes. Additional columns can be freely added to tables. The column names should be prefixed with meta_. They will not be used in computations or validated by the Julia core.",
    "crumbs": [
      "Reference",
      "Usage"
    ]
  },
  {
    "objectID": "reference/usage.html#basin---basin.arrow",
    "href": "reference/usage.html#basin---basin.arrow",
    "title": "Usage",
    "section": "5.1 Basin - basin.arrow",
    "text": "5.1 Basin - basin.arrow\nThe Basin table contains:\n\nResults of the storage and level of each Basin, which are instantaneous values;\nResults of the fluxes on each Basin, which are mean values over the saveat intervals. In the time column the start of the period is indicated.\nThe initial condition is written to the file, but the final state is not. It will be placed in a separate output state file in the future.\nThe inflow_rate and outflow_rate are the sum of the flows from other nodes into and out of the Basin respectively. The actual flows determine in which term they are counted, not the edge direction.\nThe storage_rate is flow that adds to the storage in the Basin, increasing the water level. In the equations below this number is split out into two non-negative numbers, storage_increase and storage_decrease.\nThe balance_error is the difference of all Basin inflows (total_inflow) and outflows (total_outflow), that is (inflow_rate + precipitation + drainage - storage_increase) - (outflow_rate + evaporation + infiltration - storage_decrease). It can be used to check if the numerical error when solving the water balance is sufficiently small.\nThe relative_error is the fraction of the balance_error over the mean of the total_inflow and total_outflow.\n\n\n\n\ncolumn\ntype\nunit\n\n\n\n\ntime\nDateTime\n-\n\n\nnode_id\nInt32\n-\n\n\nstorage\nFloat64\n\\(m^3\\)\n\n\nlevel\nFloat64\n\\(m\\)\n\n\ninflow_rate\nFloat64\n\\(m^3 s^{-1}\\)\n\n\noutflow_rate\nFloat64\n\\(m^3 s^{-1}\\)\n\n\nstorage_rate\nFloat64\n\\(m^3 s^{-1}\\)\n\n\nprecipitation\nFloat64\n\\(m^3 s^{-1}\\)\n\n\nevaporation\nFloat64\n\\(m^3 s^{-1}\\)\n\n\ndrainage\nFloat64\n\\(m^3 s^{-1}\\)\n\n\ninfiltration\nFloat64\n\\(m^3 s^{-1}\\)\n\n\nbalance_error\nFloat64\n\\(m^3 s^{-1}\\)\n\n\nrelative_error\nFloat64\n-\n\n\n\nThe table is sorted by time, and per time it is sorted by node_id.",
    "crumbs": [
      "Reference",
      "Usage"
    ]
  },
  {
    "objectID": "reference/usage.html#flow---flow.arrow",
    "href": "reference/usage.html#flow---flow.arrow",
    "title": "Usage",
    "section": "5.2 Flow - flow.arrow",
    "text": "5.2 Flow - flow.arrow\nThe flow table contains calculated mean flows over the saveat intervals for every flow edge in the model. In the time column the start of the period is indicated.\n\n\n\ncolumn\ntype\nunit\n\n\n\n\ntime\nDateTime\n-\n\n\nedge_id\nInt32\n-\n\n\nfrom_node_type\nString\n-\n\n\nfrom_node_id\nInt32\n-\n\n\nto_node_type\nString\n-\n\n\nto_node_id\nInt32\n-\n\n\nflow_rate\nFloat64\n\\(m^3 s^{-1}\\)\n\n\n\nThe table is sorted by time, and per time the same edge_id order is used, though not sorted. The edge_id value is the same as the fid written to the Edge table, and can be used to directly look up the Edge geometry. Flows from the âfromâ to the âtoâ node have a positive sign, and if the flow is reversed it will be negative.",
    "crumbs": [
      "Reference",
      "Usage"
    ]
  },
  {
    "objectID": "reference/usage.html#discretecontrol---control.arrow",
    "href": "reference/usage.html#discretecontrol---control.arrow",
    "title": "Usage",
    "section": "5.3 DiscreteControl - control.arrow",
    "text": "5.3 DiscreteControl - control.arrow\nThe control table contains a record of each change of control state: when it happened, which control node was involved, to which control state it changed and based on which truth state.\n\n\n\ncolumn\ntype\n\n\n\n\ntime\nDateTime\n\n\ncontrol_node_id\nInt32\n\n\ntruth_state\nString\n\n\ncontrol_state\nString",
    "crumbs": [
      "Reference",
      "Usage"
    ]
  },
  {
    "objectID": "reference/usage.html#allocation---allocation.arrow",
    "href": "reference/usage.html#allocation---allocation.arrow",
    "title": "Usage",
    "section": "5.4 Allocation - allocation.arrow",
    "text": "5.4 Allocation - allocation.arrow\nThe allocation table contains a record of allocation results: when it happened, for which node, in which allocation network, and what the demand, allocated flow and realized flow were. The realized values at the starting time of the simulation can be ignored.\n\n\n\ncolumn\ntype\n\n\n\n\ntime\nDateTime\n\n\nsubnetwork_id\nInt32\n\n\nnode_type\nString\n\n\nnode_id\nInt32\n\n\npriority\nInt32\n\n\ndemand\nFloat64\n\n\nallocated\nFloat64\n\n\nrealized\nFloat64\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe LevelDemand node allocations are listed as node type Basin. This is because one LevelDemand node can link to multiple Basins, and doesnât receive flow by itself.\n\n\nFor Basins the values demand, allocated and realized are positive if the Basin level is below the minimum level given by a LevelDemand node. The values are negative if the Basin supplies due to a surplus of water.\n\n\n\n\n\n\nNote\n\n\n\nCurrently the stored demand and abstraction rate are those at the allocation timepoint (and the abstraction rate is based on the previous allocation optimization). In the future these will be an average over the previous allocation timestep.",
    "crumbs": [
      "Reference",
      "Usage"
    ]
  },
  {
    "objectID": "reference/usage.html#allocation-flow---allocation_flow.arrow",
    "href": "reference/usage.html#allocation-flow---allocation_flow.arrow",
    "title": "Usage",
    "section": "5.5 Allocation flow - allocation_flow.arrow",
    "text": "5.5 Allocation flow - allocation_flow.arrow\nThe allocation flow table contains results of the optimized allocation flow on every edge in the model that is part of a subnetwork, for each time an optimization problem is solved (see also here). If in the model a main network and subnetwork(s) are specified, there are 2 different types of optimization for the subnetwork: collecting its total demand per priority (for allocating flow from the main network to the subnetwork), and allocating flow within the subnetwork. The column collect_demands provides the distinction between these two optimization types.\n\n\n\ncolumn\ntype\n\n\n\n\ntime\nDateTime\n\n\nedge_id\nInt32\n\n\nfrom_node_type\nString\n\n\nfrom_node_id\nInt32\n\n\nto_node_type\nString\n\n\nto_node_id\nInt32\n\n\nsubnetwork_id\nInt32\n\n\npriority\nInt32\n\n\nflow_rate\nFloat64\n\n\ncollect_demands\nBool",
    "crumbs": [
      "Reference",
      "Usage"
    ]
  },
  {
    "objectID": "reference/usage.html#subgrid-level---subgrid_level.arrow",
    "href": "reference/usage.html#subgrid-level---subgrid_level.arrow",
    "title": "Usage",
    "section": "5.6 Subgrid level - subgrid_level.arrow",
    "text": "5.6 Subgrid level - subgrid_level.arrow\nThis result file is only written if the model contains a Basin / subgrid table. See there for more information on the meaning of this output.\n\n\n\ncolumn\ntype\n\n\n\n\ntime\nDateTime\n\n\nsubgrid_id\nInt32\n\n\nsubgrid_level\nFloat64",
    "crumbs": [
      "Reference",
      "Usage"
    ]
  },
  {
    "objectID": "concept/allocation.html",
    "href": "concept/allocation.html",
    "title": "Allocation",
    "section": "",
    "text": "Allocation is the process of assigning an allocated flow rate to demand nodes in the physical layer of the model based on information about sources, the different demand nodes over various priorities, constraints introduced by nodes, local water availability and graph topology. The allocation procedure implemented in Ribasim is heavily inspired by the maximum flow problem.\nThe allocation problem is solved per subnetwork (and main network) of the Ribasim model. Each subnetwork is used to formulate an optimization problem with the JuMP package, which is solved using the HiGHS solver. For more in-depth information see also the example of solving the maximum flow problem with JuMP.jl here.\n\n\n\n\n\n\nNote\n\n\n\nwithin this Allocation section the main network is also considered to be a subnetwork.",
    "crumbs": [
      "Concepts",
      "Implementation",
      "Allocation"
    ]
  },
  {
    "objectID": "concept/allocation.html#schematisation-input",
    "href": "concept/allocation.html#schematisation-input",
    "title": "Allocation",
    "section": "3.1 Schematisation input",
    "text": "3.1 Schematisation input\n\n3.1.1 The subnetwork\nThe allocation problem is solved per subnetwork, which is given by a subset \\(S \\subset V\\) of node ids. Different subnetworks are disjoint from eachother.\n\n\n3.1.2 Source flows\nSources are indicated by a set of edges in the subnetwork \\[\nE_S^\\text{source} \\subset E.\n\\] That is, if \\((i,j) \\in E_S^\\text{source}\\), then the average over the last allocation interval \\(\\Delta t_{\\text{alloc}}\\) of the of the flow over this edge \\[\n    \\frac{1}{\\Delta t_{\\text{alloc}}}\\int_{t - \\Delta t_{\\text{alloc}}}^tQ_{ij}(t') dt'\n\\] is treated as a source flow in the allocation problem. These edges are either coming from a boundary/source node (e.g.Â a level or flow boundary) or connect the main network to a subnetwork. For the definition of \\(Q_{ij}\\) see the formal model description.\n\n\n3.1.3 User demands\nThe subnetwork contains a subset of UserDemand nodes \\(U_S \\subset S\\), who all have static or time varying demands over various priorities \\(p\\): \\[\n    d^p_i(t), \\quad i \\in U_S, p = 1,2,\\ldots, p_{\\max}.\n\\]\n\n\n\n\n\n\nNote\n\n\n\nOn this page we assume that the priorities are given by all integers from \\(1\\) to some \\(p_{\\max} \\in \\mathbb{N}\\). For the Ribasim input this is not a requirement; some of these in between priority values can be missing, only the ordering of the given priorities is taken into account.\n\n\n\n\n3.1.4 Flow demands\nThe subnetwork contains a subset of nodes \\(FD_S \\subset S\\) which have a demand of a single priority \\(p_{\\text{fd}}\\). With this we define \\[\n    d^p_i(t) =\n    \\begin{cases}\n        0 \\text{ if } p \\ne p_{\\text{fd}} \\\\\n        d^{p_{\\text{df}}} \\text{ if } p = p_{\\text{fd}}\n    \\end{cases}\n\\] for all \\(i \\in FD_S\\). Here \\(d^{p_{\\text{df}}}\\) is given by the original flow demand minus the flows trough node \\(i\\) at all priorities \\(p &lt; p_{\\text{fd}}\\).",
    "crumbs": [
      "Concepts",
      "Implementation",
      "Allocation"
    ]
  },
  {
    "objectID": "concept/allocation.html#simulation-physical-layer-input",
    "href": "concept/allocation.html#simulation-physical-layer-input",
    "title": "Allocation",
    "section": "3.2 Simulation (physical layer) input",
    "text": "3.2 Simulation (physical layer) input\n\n3.2.1 Vertical fluxes and local storage\nApart from the source flows denoted by edges, there are other sources of water in the subnetwork, associated with the basins in the subnetwork \\(B_S = B \\cap S\\). Firstly there is the average over the last allocation interval \\(\\Delta t_{\\text{alloc}}\\) of the vertical fluxes (precipitation, evaporation, infiltration and drainage) for each basin: \\[\n    \\phi_i(t) = \\frac{1}{\\Delta t_{\\text{alloc}}}\\int_{t - \\Delta t_{\\text{alloc}}}^t \\left[Q_{P,i}(t') - Q_{E,i}(t') + Q_{\\text{drn},i}(t') - Q_{\\text{inf},i}(t') \\right] dt', \\quad \\forall i \\in B_S.\n\\]\nWe consider fluxes into the basin to be positive and out of the basin to be negative. For more information see the natural water balance terms.\nSecondly, there is either a supply or demand from the storage in the basin. Given a minimum level \\(\\ell_{\\min, i}\\) and a maximum level \\(\\ell_{\\max, i}\\) which correspond to a minimum storage \\(s_{\\min, i}\\) and maximum storage \\(s_{\\max, i}\\) respectively, we get a flow supply of \\[\n    F^{\\text{basin out}}_{\\max, i} = \\max\\left(0.0, \\frac{u_i(t)-s_{\\max,i}}{\\Delta t_{\\text{alloc}}} + \\phi_i(t)\\right)\n\\]\nand a demand of \\[\n    d^p_i = \\max\\left(0.0, \\frac{s_{\\min,i} - u_i(t)}{\\Delta t_{\\text{alloc}}} - \\phi_i(t)\\right),\n\\]\nfor all \\(i \\in B_S\\). Note that the basin demand has only a single priority, so for other priorities this demand is \\(0\\).\n\n\n3.2.2 Constraining factors\n\n3.2.2.1 Flow magnitude and direction constraints\nNodes in the Ribasim model that have a max_flow_rate, i.e.Â Pump, Outlet and LinearResistance, put a constraint on the flow through that node. Some nodes only allow flow in one direction, like Pump, Outlet and TabulatedRatingCurve.\n\n\n3.2.2.2 FractionalFlow and UserDemand return flows\nBoth FractionalFlow and UserDemand nodes dictate proportional relationships between flows over edges in the subnetwork. UserDemands have a return factor \\(0 \\le r_i \\le 1, i \\in U_S\\), and FractionalFlow nodes have an associated fraction \\(f_j\\) which can be updated by DiscreteControl.",
    "crumbs": [
      "Concepts",
      "Implementation",
      "Allocation"
    ]
  },
  {
    "objectID": "concept/allocation.html#the-subnetwork-1",
    "href": "concept/allocation.html#the-subnetwork-1",
    "title": "Allocation",
    "section": "3.3 The subnetwork",
    "text": "3.3 The subnetwork\nThe subnetwork consists of a set of nodes \\(S \\subset V\\) and edges\n\\[\n    E_S = (S \\times S) \\cup E_S^\\text{source},\n\\]\ni.e.Â the edges that lie within the subnetwork together with the source edges (which can be partially outside the subnetwork). The nodes in \\(S\\) together with the connected nodes outside the subnetwork are called the extended subnetwork.\n\n3.3.1 Capacities\nEach edge in the subnetwork has an associated capacity. These capacities are collected in the sparse capacity matrix \\(C_S \\in \\overline{\\mathbb{R}}_{\\ge 0}^{n\\times n}\\) where \\(n\\) is the number of nodes in the extended subnetwork. An edge capacity is infinite if there is nothing in the model constraining the capacity.\nThe capacities are determined in different ways:\n\nIf an edge does not exist in the allocation network, i.e.Â \\((i,j) \\notin E_S\\) for certain \\(1 \\le i,j\\le n'\\), then \\((C_S)_{i,j} = 0\\);\nThe capacity of the edge \\(e \\in E_S\\) is given by the smallest max_flow_rate of the nodes along the equivalent edges in the subnetwork. If there are no nodes with a max_flow_rate, the edge capacity is infinite;\nIf the edge is a source, the capacity of the edge is given by the flow rate of that source;\nIf an edge comes from a node with a flow demand, it has infinite capacity at priorities other than this of this flow demand, and zero capacity otherwise.\n\nThere are also capacities for special edges:\n\n\\(C^{LD}_S \\in \\mathbb{R}^b_{\\ge 0}\\) where \\(b = \\# B_S\\) is the number of basins, for the flow supplied by basins based on level demand (this capacity is 0 for basins that have no level demand).\n\\(C^{FD}_S \\in \\mathbb{R}^c_{\\ge 0}\\) where \\(c = \\# FD_S\\) is the number of nodes with a flow demand, for the flow supplied by flow buffers at these nodes with a flow demand.\n\\(C^{UD}_S \\in \\mathbb{R}^f_{\\ge 0}\\) where \\(f = \\# U_S\\), for the flow supplied by the user demand outflow source whose capacity is given by return flows.",
    "crumbs": [
      "Concepts",
      "Implementation",
      "Allocation"
    ]
  },
  {
    "objectID": "concept/allocation.html#the-optimization-variables",
    "href": "concept/allocation.html#the-optimization-variables",
    "title": "Allocation",
    "section": "4.1 The optimization variables",
    "text": "4.1 The optimization variables\nThere are several types of variable whose value has to be determined to solve the allocation problem:\n\nThe flows \\(F \\in \\mathbb{R}_{\\ge 0}^{n\\times n}\\) over the edges in the allocation network;\nThe flows \\(F^\\text{basin out}_{i}, F^\\text{basin in}_{i} \\geq 0\\) for all \\(i \\in B_S\\) supplied and consumed by the basins with a level demand respectively;\nThe flows \\(F^\\text{buffer out}_{i}, F^\\text{buffer in}_{i} \\ge 0\\) for all \\(i \\in FD_S \\cup FF_S\\) supplied and consumed by the flow buffers of nodes with a flow demand or fractional flow outneighbors.",
    "crumbs": [
      "Concepts",
      "Implementation",
      "Allocation"
    ]
  },
  {
    "objectID": "concept/allocation.html#the-optimization-objective",
    "href": "concept/allocation.html#the-optimization-objective",
    "title": "Allocation",
    "section": "4.2 The optimization objective",
    "text": "4.2 The optimization objective\nThe goal of allocation is to get the flow to nodes with demands as close as possible to these demands. To achieve this, a sum error of terms is minimized.\n\\[\n    \\min E_{\\text{user demand}} + E_{\\text{level demand}} + E_{\\text{flow demand}}\n\\]\nThe error between the flows and user demands is denoted by \\(E_{\\text{user demand}}\\), where \\[\n    E_{\\text{user demand}} = \\sum_{(i,j)\\in E_S\\;:\\; i\\in U_S} d_j^p(t)\\left(1 - \\frac{F_{ij}}{d_j^p(t)}\\right)^2\n\\]\n\n\n\n\n\n\nNote\n\n\n\nWhen performing main network allocation, the connections to subnetworks are also interpreted as UserDemand nodes with demands determined by subnetwork demand collection.\n\n\nThis type of objective cares about the fraction of the demand allocated, and will lead to an equal fraction of all demands allocated when possible. For a discussion on this see here.\nLikewise, the error of level demands from basins is the squared relative difference between flows consumed by basins and basin demands. \\[\n    E_{\\text{level demand}} = \\sum_{i \\in B_S} d_i^p(t)\\left(1 - \\frac{F_i^\\text{basin in}}{d_i^p(t)}\\right)^2\n\\]\nLastly, the error of the flow demands is given as below. \\[\n    E_{\\text{flow demand}} = \\sum_{i \\in FD_S} d_i^p(t)\\left(1 -  \\frac{F_i^\\text{buffer in}}{d_i^p(t)}\\right)^2\n\\]",
    "crumbs": [
      "Concepts",
      "Implementation",
      "Allocation"
    ]
  },
  {
    "objectID": "concept/allocation.html#the-optimization-constraints",
    "href": "concept/allocation.html#the-optimization-constraints",
    "title": "Allocation",
    "section": "4.3 The optimization constraints",
    "text": "4.3 The optimization constraints\nFor convenience, we use the notation\n\\[\\begin{align}\n    V^{\\text{out}}_S(i) = \\left\\{j \\in V : (i,j) \\in E_S\\right\\} \\\\\n    V^{\\text{in}}_S(j) = \\left\\{i \\in V : (i,j) \\in E_S\\right\\}\n\\end{align}\\]\nfor the set of in-neighbors and out-neighbors of a node in the network respectively.\n\nFlow conservation: For all nodes \\(k\\) that are not a source or a sink (i.e.Â FlowBoundary, LevelBoundary, UserDemand) we have a flow conservation constraint: \\[\n  \\sum F_{\\text{out special}} + \\sum_{j \\in V^{\\text{out}}_S(k)} F_{kj} = \\sum F_{\\text{in special}} + \\sum_{i \\in V^{\\text{in}}_S(k)} F_{ik}, \\quad \\forall k \\in B_S.\n\\tag{1}\\]\n\nIn here, we have the following special flows:\n\nIf \\(k\\) is a basin with a flow demand, there is a special outflow \\(F^{\\text{basin in}}_k\\) and a special inflow \\(F^{\\text{basin out}}_k\\);\nIf the node has a buffer (see here) there is a special outflow \\(F^{\\text{buffer in}}_k\\) and a special inflow \\(F^{\\text{buffer out}}_k\\).\n\n\n\n\n\n\n\nNote\n\n\n\nIn the above, the placement of the basin and buffer flows might seem counter-intuitive. Think of the storage or buffer as a separate node connected to the node with the demand.\n\n\n\nCapacity: the flows over the edges are bounded by the edge capacity: \\[\n  F_{ij} \\le \\left(C_S\\right)_{ij}, \\quad \\forall(i,j) \\in E_S.\n\\tag{2}\\] By the definition of \\(C_S\\) this also includes the source flows. The same holds for the basin outflows:\n\n\\[\n    F^{\\text{basin out}}_{i} \\le F^{\\text{basin out}}_{\\max, i}, \\quad \\forall i \\in B_S.\n\\]\n\n\n\n\n\n\nNote\n\n\n\nWhen performing subnetwork demand collection, these capacities are set to \\(\\infty\\) for edges which connect the main network to a subnetwork. For all other sources the capacity is set to \\(0\\), so that demand collection only uses flow from the main network inlet.\n\n\nSimilar constraints hold for the flow out of basins, flow demand buffers and user demand outflow sources: \\[\nF^\\text{basin out}_{i} \\le (C^{FD}_S)_i, \\quad \\forall i \\in B_S,\n\\]\n\\[\nF^\\text{buffer out}_{i} \\le (C^{FD}_S)_i, \\quad \\forall i \\in FD_S,\n\\]\n\\[\nF_{ij} \\le (C^{UD}_S)_i, \\quad \\forall i \\in U_S, \\quad V_S^{\\text{out}}(i) = \\{j\\}.\n\\] Here we use that each UserDemand node in the allocation network has a unique outflow edge. The user outflow source capacities are increased after each optimization solve by the return fraction: \\[\n    r_i \\cdot F_{ki}, \\quad V_S^{\\text{in}}(i) = \\{k\\}.\n\\]\n\nFractional flow: Let \\(L_S \\subset V_S\\) be the set of nodes in the max flow graph with fractional flow outneighbors, and \\(f_j\\) the flow fraction associated with fractional flow node \\(j \\in V_S\\). Then \\[\n  F_{ij} \\le f_j \\sum_{k\\in V^\\text{in}_S(i)} F_{ki} \\qquad\n  \\forall i \\in L_S, \\;\n  j \\in V_S^\\text{out}(i).\n\\tag{3}\\]\nFlow sign: Furthermore there are the non-negativity constraints for the flows and allocations, see The optimization variables.",
    "crumbs": [
      "Concepts",
      "Implementation",
      "Allocation"
    ]
  },
  {
    "objectID": "concept/allocation.html#example",
    "href": "concept/allocation.html#example",
    "title": "Allocation",
    "section": "4.4 Example",
    "text": "4.4 Example\nThe following is an example of an optimization problem for the example shown here:\n\n\nCode\nusing Ribasim\nusing Ribasim: NodeID\nusing SQLite\nusing ComponentArrays: ComponentVector\n\ntoml_path = normpath(@__DIR__, \"../../generated_testmodels/allocation_example/ribasim.toml\")\np = Ribasim.Model(toml_path).integrator.p\nu = ComponentVector(; storage = zeros(length(p.basin.node_id)))\n\nallocation_model = p.allocation.allocation_models[1]\nt = 0.0\npriority_idx = 1\n\nRibasim.set_flow!(p.graph, NodeID(:FlowBoundary, 1, p), NodeID(:Basin, 2, p), 1.0)\nRibasim.set_objective_priority!(allocation_model, p, u, t, priority_idx)\nRibasim.set_initial_values!(allocation_model, p, u, t)\n\nprintln(p.allocation.allocation_models[1].problem)\n\n\nMin F[(Basin #5, UserDemand #6)]Â² + F[(Basin #2, UserDemand #3)]Â² + F[(Basin #12, UserDemand #13)]Â²\nSubject to\n source[(FlowBoundary #1, Basin #2)] : F[(FlowBoundary #1, Basin #2)] â¤ 172800\n source_user[UserDemand #6] : F[(UserDemand #6, Basin #5)] â¤ 0\n source_user[UserDemand #13] : F[(UserDemand #13, Terminal #10)] â¤ 0\n source_user[UserDemand #3] : F[(UserDemand #3, Basin #2)] â¤ 0\n fractional_flow[(TabulatedRatingCurve #7, FractionalFlow #8)] : -0.6 F[(Basin #5, TabulatedRatingCurve #7)] + F[(TabulatedRatingCurve #7, FractionalFlow #8)] â¤ 0\n fractional_flow[(TabulatedRatingCurve #7, FractionalFlow #9)] : -0.4 F[(Basin #5, TabulatedRatingCurve #7)] + F[(TabulatedRatingCurve #7, FractionalFlow #9)] â¤ 0\n flow_buffer_outflow[TabulatedRatingCurve #7] : F_flow_buffer_out[TabulatedRatingCurve #7] â¤ 0\n F[(Basin #5, UserDemand #6)] â¥ 0\n F[(Basin #2, UserDemand #3)] â¥ 0\n F[(UserDemand #3, Basin #2)] â¥ 0\n F[(Basin #2, LinearResistance #4)] â¥ 0\n F[(LinearResistance #4, Basin #2)] â¥ 0\n F[(UserDemand #6, Basin #5)] â¥ 0\n F[(UserDemand #13, Terminal #10)] â¥ 0\n F[(Basin #5, TabulatedRatingCurve #7)] â¥ 0\n F[(TabulatedRatingCurve #7, FractionalFlow #9)] â¥ 0\n F[(FractionalFlow #9, Basin #12)] â¥ 0\n F[(LinearResistance #4, Basin #5)] â¥ 0\n F[(Basin #5, LinearResistance #4)] â¥ 0\n F[(Basin #12, UserDemand #13)] â¥ 0\n F[(TabulatedRatingCurve #7, FractionalFlow #8)] â¥ 0\n F[(FractionalFlow #8, Terminal #10)] â¥ 0\n F[(FlowBoundary #1, Basin #2)] â¥ 0\n F_flow_buffer_in[TabulatedRatingCurve #7] â¥ 0\n F_flow_buffer_out[TabulatedRatingCurve #7] â¥ 0\n flow_conservation[FractionalFlow #8] : F[(TabulatedRatingCurve #7, FractionalFlow #8)] - F[(FractionalFlow #8, Terminal #10)] = 0\n flow_conservation[Basin #5] : -F[(Basin #5, UserDemand #6)] + F[(UserDemand #6, Basin #5)] - F[(Basin #5, TabulatedRatingCurve #7)] + F[(LinearResistance #4, Basin #5)] - F[(Basin #5, LinearResistance #4)] = 0\n flow_conservation[LinearResistance #4] : F[(Basin #2, LinearResistance #4)] - F[(LinearResistance #4, Basin #2)] - F[(LinearResistance #4, Basin #5)] + F[(Basin #5, LinearResistance #4)] = 0\n flow_conservation[TabulatedRatingCurve #7] : F[(Basin #5, TabulatedRatingCurve #7)] - F[(TabulatedRatingCurve #7, FractionalFlow #9)] - F[(TabulatedRatingCurve #7, FractionalFlow #8)] - F_flow_buffer_in[TabulatedRatingCurve #7] + F_flow_buffer_out[TabulatedRatingCurve #7] = 0\n flow_conservation[Basin #12] : F[(FractionalFlow #9, Basin #12)] - F[(Basin #12, UserDemand #13)] = 0\n flow_conservation[Basin #2] : -F[(Basin #2, UserDemand #3)] + F[(UserDemand #3, Basin #2)] - F[(Basin #2, LinearResistance #4)] + F[(LinearResistance #4, Basin #2)] + F[(FlowBoundary #1, Basin #2)] = 0\n flow_conservation[Terminal #10] : F[(UserDemand #13, Terminal #10)] + F[(FractionalFlow #8, Terminal #10)] = 0\n flow_conservation[FractionalFlow #9] : F[(TabulatedRatingCurve #7, FractionalFlow #9)] - F[(FractionalFlow #9, Basin #12)] = 0",
    "crumbs": [
      "Concepts",
      "Implementation",
      "Allocation"
    ]
  },
  {
    "objectID": "concept/numerics.html",
    "href": "concept/numerics.html",
    "title": "Numerical considerations",
    "section": "",
    "text": "We want to solve the following initial value problem: \\[\n\\begin{cases}\n    \\frac{\\text{d}\\mathbf{u}}{\\text{d}t} = \\mathbf{f}(\\mathbf{u},t) \\quad t_0 &lt; t &lt; t_\\text{end} \\\\\n    \\mathbf{u}(t_0) = \\mathbf{u}_0\n\\end{cases},\n\\tag{1}\\]\nwhere \\(\\mathbf{f}\\) denotes water_balance! and \\(\\mathbf{u_0}\\) the initial storages (and the PID integrals which start out at \\(0\\)).\nIn general \\(\\mathbf{f}\\) is a non-linear function in \\(\\mathbf{u}\\). These non-linearities are introduced by:\nThe problem EquationÂ 1 can be solved by various numerical time-integration methods. To do this the time interval \\([t_0,t_\\text{end}]\\) is discretized into a finite number of time points \\(t_0 &lt; t_1 &lt; \\ldots &lt; t_N = t_\\text{end}\\) for which approximate solutions \\(\\mathbf{w}_n \\approx \\mathbf{u}(t_n)\\) are computed. In general we do not assume a fixed timestep (the interval between successive points in time). Rather, the solver attempts to make as large a step as possible while keeping error tolerances within requirements. The solver settings section details the available configuration options.",
    "crumbs": [
      "Concepts",
      "Numerics",
      "Numerical considerations"
    ]
  },
  {
    "objectID": "concept/numerics.html#euler-forward",
    "href": "concept/numerics.html#euler-forward",
    "title": "Numerical considerations",
    "section": "1.1 Euler forward",
    "text": "1.1 Euler forward\nThe simplest numerical method is Euler forward: \\[\n\\mathbf{w}_{n+1} = \\mathbf{w}_n + (t_{n+1}-t_n)\\mathbf{f}(\\mathbf{w}_n, t_n).\n\\tag{2}\\]\nHere \\(\\mathbf{w}_{n+1}\\) is given as a simple explicit function of \\(\\mathbf{w}_n\\).",
    "crumbs": [
      "Concepts",
      "Numerics",
      "Numerical considerations"
    ]
  },
  {
    "objectID": "concept/numerics.html#euler-backward",
    "href": "concept/numerics.html#euler-backward",
    "title": "Numerical considerations",
    "section": "1.2 Euler backward",
    "text": "1.2 Euler backward\nEuler backward is formulated as follows: \\[\n\\mathbf{w}_{n+1} = \\mathbf{w}_n + (t_{n+1}-t_n)\\mathbf{f}(\\mathbf{w}_{n+1},t_{n+1}).\n\\tag{3}\\]\nNote that this is an implicit equation for \\(\\mathbf{w}_{n+1}\\), which is non-linear because of the non-linearity of \\(\\mathbf{f}\\).\nGenerally one of the following iterative methods is used for finding solutions to non-linear equations like this:\n\nPicard iteration for fixed points. This method aims to approximate \\(\\mathbf{w}_{n+1}\\) as a fixed point of the function \\[\n\\mathbf{g}(\\mathbf{x}) = \\mathbf{w}_n + (t_{n+1}-t_n)\\mathbf{f}(\\mathbf{x},t_{n+1})\n\\] by iterating \\(\\mathbf{g}\\) on an initial guess of \\(\\mathbf{w}_{n+1}\\);\nNewton iterations: approximate \\(\\mathbf{w}_{n+1}\\) as a root of the function \\[\n\\mathbf{h}(\\mathbf{x}) = \\mathbf{w}_n + (t_{n+1}-t_n)\\mathbf{f}(\\mathbf{x},t_{n+1}) - \\mathbf{x},\n\\] by iteratively finding the root of its linearized form:\n\n\\[\\begin{align}\n\\mathbf{0} =& \\mathbf{h}(\\mathbf{w}_{n+1}^k) + \\mathbf{J}(\\mathbf{h})(\\mathbf{w}_{n+1}^k)(\\mathbf{w}_{n+1}^{k+1}-\\mathbf{w}_{n+1}^k) \\\\\n=& \\mathbf{w}_n + (t_{n+1}-t_n)\\mathbf{f}(\\mathbf{w}_{n+1}^k,t_{n+1}) - \\mathbf{w}_{n+1}^k \\\\ +&\\left[(t_{n+1}-t_n)\\mathbf{J}(\\mathbf{f})(\\mathbf{w}_{n+1}^k)-\\mathbf{I}\\right](\\mathbf{w}_{n+1}^{k+1}-\\mathbf{w}_{n+1}^k).\n\\end{align}\\] Note that this thus requires an evaluation of the Jacobian of \\(\\mathbf{f}\\) and solving a linear system per iteration.",
    "crumbs": [
      "Concepts",
      "Numerics",
      "Numerical considerations"
    ]
  },
  {
    "objectID": "concept/numerics.html#basin-profiles",
    "href": "concept/numerics.html#basin-profiles",
    "title": "Numerical considerations",
    "section": "4.1 Basin profiles",
    "text": "4.1 Basin profiles\nThe basin profiles affect \\(\\mathbf{f}\\) in many ways, anywhere where a basin level or area is required.\n\n\n\n\n\n\nNote\n\n\n\nThis section needs to be updated and extended after once this issue is resolved.",
    "crumbs": [
      "Concepts",
      "Numerics",
      "Numerical considerations"
    ]
  },
  {
    "objectID": "concept/numerics.html#qh-relations",
    "href": "concept/numerics.html#qh-relations",
    "title": "Numerical considerations",
    "section": "4.2 Q(h) relations",
    "text": "4.2 Q(h) relations\nTabulatedRatingCurve nodes contribute to \\(\\mathbf{f}\\) with terms of the following form:\n\\[\n    Q(h(u))\n\\]\nwhere the continuity of this term is given by the least continuous of \\(Q\\) and \\(h\\).",
    "crumbs": [
      "Concepts",
      "Numerics",
      "Numerical considerations"
    ]
  },
  {
    "objectID": "concept/numerics.html#empty-basins",
    "href": "concept/numerics.html#empty-basins",
    "title": "Numerical considerations",
    "section": "4.3 Empty basins",
    "text": "4.3 Empty basins\nReduction factors are introduced at several points in the definition of \\(\\mathbf{f}\\) to smooth out otherwise discontinuous transitions (e.g.Â the flow rate of a pump going to zero when the source basin dries out). If flows are not too large with respect to basin storage, this will prevent basins from reaching 0. Rather, the basin gets a very small storage. The reduction factors help with performance, but are also an important tool to avoid getting negative storage in basins. Negative storage needs to be avoided since it is not a real solution, and would introduce water into the model that doesnât exist. Another tool used to avoid negative storage is the isoutoutofdomain option, which Ribasim makes use of. This rejects timesteps that lead to negative storage, instead retrying with a smaller timestep.",
    "crumbs": [
      "Concepts",
      "Numerics",
      "Numerical considerations"
    ]
  },
  {
    "objectID": "concept/equations.html",
    "href": "concept/equations.html",
    "title": "Equations",
    "section": "",
    "text": "In this section we give a formal description of the problem that is solved by Ribasim. The problem is of the form\n\\[\n\\frac{\\text{d}\\mathbf{u}}{\\text{d}t} = f(\\mathbf{u},p(t),t),\\quad t \\in [t_0,t_\\text{end}],\n\\]\ni.e.Â a system of coupled first order ordinary differential equations, with initial condition \\(\\mathbf{u}(t_0)= \\mathbf{u}_0\\) and time dependent input data denoted by \\(p(t)\\).\nThe model is given by a directed graph, consisting of a set of nodes (or vertices) \\(V\\) and edges \\(E\\). Let \\(V\\) be the set of node IDs and let \\(E\\) be the set of ordered tuples \\((i,j)\\) meaning that node \\(i\\) is connected to node \\(j\\).\nWe can split the set of nodes into two subsets \\(V = B \\cup N\\), where \\(B\\) is the set of basins and \\(N\\) is the set of non-basins. The basins have an associated storage state and the non-basins dictate how water flows to or from basins.\n\\(\\mathbf{u}(t)\\) is given by all the states of the model, which are (currently) the storage of the basins and the integral terms of the PID controllers, the latter being explained in PID equations.\nGiven a single basin with node ID \\(i \\in B\\), the equation that dictates the change of its storage over time is given by\n\\[\n\\frac{\\text{d}u_i}{\\text{d}t} =\n\\sum_{(i',j') \\in E | j' = i} Q_{i',j'} - \\sum_{(i',j') \\in E | i' = i} Q_{i',j'} + F_i(p,t).\n\\]\nHere \\(Q_{i,j}\\) is the flow along an edge, where the graph direction dictates positive flow. So the first term denotes flow towards the basin, the second one denotes flow away from the basin, and the third term denotes external forcing. \\(F_i(p,t)\\) is given by input data, and \\(Q_{i' ,j'}\\) is determined by the type of nodes that connect to that edge.\nThe various node and forcing types that the model can contain are explained in the section Natural water balance terms.\n\n\n\n\n\n\nNote\n\n\n\nIn general a model has more nodes than states, so in the Julia core there is a distinction between node indices and state indices. For simplicity these are treated as equal in the documentation when it comes to basins and their storage.\n\n\n\n\nThe Jacobian is a \\(n\\times n\\) matrix where \\(n\\) is the number of states in the simulation. The Jacobian is computed either using finite difference methods or automatic differentiation. For more details on the computation of the Jacobian and how it is used in the solvers see numerical considerations.\nThe entries of the Jacobian \\(J\\) are given by \\[\nJ[i,j] = \\frac{\\partial f_j}{\\partial u_i},\n\\]\nhence \\(J[i,j]\\) quantifies how \\(f_j\\), the derivative of state \\(j\\) with respect to time, changes with a change in state \\(i\\). If a node creates dependendies between basin storages (or other states), then this yields contributions to the Jacobian. If \\(j\\) corresponds to a storage state, then\n\\[\nJ[i,j] = \\sum_{(i',j') \\in E | j' = i} \\frac{\\partial Q_{i',j'}}{\\partial u_i} - \\sum_{(i',j') \\in E | i' = i} \\frac{\\partial Q_{i',j'}}{\\partial u_i},\n\\]\nMost of these terms are always \\(0\\), because a flow over an edge only depends on a small number of states. Therefore the matrix \\(J\\) is very sparse.\nFor many contributions to the Jacobian the derivative of the level \\(l(u)\\) of a basin with respect to its storage \\(u\\) is required. To get an expression for this, we first look at the storage as a function of the level:\n\\[\nu(l) = \\int_{l_0}^l A(\\ell)d\\ell.\n\\]\nFrom this we obtain \\(u'(l) = A(l)\\) and thus \\[\n\\frac{\\text{d}l}{\\text{d}u} = \\frac{1}{A(u)}.\n\\]\n\n\n\n\n\n\nNote\n\n\n\nThe presence of division by the basin area means that areas of size zero are not allowed.",
    "crumbs": [
      "Concepts",
      "Numerics",
      "Equations"
    ]
  },
  {
    "objectID": "concept/equations.html#the-jacobian",
    "href": "concept/equations.html#the-jacobian",
    "title": "Equations",
    "section": "",
    "text": "The Jacobian is a \\(n\\times n\\) matrix where \\(n\\) is the number of states in the simulation. The Jacobian is computed either using finite difference methods or automatic differentiation. For more details on the computation of the Jacobian and how it is used in the solvers see numerical considerations.\nThe entries of the Jacobian \\(J\\) are given by \\[\nJ[i,j] = \\frac{\\partial f_j}{\\partial u_i},\n\\]\nhence \\(J[i,j]\\) quantifies how \\(f_j\\), the derivative of state \\(j\\) with respect to time, changes with a change in state \\(i\\). If a node creates dependendies between basin storages (or other states), then this yields contributions to the Jacobian. If \\(j\\) corresponds to a storage state, then\n\\[\nJ[i,j] = \\sum_{(i',j') \\in E | j' = i} \\frac{\\partial Q_{i',j'}}{\\partial u_i} - \\sum_{(i',j') \\in E | i' = i} \\frac{\\partial Q_{i',j'}}{\\partial u_i},\n\\]\nMost of these terms are always \\(0\\), because a flow over an edge only depends on a small number of states. Therefore the matrix \\(J\\) is very sparse.\nFor many contributions to the Jacobian the derivative of the level \\(l(u)\\) of a basin with respect to its storage \\(u\\) is required. To get an expression for this, we first look at the storage as a function of the level:\n\\[\nu(l) = \\int_{l_0}^l A(\\ell)d\\ell.\n\\]\nFrom this we obtain \\(u'(l) = A(l)\\) and thus \\[\n\\frac{\\text{d}l}{\\text{d}u} = \\frac{1}{A(u)}.\n\\]\n\n\n\n\n\n\nNote\n\n\n\nThe presence of division by the basin area means that areas of size zero are not allowed.",
    "crumbs": [
      "Concepts",
      "Numerics",
      "Equations"
    ]
  },
  {
    "objectID": "tutorial/qgis.html",
    "href": "tutorial/qgis.html",
    "title": "QGIS plugin",
    "section": "",
    "text": "Install QGIS version 3.28 or higher.\n\n\nDownload ribasim_qgis.zip, see the download section.\nPlugins menu &gt; Manage and Install Pluginsâ¦\n\n\n\n\n\nSelect âInstall from ZIPâ:\n\nBrowse to the ribasim_qgis.zip file containing the plugin that was downloaded earlier\nClick âInstall Pluginâ\n\n\n\n\n\n\nStart the Ribasim plugin.\n\n\n\n\n\n\n\n\nIn QGIS, navigate to âPlugins &gt; Manage and Install Plugins &gt; Allâ. In the search bar, type: âiMODâ. Select the iMOD plugin, and click âInstallâ.\nAt least version 0.4.0 of the iMOD plugin is required.\nThe Time Series widget from the iMOD plugin is used for visualizing Ribasim results, which is described in the results section. Documentation on the Time Series widget can be found in the iMOD documentation.\n\n\n\nOpen an existing model or create a new model. As an example of an existing model, you can use the âbasicâ model from generated_testmodels.zip, see the download section.\n\n\n\n\n\nCheck if your coordinate reference system (CRS) is set correctly.\n\n\n\n\n\nIf you are working with an unknown CRS, right click the model database group in Layers, and click âSet Group CRSâ¦â.\n\n\n\n\n\nIf you are modeling the Netherlands, select âAmersfoort / RD Newâ (EPSG:28992).\n\n\n\n\n\n\n\n\n\n\n\nSelect the Node layer.\n\n\n\n\n\nTurn on the edit mode to be able to add nodes on the map.\n\n\n\n\n\nAdd nodes to the map with a left click and select the node type.\n\n\n\n\n\nTurn the edit mode off and save the edits to the Nodes layer.\n\n\n\n\n\n\n\n\nRight click a layer and select âOpen Attribute Tableâ.\n\n\n\n\n\nClick the yellow pencil icon on the top left to enable editing, and copy and paste a record. A record can be selected by clicking on the row number.\n\n\n\n\n\nAdjust the content. If you prefer, it also works to copy data with the same columns from Excel. Turn off edit mode and save changes to the layer.\n\n\n\n\n\n\n\n\n\n\n\nMake sure the Snapping Toolbar is visible, by going to the View &gt; Toolbars menu. Turn on snapping mode by clicking the magnet and set the snapping distance to 25 pixels.\n\n\n\n\n\n\n\n\nSelect the Edge layer and turn on the edit mode.\n\n\n\n\n\nSelect âAdd line featureâ.\n\n\n\n\n\nCreate a connection by left clicking a source node and right clicking the destination node.\n\n\n\n\n\nNow leave the edit mode and save the results to the layer.\n\n\n\n\n\nUnzip the Ribasim command line interface, ribasim_cli.zip\nOpen your terminal and go to the directory where your TOML is stored. Now run path/to/ribasim_cli/ribasim ribasim.toml. Adjust the path to the ribasim_cli folder to where you placed it. This runs the model.\nIn your model directory there is now a results/ folder with basin.arrow and flow.arrow output files.\n\n\n\n\nBefore trying to inspect the results, verify that the run was successful and the output files are there.\nClick the âTime Seriesâ button of the iMOD plugin.\n\n\n\n\n\nSelect the layer that you wish to plot. From the âNodeâ layer you can plot level or storage on Basin nodes. From the âEdgeâ layer you can plot flow over flow edges. Note that before switching between these, you typically have to click âClearâ to clear the selection. If you run a simulation with the model open in QGIS, you have to close and re-open the âiMOD Time Series Plotâ panel for the new results to be loaded.\nSelect the variables that you want to plot.\n\n\n\n\n\nClick âSelect pointsâ and select a node by dragging a rectangle around it on the map. Hold the Ctrl key to select multiple nodes.\n\n\n\n\n\nThe associated time series are shown the the graph.\n\n\n\n\n\nOnly the âbasin.arrowâ and âflow.arrowâ can be inspected with the âiMOD Time Series Plotâ panel. All Arrow files can be loaded as a layer by dragging the files onto QGIS. Right click the layer and select âOpen Attribute Tableâ to view the contents.",
    "crumbs": [
      "Tutorials",
      "QGIS plugin"
    ]
  },
  {
    "objectID": "tutorial/qgis.html#start",
    "href": "tutorial/qgis.html#start",
    "title": "QGIS plugin",
    "section": "",
    "text": "Install QGIS version 3.28 or higher.\n\n\nDownload ribasim_qgis.zip, see the download section.\nPlugins menu &gt; Manage and Install Pluginsâ¦\n\n\n\n\n\nSelect âInstall from ZIPâ:\n\nBrowse to the ribasim_qgis.zip file containing the plugin that was downloaded earlier\nClick âInstall Pluginâ\n\n\n\n\n\n\nStart the Ribasim plugin.\n\n\n\n\n\n\n\n\nIn QGIS, navigate to âPlugins &gt; Manage and Install Plugins &gt; Allâ. In the search bar, type: âiMODâ. Select the iMOD plugin, and click âInstallâ.\nAt least version 0.4.0 of the iMOD plugin is required.\nThe Time Series widget from the iMOD plugin is used for visualizing Ribasim results, which is described in the results section. Documentation on the Time Series widget can be found in the iMOD documentation.\n\n\n\nOpen an existing model or create a new model. As an example of an existing model, you can use the âbasicâ model from generated_testmodels.zip, see the download section.\n\n\n\n\n\nCheck if your coordinate reference system (CRS) is set correctly.\n\n\n\n\n\nIf you are working with an unknown CRS, right click the model database group in Layers, and click âSet Group CRSâ¦â.\n\n\n\n\n\nIf you are modeling the Netherlands, select âAmersfoort / RD Newâ (EPSG:28992).",
    "crumbs": [
      "Tutorials",
      "QGIS plugin"
    ]
  },
  {
    "objectID": "tutorial/qgis.html#edit-nodes",
    "href": "tutorial/qgis.html#edit-nodes",
    "title": "QGIS plugin",
    "section": "",
    "text": "Select the Node layer.\n\n\n\n\n\nTurn on the edit mode to be able to add nodes on the map.\n\n\n\n\n\nAdd nodes to the map with a left click and select the node type.\n\n\n\n\n\nTurn the edit mode off and save the edits to the Nodes layer.\n\n\n\n\n\n\n\n\nRight click a layer and select âOpen Attribute Tableâ.\n\n\n\n\n\nClick the yellow pencil icon on the top left to enable editing, and copy and paste a record. A record can be selected by clicking on the row number.\n\n\n\n\n\nAdjust the content. If you prefer, it also works to copy data with the same columns from Excel. Turn off edit mode and save changes to the layer.",
    "crumbs": [
      "Tutorials",
      "QGIS plugin"
    ]
  },
  {
    "objectID": "tutorial/qgis.html#connect-nodes",
    "href": "tutorial/qgis.html#connect-nodes",
    "title": "QGIS plugin",
    "section": "",
    "text": "Make sure the Snapping Toolbar is visible, by going to the View &gt; Toolbars menu. Turn on snapping mode by clicking the magnet and set the snapping distance to 25 pixels.\n\n\n\n\n\n\n\n\nSelect the Edge layer and turn on the edit mode.\n\n\n\n\n\nSelect âAdd line featureâ.\n\n\n\n\n\nCreate a connection by left clicking a source node and right clicking the destination node.\n\n\n\n\n\nNow leave the edit mode and save the results to the layer.",
    "crumbs": [
      "Tutorials",
      "QGIS plugin"
    ]
  },
  {
    "objectID": "tutorial/qgis.html#run-a-model",
    "href": "tutorial/qgis.html#run-a-model",
    "title": "QGIS plugin",
    "section": "",
    "text": "Unzip the Ribasim command line interface, ribasim_cli.zip\nOpen your terminal and go to the directory where your TOML is stored. Now run path/to/ribasim_cli/ribasim ribasim.toml. Adjust the path to the ribasim_cli folder to where you placed it. This runs the model.\nIn your model directory there is now a results/ folder with basin.arrow and flow.arrow output files.",
    "crumbs": [
      "Tutorials",
      "QGIS plugin"
    ]
  },
  {
    "objectID": "tutorial/qgis.html#sec-results",
    "href": "tutorial/qgis.html#sec-results",
    "title": "QGIS plugin",
    "section": "",
    "text": "Before trying to inspect the results, verify that the run was successful and the output files are there.\nClick the âTime Seriesâ button of the iMOD plugin.\n\n\n\n\n\nSelect the layer that you wish to plot. From the âNodeâ layer you can plot level or storage on Basin nodes. From the âEdgeâ layer you can plot flow over flow edges. Note that before switching between these, you typically have to click âClearâ to clear the selection. If you run a simulation with the model open in QGIS, you have to close and re-open the âiMOD Time Series Plotâ panel for the new results to be loaded.\nSelect the variables that you want to plot.\n\n\n\n\n\nClick âSelect pointsâ and select a node by dragging a rectangle around it on the map. Hold the Ctrl key to select multiple nodes.\n\n\n\n\n\nThe associated time series are shown the the graph.\n\n\n\n\n\nOnly the âbasin.arrowâ and âflow.arrowâ can be inspected with the âiMOD Time Series Plotâ panel. All Arrow files can be loaded as a layer by dragging the files onto QGIS. Right click the layer and select âOpen Attribute Tableâ to view the contents.",
    "crumbs": [
      "Tutorials",
      "QGIS plugin"
    ]
  },
  {
    "objectID": "dev/release.html",
    "href": "dev/release.html",
    "title": "Release process",
    "section": "",
    "text": "The Ribasim repository contains several components, e.g., the Julia core, the Python tooling and QGIS plugin. The components are currently only guaranteed to work together if they have the same version number. Therefore we release Ribasim as a collection of all the components at once, all carrying the same version number. For maximum interoperability it is suggested to only release all components together, and not individually.",
    "crumbs": [
      "Contributing",
      "Release process"
    ]
  },
  {
    "objectID": "dev/release.html#pre-release-checks",
    "href": "dev/release.html#pre-release-checks",
    "title": "Release process",
    "section": "2.1 Pre-release checks",
    "text": "2.1 Pre-release checks\nBefore starting the release process, ensure that all tests are passing and that all features intended for the release are complete and merged into the main branch.",
    "crumbs": [
      "Contributing",
      "Release process"
    ]
  },
  {
    "objectID": "dev/release.html#update-version-numbers-of-the-components",
    "href": "dev/release.html#update-version-numbers-of-the-components",
    "title": "Release process",
    "section": "2.2 Update version numbers of the components",
    "text": "2.2 Update version numbers of the components\nDetermine the new version number like 2023.1.0, filling in the current year, a bumped MINOR number for normal releases and a bumped MICRO number for non-breaking, hotfix releases. This follows YYYY.MINOR.MICRO from calver.\nCreate a branch that starts with release, like release-2023-1.0. It needs to start with release to trigger extra TeamCity checks.\nUpdate the version numbers in the repository to the new version number. See also the latest Ribasim release. Use find and replace to update all locations. Only update the lines in pixi.lock that refer to Ribasim packages, to avoid accidentally changing the version number of dependencies that happen to have the same version number. Donât change the old version numbers in changelog.qmd.",
    "crumbs": [
      "Contributing",
      "Release process"
    ]
  },
  {
    "objectID": "dev/release.html#update-the-changelog",
    "href": "dev/release.html#update-the-changelog",
    "title": "Release process",
    "section": "2.3 Update the changelog",
    "text": "2.3 Update the changelog\nThe docs/changelog.qmd file, hosted on https://deltares.github.io/Ribasim/changelog, records the most important changes for users. Review the commits since the latest Ribasim release to make sure these are listed. Change the âUnreleasedâ section to the new version number and date, and create a new empty âUnreleasedâ section at the top.",
    "crumbs": [
      "Contributing",
      "Release process"
    ]
  },
  {
    "objectID": "dev/release.html#submit-a-pull-request",
    "href": "dev/release.html#submit-a-pull-request",
    "title": "Release process",
    "section": "2.4 Submit a pull request",
    "text": "2.4 Submit a pull request\nNow submit a pull request with the updated the version numbers and changelog.",
    "crumbs": [
      "Contributing",
      "Release process"
    ]
  },
  {
    "objectID": "dev/release.html#create-a-new-release",
    "href": "dev/release.html#create-a-new-release",
    "title": "Release process",
    "section": "2.5 Create a new release",
    "text": "2.5 Create a new release\nWhen the pull request is merged to main, checkout the commit that updates the version numbers.\nCreate a new tag, which is the letter v followed by the version number, like, v2023.8.0.\nThis can be done by executing:\ngit tag &lt;tagname&gt;\nThen push the tags:\ngit push --tags\nThis will trigger a workflow on TeamCity that will publish a new release on GitHub as soon as it is finished. You can follow the progress here. It also auto-generates a changelog. Youâll probably want to curate that by rearranging the most important changes for users to the top in the form of Keep a Changelog. The possibly long list of generated release notes can put below an âAll changesâ collapsed item as such:\n&lt;details&gt;\n&lt;summary&gt;\nAll changes\n&lt;/summary&gt;\n\n# Put GitHub flavored markdown here\n\n&lt;/details&gt;",
    "crumbs": [
      "Contributing",
      "Release process"
    ]
  },
  {
    "objectID": "dev/release.html#release-the-ribasim-python-packages-to-pypi",
    "href": "dev/release.html#release-the-ribasim-python-packages-to-pypi",
    "title": "Release process",
    "section": "2.6 Release the Ribasim Python packages to PyPI",
    "text": "2.6 Release the Ribasim Python packages to PyPI\nTo be able to install packages with pip, they need to be released on the Python Package Index (PyPI). In order to publish Ribasim Python or Ribasim API follow the following steps:\n\nOpen a terminal and run pixi run publish-ribasim-python\nOpen a terminal and run pixi run publish-ribasim-api",
    "crumbs": [
      "Contributing",
      "Release process"
    ]
  },
  {
    "objectID": "dev/release.html#do-manual-checks",
    "href": "dev/release.html#do-manual-checks",
    "title": "Release process",
    "section": "2.7 Do manual checks",
    "text": "2.7 Do manual checks\nOur continuous integration (CI) should have caught most issues. A current weak spot in our testing is the QGIS plugin, so it is a good idea to do some manual checks to see if it works properly. Start with running the automated task to see if it can be correctly installed.\n# This test might give a fatal error on the first run, this is most likely a timing issue.\n# Try to run it again when that happens.\npixi run test-ribasim-qgis-ui\nIt is a good idea to load new test models if there are any, or test any other changed functionality.",
    "crumbs": [
      "Contributing",
      "Release process"
    ]
  },
  {
    "objectID": "dev/release.html#announce-release",
    "href": "dev/release.html#announce-release",
    "title": "Release process",
    "section": "2.8 Announce release",
    "text": "2.8 Announce release\nAnnounce the release in appropriate channels. Include a link to the release notes and assets, which is whatever this resolves to at that time. Also include a link to the documentation.",
    "crumbs": [
      "Contributing",
      "Release process"
    ]
  },
  {
    "objectID": "dev/index.html",
    "href": "dev/index.html",
    "title": "Contributing",
    "section": "",
    "text": "Ribasim welcomes contributions.\nThere is developer documentation for the Julia core, the Basic Model Interface (BMI), Python tooling, and the QGIS plugin. A guide on how to add a new node type to both is written in adding node types. Release process describes the steps to follow when creating a new Ribasim release.",
    "crumbs": [
      "Contributing"
    ]
  },
  {
    "objectID": "dev/index.html#clone-ribasim",
    "href": "dev/index.html#clone-ribasim",
    "title": "Contributing",
    "section": "1.1 Clone Ribasim",
    "text": "1.1 Clone Ribasim\nIn order to have the Ribasim repository locally available, you can clone it with Git. Git can be installed from git-scm.com. Once installed, run the following command at a directory of your choice:\nIn order to have the Ribasim repository locally available, run the following command at a directory of your choice:\ngit clone https://github.com/Deltares/Ribasim.git\nTo continue with the following steps, make the root of the repository your working directory by running\ncd Ribasim",
    "crumbs": [
      "Contributing"
    ]
  },
  {
    "objectID": "dev/index.html#setting-up-pixi",
    "href": "dev/index.html#setting-up-pixi",
    "title": "Contributing",
    "section": "1.2 Setting up pixi",
    "text": "1.2 Setting up pixi\nFirst, set up pixi as described on their getting started page.\nThen set up the environment by running the following commands:\npixi run install\nThis will automatically install all required packages for development. Our pixi environment also provides an instance of Julia and QGIS. These will not conflict with any pre-installed applications, as long as you have the pixi environment enabled. You can do this in a terminal by calling pixi shell, or starting programs with pixi run julia, or pixi run qgis. This is also the way that we start visual studio code: pixi run code ..",
    "crumbs": [
      "Contributing"
    ]
  },
  {
    "objectID": "dev/python.html",
    "href": "dev/python.html",
    "title": "Python tooling development",
    "section": "",
    "text": "In order to run tests on Ribasim Python execute\npixi run test-ribasim-python\n\n\n\nMake sure to run Clear All Outputs on the notebook before committing.\n\n\n\nBefore running the Julia tests or building binaries, example model input needs to created. This is done by running the following:\npixi run generate-testmodels\nThis places example model input files under ./generated_testmodels/. If the example models change, re-run this script.\n\n\n\nInstall the Python, ruff and autoDocstring extensions.\n\n\n\nTo run our linting suite locally, execute:\npixi run lint",
    "crumbs": [
      "Contributing",
      "Python tooling development"
    ]
  },
  {
    "objectID": "dev/python.html#sec-test",
    "href": "dev/python.html#sec-test",
    "title": "Python tooling development",
    "section": "",
    "text": "In order to run tests on Ribasim Python execute\npixi run test-ribasim-python",
    "crumbs": [
      "Contributing",
      "Python tooling development"
    ]
  },
  {
    "objectID": "dev/python.html#updating-example-notebooks",
    "href": "dev/python.html#updating-example-notebooks",
    "title": "Python tooling development",
    "section": "",
    "text": "Make sure to run Clear All Outputs on the notebook before committing.",
    "crumbs": [
      "Contributing",
      "Python tooling development"
    ]
  },
  {
    "objectID": "dev/python.html#prepare-model-input",
    "href": "dev/python.html#prepare-model-input",
    "title": "Python tooling development",
    "section": "",
    "text": "Before running the Julia tests or building binaries, example model input needs to created. This is done by running the following:\npixi run generate-testmodels\nThis places example model input files under ./generated_testmodels/. If the example models change, re-run this script.",
    "crumbs": [
      "Contributing",
      "Python tooling development"
    ]
  },
  {
    "objectID": "dev/python.html#sec-vscode",
    "href": "dev/python.html#sec-vscode",
    "title": "Python tooling development",
    "section": "",
    "text": "Install the Python, ruff and autoDocstring extensions.",
    "crumbs": [
      "Contributing",
      "Python tooling development"
    ]
  },
  {
    "objectID": "dev/python.html#linting",
    "href": "dev/python.html#linting",
    "title": "Python tooling development",
    "section": "",
    "text": "To run our linting suite locally, execute:\npixi run lint",
    "crumbs": [
      "Contributing",
      "Python tooling development"
    ]
  },
  {
    "objectID": "dev/ci.html",
    "href": "dev/ci.html",
    "title": "Continuous integration",
    "section": "",
    "text": "Continuous integration (CI) is about commits being merged frequently, resulting in new features being released frequently. When proposing new changes to the code base a pull request is opened. When a new commit in that pull request, a series of tests will be done to make sure that this commit is error-free and robust in different environments. This process drive each new development through building, testing, quality checking.\ngraph LR\n    A[New development]--&gt;B[Continuous integration]\n    B--&gt;C[Merge]\nThis page contains an extensive explanation on how the Ribasim continuous integration works.",
    "crumbs": [
      "Contributing",
      "Continuous integration"
    ]
  },
  {
    "objectID": "dev/ci.html#conditions-of-using-teamcity",
    "href": "dev/ci.html#conditions-of-using-teamcity",
    "title": "Continuous integration",
    "section": "2.1 Conditions of using TeamCity",
    "text": "2.1 Conditions of using TeamCity\nTeamCity only runs workflows with the following conditions:\n\nWhen the workflow would take too long to run on GitHub Action\nWhen the release depends on the artifacts of the workflow.\nWhen other TeamCity projects depend on artifacts of Ribasim (e.g.Â iMOD coupler)",
    "crumbs": [
      "Contributing",
      "Continuous integration"
    ]
  },
  {
    "objectID": "dev/ci.html#release-process",
    "href": "dev/ci.html#release-process",
    "title": "Continuous integration",
    "section": "2.2 Release process",
    "text": "2.2 Release process\nIn the release, we include the generated testmodels, Ribasim CLI on Windows and Linux, Ribasim QGIS, and the source code.\nWe have the following pipeline to generate artifects for releasing:\n\nGenerate Testmodels: produces generated_testmodels artifact which is part of the release.\nMake GitHub Release: uses artifacts and makes the release. TeamCity constantly monitors the GitHub repository. When a tag starts with v20 is added, it triggers the release process.\nBuild Ribasim: builds library and executable of Ribasim on Linux and Windows. The artifacts are tested in Test Ribasim Binaries and used by iMOD Coupler.\nTest Ribasim Binaries: tests libribasim artifact and ribasim_cli artifact on Linux and Windows\n\n\n\n\n\n\n\nNote\n\n\n\nMake GitHub Release does not publish artifacts of âTest Ribasim Binariesâ. It only publishes artifacts of âBuild Ribasimâ if the beforementioned tests pass.\n\n\n\n\n\n\n\ngraph LR\n    A[Make GitHub Release]--&gt;B(Release)\n    F[Generate Testmodels]--&gt;A\n    G[Make QGIS plugin]--&gt;A\n    H[Build Ribasim]---D[Test Ribasim Binaries]\n    D--&gt;A",
    "crumbs": [
      "Contributing",
      "Continuous integration"
    ]
  },
  {
    "objectID": "guide/examples.html",
    "href": "guide/examples.html",
    "title": "Examples",
    "section": "",
    "text": "1 Basic model with static forcing\n\nimport shutil\nfrom pathlib import Path\n\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nfrom ribasim import Allocation, Model, Node\nfrom ribasim.nodes import (\n    basin,\n    discrete_control,\n    flow_boundary,\n    fractional_flow,\n    level_boundary,\n    level_demand,\n    linear_resistance,\n    manning_resistance,\n    outlet,\n    pid_control,\n    pump,\n    tabulated_rating_curve,\n    user_demand,\n)\nfrom shapely.geometry import Point\n\n\ndatadir = Path(\"data\")\nshutil.rmtree(datadir, ignore_errors=True)\n\n\nmodel = Model(starttime=\"2020-01-01\", endtime=\"2021-01-01\", crs=\"EPSG:4326\")\n\nSetup the basins:\n\ntime = pd.date_range(model.starttime, model.endtime)\nday_of_year = time.day_of_year.to_numpy()\nseconds_per_day = 24 * 60 * 60\nevaporation = (\n    (-1.0 * np.cos(day_of_year / 365.0 * 2 * np.pi) + 1.0) * 0.0025 / seconds_per_day\n)\nrng = np.random.default_rng(seed=0)\nprecipitation = (\n    rng.lognormal(mean=-1.0, sigma=1.7, size=time.size) * 0.001 / seconds_per_day\n)\n\n# Convert steady forcing to m/s\n# 2 mm/d precipitation, 1 mm/d evaporation\n\nbasin_data = [\n    basin.Profile(area=[0.01, 1000.0], level=[0.0, 1.0]),\n    basin.Time(\n        time=pd.date_range(model.starttime, model.endtime),\n        drainage=0.0,\n        potential_evaporation=evaporation,\n        infiltration=0.0,\n        precipitation=precipitation,\n        urban_runoff=0.0,\n    ),\n    basin.State(level=[1.4]),\n]\n\nmodel.basin.add(Node(1, Point(0.0, 0.0)), basin_data)\nmodel.basin.add(Node(3, Point(2.0, 0.0)), basin_data)\nmodel.basin.add(Node(6, Point(3.0, 2.0)), basin_data)\nmodel.basin.add(Node(9, Point(5.0, 0.0)), basin_data)\n\nSetup linear resistance:\n\nmodel.linear_resistance.add(\n    Node(10, Point(6.0, 0.0)),\n    [linear_resistance.Static(resistance=[5e3])],\n)\nmodel.linear_resistance.add(\n    Node(12, Point(2.0, 1.0)),\n    [linear_resistance.Static(resistance=[3600.0 * 24.0 / 100.0])],\n)\n\nSetup Manning resistance:\n\nmodel.manning_resistance.add(\n    Node(2, Point(1.0, 0.0)),\n    [\n        manning_resistance.Static(\n            length=[900], manning_n=[0.04], profile_width=[6.0], profile_slope=[3.0]\n        )\n    ],\n)\n\nSet up a rating curve node:\n\nmodel.tabulated_rating_curve.add(\n    Node(4, Point(3.0, 0.0)),\n    [tabulated_rating_curve.Static(level=[0.0, 1.0], flow_rate=[0.0, 10 / 86400])],\n)\n\nSetup fractional flows:\n\nmodel.fractional_flow.add(\n    Node(5, Point(3.0, 1.0)), [fractional_flow.Static(fraction=[0.3])]\n)\nmodel.fractional_flow.add(\n    Node(8, Point(4.0, 0.0)), [fractional_flow.Static(fraction=[0.6])]\n)\nmodel.fractional_flow.add(\n    Node(13, Point(3.0, -1.0)),\n    [fractional_flow.Static(fraction=[0.1])],\n)\n\nSetup pump:\n\nmodel.pump.add(Node(7, Point(4.0, 1.0)), [pump.Static(flow_rate=[0.5 / 3600])])\n\nSetup level boundary:\n\nmodel.level_boundary.add(\n    Node(11, Point(2.0, 2.0)), [level_boundary.Static(level=[0.5])]\n)\nmodel.level_boundary.add(\n    Node(17, Point(6.0, 1.0)), [level_boundary.Static(level=[1.5])]\n)\n\nSetup flow boundary:\n\nmodel.flow_boundary.add(\n    Node(15, Point(3.0, 3.0)), [flow_boundary.Static(flow_rate=[1e-4])]\n)\nmodel.flow_boundary.add(\n    Node(16, Point(0.0, 1.0)), [flow_boundary.Static(flow_rate=[1e-4])]\n)\n\nSetup terminal:\n\nmodel.terminal.add(Node(14, Point(3.0, -2.0)))\n\nSetup the edges:\n\nmodel.edge.add(model.basin[1], model.manning_resistance[2])\nmodel.edge.add(model.manning_resistance[2], model.basin[3])\nmodel.edge.add(model.basin[3], model.tabulated_rating_curve[4])\nmodel.edge.add(model.tabulated_rating_curve[4], model.fractional_flow[5])\nmodel.edge.add(model.tabulated_rating_curve[4], model.fractional_flow[8])\nmodel.edge.add(model.fractional_flow[5], model.basin[6])\nmodel.edge.add(model.basin[6], model.pump[7])\nmodel.edge.add(model.fractional_flow[8], model.basin[9])\nmodel.edge.add(model.pump[7], model.basin[9])\nmodel.edge.add(model.basin[9], model.linear_resistance[10])\nmodel.edge.add(model.level_boundary[11], model.linear_resistance[12])\nmodel.edge.add(model.linear_resistance[12], model.basin[3])\nmodel.edge.add(model.tabulated_rating_curve[4], model.fractional_flow[13])\nmodel.edge.add(model.fractional_flow[13], model.terminal[14])\nmodel.edge.add(model.flow_boundary[15], model.basin[6])\nmodel.edge.add(model.flow_boundary[16], model.basin[1])\nmodel.edge.add(model.linear_resistance[10], model.level_boundary[17])\n\nLetâs take a look at the model:\n\nmodel.plot()\n\n\n\n\n\n\n\n\nWrite the model to a TOML and GeoPackage:\n\ntoml_path = datadir / \"basic/ribasim.toml\"\nmodel.write(toml_path)\n\nPosixPath('data/basic/ribasim.toml')\n\n\nNow run the model. From Python you can run it with:\nimport subprocess\nsubprocess.run([cli_path, toml_path], check=True)\nOr similarly you can from the terminal with:\nribasim basic/ribasim.toml\nAfter running the model, read back the results:\n\ndf_basin = pd.read_feather(datadir / \"basic/results/basin.arrow\")\ndf_basin_wide = df_basin.pivot_table(\n    index=\"time\", columns=\"node_id\", values=[\"storage\", \"level\"]\n)\ndf_basin_wide[\"level\"].plot()\n\n\n\n\n\n\n\n\n\ndf_flow = pd.read_feather(datadir / \"basic/results/flow.arrow\")\ndf_flow[\"edge\"] = list(zip(df_flow.from_node_id, df_flow.to_node_id))\ndf_flow[\"flow_m3d\"] = df_flow.flow_rate * 86400\nax = df_flow.pivot_table(index=\"time\", columns=\"edge\", values=\"flow_m3d\").plot()\nax.legend(bbox_to_anchor=(1.3, 1), title=\"Edge\")\n\n\n\n\n\n\n\n\n\n\n2 Model with discrete control\nThe model constructed below consists of a single basin which slowly drains trough a TabulatedRatingCurve, but is held within a range by two connected pumps. These two pumps together behave like a reversible pump. When pumping can be done in only one direction, and the other direction is only possible under gravity, use an Outlet for that direction.\nSetup the basins:\n\nmodel = Model(starttime=\"2020-01-01\", endtime=\"2021-01-01\", crs=\"EPSG:4326\")\n\n\nmodel.basin.add(\n    Node(1, Point(0.0, 0.0)),\n    [\n        basin.Profile(area=[1000.0, 1000.0], level=[0.0, 1.0]),\n        basin.State(level=[20.0]),\n        basin.Time(time=[\"2020-01-01\", \"2020-07-01\"], precipitation=[0.0, 3e-6]),\n    ],\n)\n\nSetup the discrete control:\n\nmodel.discrete_control.add(\n    Node(7, Point(1.0, 0.0)),\n    [\n        discrete_control.Variable(\n            compound_variable_id=1,\n            listen_node_id=1,\n            listen_node_type=[\"Basin\"],\n            variable=[\"level\"],\n        ),\n        discrete_control.Condition(\n            compound_variable_id=1,\n            # min, max\n            greater_than=[5.0, 15.0],\n        ),\n        discrete_control.Logic(\n            truth_state=[\"FF\", \"TF\", \"TT\"],\n            control_state=[\"in\", \"none\", \"out\"],\n        ),\n    ],\n)\n\nThe above control logic can be summarized as follows:\n\nIf the level is above the maximum, activate the control state âoutâ;\nIf the level is below the minimum, active the control state âinâ;\nOtherwise activate the control state ânoneâ.\n\nSetup the pump:\n\nmodel.pump.add(\n    Node(2, Point(1.0, 1.0)),\n    [pump.Static(control_state=[\"none\", \"in\", \"out\"], flow_rate=[0.0, 2e-3, 0.0])],\n)\nmodel.pump.add(\n    Node(3, Point(1.0, -1.0)),\n    [pump.Static(control_state=[\"none\", \"in\", \"out\"], flow_rate=[0.0, 0.0, 2e-3])],\n)\n\nThe pump data defines the following:\n\n\n\nControl state\nPump #2 flow rate (m/s)\nPump #3 flow rate (m/s)\n\n\n\n\nânoneâ\n0.0\n0.0\n\n\nâinâ\n2e-3\n0.0\n\n\nâoutâ\n0.0\n2e-3\n\n\n\nSetup the level boundary:\n\nmodel.level_boundary.add(\n    Node(4, Point(2.0, 0.0)), [level_boundary.Static(level=[10.0])]\n)\n\nSetup the rating curve:\n\nmodel.tabulated_rating_curve.add(\n    Node(5, Point(-1.0, 0.0)),\n    [tabulated_rating_curve.Static(level=[2.0, 15.0], flow_rate=[0.0, 2e-3])],\n)\n\nSetup the terminal:\n\nmodel.terminal.add(Node(6, Point(-2.0, 0.0)))\n\nSetup edges:\n\nmodel.edge.add(model.basin[1], model.pump[3])\nmodel.edge.add(model.pump[3], model.level_boundary[4])\nmodel.edge.add(model.level_boundary[4], model.pump[2])\nmodel.edge.add(model.pump[2], model.basin[1])\nmodel.edge.add(model.basin[1], model.tabulated_rating_curve[5])\nmodel.edge.add(model.tabulated_rating_curve[5], model.terminal[6])\nmodel.edge.add(model.discrete_control[7], model.pump[2])\nmodel.edge.add(model.discrete_control[7], model.pump[3])\n\nLetâs take a look at the model:\n\nmodel.plot()\n\n\n\n\n\n\n\n\nListen edges are plotted with a dashed line since they are not present in the âEdge / staticâ schema but only in the âControl / conditionâ schema.\n\ndatadir = Path(\"data\")\nmodel.write(datadir / \"level_range/ribasim.toml\")\n\nPosixPath('data/level_range/ribasim.toml')\n\n\nNow run the model with ribasim level_range/ribasim.toml. After running the model, read back the results:\n\ndf_basin = pd.read_feather(datadir / \"level_range/results/basin.arrow\")\ndf_basin_wide = df_basin.pivot_table(\n    index=\"time\", columns=\"node_id\", values=[\"storage\", \"level\"]\n)\n\nax = df_basin_wide[\"level\"].plot()\n\ngreater_than = model.discrete_control.condition.df.greater_than\n\nax.hlines(\n    greater_than,\n    df_basin.time[0],\n    df_basin.time.max(),\n    lw=1,\n    ls=\"--\",\n    color=\"k\",\n)\n\nax.set_yticks(greater_than, [\"min\", \"max\"])\nax.set_ylabel(\"level\")\nplt.show()\n\n\n\n\n\n\n\n\nWe see that in January the level of the basin is too high and thus water is pumped out until the maximum level of the desired range is reached. Then until May water flows out of the basin freely through the tabulated rating curve until the minimum level is reached. From this point until the start of July water is pumped into the basin in short bursts to stay within the desired range. At the start of July rain starts falling on the basin, which causes the basin level to rise until the maximum level. From this point onward water is pumped out of the basin in short bursts to stay within the desired range.\n\n\n3 Model with PID control\nSet up the model:\n\nmodel = Model(starttime=\"2020-01-01\", endtime=\"2020-12-01\", crs=\"EPSG:4326\")\n\nSetup the basins:\n\nmodel.basin.add(\n    Node(2, Point(1.0, 0.0)),\n    [basin.Profile(area=[1000.0, 1000.0], level=[0.0, 1.0]), basin.State(level=[6.0])],\n)\n\nSetup the pump:\n\nmodel.pump.add(\n    Node(3, Point(2.0, 0.5)),\n    [pump.Static(flow_rate=[0.0])],  # Will be overwritten by PID controller\n)\n\nSetup the outlet:\n\nmodel.outlet.add(\n    Node(6, Point(2.0, -0.5)),\n    [outlet.Static(flow_rate=[0.0])],  # Will be overwritten by PID controller\n)\n\nSetup flow boundary:\n\nmodel.flow_boundary.add(\n    Node(1, Point(0.0, 0.0)),\n    [flow_boundary.Static(flow_rate=[1e-3])],\n)\n\nSetup level boundary:\n\nmodel.level_boundary.add(\n    Node(4, Point(3.0, 0.0)),\n    [level_boundary.Static(level=[5.0])],\n)\n\nSetup PID control:\n\nfor node, proportional, integral in [\n    (Node(5, Point(1.5, 1.0)), -1e-3, -1e-7),\n    (Node(7, Point(1.5, -1.0)), 1e-3, 1e-7),\n]:\n    pid_control_data = [\n        pid_control.Time(\n            time=[\n                \"2020-01-01\",\n                \"2020-05-01\",\n                \"2020-07-01\",\n                \"2020-12-01\",\n            ],\n            listen_node_id=2,\n            listen_node_type=\"Basin\",\n            target=[5.0, 5.0, 7.5, 7.5],\n            proportional=proportional,\n            integral=integral,\n            derivative=0.0,\n        )\n    ]\n    model.pid_control.add(node, pid_control_data)\n\nNote that the coefficients for the pump and the outlet are equal in magnitude but opposite in sign. This way the pump and the outlet equally work towards the same goal, while having opposite effects on the controlled basin due to their connectivity to this basin.\nSetup the edges:\n\nmodel.edge.add(model.flow_boundary[1], model.basin[2])\nmodel.edge.add(model.basin[2], model.pump[3])\nmodel.edge.add(model.pump[3], model.level_boundary[4])\nmodel.edge.add(model.level_boundary[4], model.outlet[6])\nmodel.edge.add(model.outlet[6], model.basin[2])\nmodel.edge.add(model.pid_control[5], model.pump[3])\nmodel.edge.add(model.pid_control[7], model.outlet[6])\n\nLetâs take a look at the model:\n\nmodel.plot()\n\n\n\n\n\n\n\n\nWrite the model to a TOML and GeoPackage:\n\ndatadir = Path(\"data\")\nmodel.write(datadir / \"pid_control/ribasim.toml\")\n\nPosixPath('data/pid_control/ribasim.toml')\n\n\nNow run the model with ribasim pid_control/ribasim.toml. After running the model, read back the results:\n\nfrom matplotlib.dates import date2num\n\ndf_basin = pd.read_feather(datadir / \"pid_control/results/basin.arrow\")\ndf_basin_wide = df_basin.pivot_table(\n    index=\"time\", columns=\"node_id\", values=[\"storage\", \"level\"]\n)\nax = df_basin_wide[\"level\"].plot()\nax.set_ylabel(\"level [m]\")\n\n# Plot target level\nlevel_demands = model.pid_control.time.df.target.to_numpy()[:4]\ntimes = date2num(model.pid_control.time.df.time)[:4]\nax.plot(times, level_demands, color=\"k\", ls=\":\", label=\"target level\")\npass\n\n\n\n\n\n\n\n\n\n\n4 Model with allocation (user demand)\nSetup a model:\n\nmodel = Model(starttime=\"2020-01-01\", endtime=\"2020-01-20\", crs=\"EPSG:4326\")\n\nSetup the basins:\n\nbasin_data = [\n    basin.Profile(area=[300_000.0, 300_000.0], level=[0.0, 1.0]),\n    basin.State(level=[1.0]),\n]\n\nmodel.basin.add(\n    Node(2, Point(1.0, 0.0), subnetwork_id=1),\n    basin_data,\n)\nmodel.basin.add(\n    Node(5, Point(3.0, 0.0), subnetwork_id=1),\n    basin_data,\n)\nmodel.basin.add(\n    Node(12, Point(4.5, 1.0), subnetwork_id=1),\n    basin_data,\n)\n\nSetup the flow boundary:\n\nmodel.flow_boundary.add(\n    Node(1, Point(0.0, 0.0), subnetwork_id=1), [flow_boundary.Static(flow_rate=[2.0])]\n)\n\nSetup the linear resistance:\n\nmodel.linear_resistance.add(\n    Node(4, Point(2.0, 0.0), subnetwork_id=1),\n    [linear_resistance.Static(resistance=[0.06])],\n)\n\nSetup the tabulated rating curve:\n\nmodel.tabulated_rating_curve.add(\n    Node(7, Point(4.0, 0.0), subnetwork_id=1),\n    [tabulated_rating_curve.Static(level=[0.0, 0.5, 1.0], flow_rate=[0.0, 0.0, 2.0])],\n)\n\nSetup the fractional flow:\n\nmodel.fractional_flow.add(\n    Node(8, Point(4.5, 0.0), subnetwork_id=1),\n    [fractional_flow.Static(fraction=[0.6, 0.9], control_state=[\"divert\", \"close\"])],\n)\nmodel.fractional_flow.add(\n    Node(9, Point(4.5, 0.5), subnetwork_id=1),\n    [fractional_flow.Static(fraction=[0.4, 0.1], control_state=[\"divert\", \"close\"])],\n)\n\nSetup the terminal:\n\nmodel.terminal.add(Node(10, Point(5.0, 0.0), subnetwork_id=1))\n\nSetup the discrete control:\n\nmodel.discrete_control.add(\n    Node(11, Point(4.5, 0.25), subnetwork_id=1),\n    [\n        discrete_control.Variable(\n            compound_variable_id=1,\n            listen_node_id=[5],\n            listen_node_type=[\"Basin\"],\n            variable=[\"level\"],\n        ),\n        discrete_control.Condition(\n            compound_variable_id=1,\n            greater_than=[0.52],\n        ),\n        discrete_control.Logic(\n            truth_state=[\"T\", \"F\"], control_state=[\"divert\", \"close\"]\n        ),\n    ],\n)\n\nSetup the users:\n\nmodel.user_demand.add(\n    Node(6, Point(3.0, 1.0), subnetwork_id=1),\n    [\n        user_demand.Static(\n            demand=[1.5], return_factor=[0.0], min_level=[-1.0], priority=[1]\n        )\n    ],\n)\nmodel.user_demand.add(\n    Node(13, Point(5.0, 1.0), subnetwork_id=1),\n    [\n        user_demand.Static(\n            demand=[1.0], return_factor=[0.0], min_level=[-1.0], priority=[3]\n        )\n    ],\n)\nmodel.user_demand.add(\n    Node(3, Point(1.0, 1.0), subnetwork_id=1),\n    [\n        user_demand.Time(\n            demand=[0.0, 1.0, 1.2, 1.2],\n            return_factor=[0.0, 0.0, 0.0, 0.0],\n            min_level=[-1.0, -1.0, -1.0, -1.0],\n            priority=[1, 1, 2, 2],\n            time=2 * [\"2020-01-01\", \"2020-01-20\"],\n        )\n    ],\n)\n\nSetup the allocation:\n\nmodel.allocation = Allocation(use_allocation=True, timestep=86400)\n\nSetup the edges:\n\nmodel.edge.add(model.flow_boundary[1], model.basin[2], subnetwork_id=1)\nmodel.edge.add(model.basin[2], model.user_demand[3])\nmodel.edge.add(model.basin[2], model.linear_resistance[4])\nmodel.edge.add(model.linear_resistance[4], model.basin[5])\nmodel.edge.add(model.basin[5], model.user_demand[6])\nmodel.edge.add(model.basin[5], model.tabulated_rating_curve[7])\nmodel.edge.add(model.tabulated_rating_curve[7], model.fractional_flow[8])\nmodel.edge.add(model.user_demand[3], model.basin[2])\nmodel.edge.add(model.user_demand[6], model.basin[5])\nmodel.edge.add(model.tabulated_rating_curve[7], model.fractional_flow[9])\nmodel.edge.add(model.fractional_flow[8], model.terminal[10])\nmodel.edge.add(model.fractional_flow[9], model.basin[12])\nmodel.edge.add(model.basin[12], model.user_demand[13])\nmodel.edge.add(model.user_demand[13], model.terminal[10])\nmodel.edge.add(model.discrete_control[11], model.fractional_flow[8])\nmodel.edge.add(model.discrete_control[11], model.fractional_flow[9])\n\nLetâs take a look at the model:\n\nmodel.plot()\n\n\n\n\n\n\n\n\nWrite the model to a TOML and GeoPackage:\n\ndatadir = Path(\"data\")\nmodel.write(datadir / \"allocation_example/ribasim.toml\")\n\nPosixPath('data/allocation_example/ribasim.toml')\n\n\nNow run the model with ribasim allocation_example/ribasim.toml. After running the model, read back the results:\n\nimport matplotlib.ticker as plticker\n\ndf_allocation = pd.read_feather(datadir / \"allocation_example/results/allocation.arrow\")\ndf_allocation_wide = df_allocation.pivot_table(\n    index=\"time\",\n    columns=[\"node_type\", \"node_id\", \"priority\"],\n    values=[\"demand\", \"allocated\", \"realized\"],\n)\ndf_allocation_wide = df_allocation_wide.loc[:, (df_allocation_wide != 0).any(axis=0)]\n\nfig, axs = plt.subplots(1, 3, figsize=(8, 5))\n\ndf_allocation_wide[\"demand\"].plot(ax=axs[0], ls=\":\")\ndf_allocation_wide[\"allocated\"].plot(ax=axs[1], ls=\"--\")\ndf_allocation_wide.xs(1, level=\"priority\", axis=1)[\"realized\"].plot(\n    ax=axs[2], color=[\"C0\", \"C2\", \"C3\"]\n)\n\nfig.tight_layout()\nloc = plticker.MultipleLocator(2)\n\naxs[0].set_ylabel(\"level [m]\")\n\nfor ax, title in zip(axs, [\"Demand\", \"Allocated\", \"Abstracted\"]):\n    ax.set_title(title)\n    ax.set_ylim(0.0, 1.6)\n    ax.xaxis.set_major_locator(loc)\n\n\n\n\n\n\n\n\nSome things to note about this plot:\n\nThe realized flow at the start time is not correct, as there is no realized flow yet. The given value is how much of its total demand a user can abstract in the physical layer.\nNo flow was allocated to UserDemand 13 so that is not plotted.\nAbstraction is accumulated over all priorities per user.\n\n\ndf_basin = pd.read_feather(datadir / \"allocation_example/results/basin.arrow\")\ndf_basin_wide = df_basin.pivot_table(\n    index=\"time\", columns=\"node_id\", values=[\"storage\", \"level\"]\n)\n\nax = df_basin_wide[\"level\"].plot()\nax.set_title(\"Basin levels\")\nax.set_ylabel(\"level [m]\")\n\nText(0, 0.5, 'level [m]')\n\n\n\n\n\n\n\n\n\n\n\n5 Model with allocation (basin supply/demand)\nSetup a model:\n\nmodel = Model(starttime=\"2020-01-01\", endtime=\"2020-02-01\", crs=\"EPSG:4326\")\n\nSetup the basins:\n\nbasin_data = [\n    basin.Profile(area=[1e3, 1e3], level=[0.0, 1.0]),\n    basin.State(level=[0.5]),\n]\nmodel.basin.add(\n    Node(2, Point(1.0, 0.0), subnetwork_id=2),\n    [\n        *basin_data,\n        basin.Time(\n            time=[\"2020-01-01\", \"2020-01-16\"],\n            drainage=[0.0, 0.0],\n            potential_evaporation=[0.0, 0.0],\n            infiltration=[0.0, 0.0],\n            precipitation=[1e-6, 0.0],\n            urban_runoff=[0.0, 0.0],\n        ),\n    ],\n)\nmodel.basin.add(\n    Node(5, Point(2.0, -1.0), subnetwork_id=2),\n    [\n        *basin_data,\n        basin.Static(\n            drainage=[0.0],\n            potential_evaporation=[0.0],\n            infiltration=[0.0],\n            precipitation=[0.0],\n            urban_runoff=[0.0],\n        ),\n    ],\n)\n\nSetup the flow boundary:\n\nmodel.flow_boundary.add(\n    Node(1, Point(0.0, 0.0), subnetwork_id=2), [flow_boundary.Static(flow_rate=[1e-3])]\n)\n\nSetup level demand:\n\nmodel.level_demand.add(\n    Node(4, Point(1.0, -1.0), subnetwork_id=2),\n    [level_demand.Static(priority=[1], min_level=[1.0], max_level=[1.5])],\n)\n\nSetup the users:\n\nmodel.user_demand.add(\n    Node(3, Point(2.0, 0.0), subnetwork_id=2),\n    [\n        user_demand.Static(\n            priority=[2], demand=[1.5e-3], return_factor=[0.2], min_level=[0.2]\n        )\n    ],\n)\n\nSetup the allocation:\n\nmodel.allocation = Allocation(use_allocation=True, timestep=1e5)\n\nSetup the edges:\n\nmodel.edge.add(model.flow_boundary[1], model.basin[2], subnetwork_id=2)\nmodel.edge.add(model.basin[2], model.user_demand[3])\nmodel.edge.add(model.level_demand[4], model.basin[2])\nmodel.edge.add(model.user_demand[3], model.basin[5])\nmodel.edge.add(model.level_demand[4], model.basin[5])\n\nLetâs take a look at the model:\n\nmodel.plot()\n\n\n\n\n\n\n\n\nWrite the model to a TOML and GeoPackage:\n\nmodel.write(datadir / \"level_demand/ribasim.toml\")\n\nPosixPath('data/level_demand/ribasim.toml')\n\n\nNow run the model with ribasim level_demand/ribasim.toml. After running the model, read back the results:\n\ndf_basin = pd.read_feather(datadir / \"level_demand/results/basin.arrow\")\ndf_basin = df_basin[df_basin.node_id == 2]\ndf_basin_wide = df_basin.pivot_table(\n    index=\"time\", columns=\"node_id\", values=[\"storage\", \"level\"]\n)\nax = df_basin_wide[\"level\"].plot(ylabel=\"level [m]\")\n\n\n\n\n\n\n\n\nIn the plot above, the line denotes the level of Basin #2 over time. The Basin level is a piecewise linear function of time, with several stages explained below.\nConstants:\n\n\\(d\\): UserDemand #3 demand,\n\\(\\phi\\): Basin #2 precipitation rate,\n\\(q\\): LevelBoundary flow.\n\nStages:\n\nIn the first stage the Basin takes precedence so the UserDemand doesnât abstract, hence the net change of Basin #2 is \\(q + \\phi\\);\nIn the second stage (and following stages) the Basin no longer has a positive demand, since precipitation provides enough water to get the Basin to its target level. The FlowBoundary flow gets fully allocated to the UserDemand, hence the net change of Basin #2 is \\(\\phi\\);\nIn the third stage the Basin enters its surplus stage, even though initially the level is below the maximum level. This is because the simulation anticipates that the current precipitation is going to bring the Basin level over its maximum level. The net change of Basin #2 is now \\(q + \\phi - d\\);\nAt the start of the fourth stage the precipitation stops, and so the UserDemand partly uses surplus water from the Basin to fulfill its demand. The net change of Basin #2 becomes \\(q - d\\).\nIn the final stage the Basin is in a dynamical equilibrium, since the Basin has no supply so the user abstracts precisely the flow from the LevelBoundary.\n\n\n\n6 Guidance of modelling a cascade of polder basins\nSituation description: This example shows how to make a model for a given practical water system, which consists of a cascade of level control polder basins with inlet and outlet to the main systems. Note that alternative model layouts are feasible for the same water system, each having its positive items and drawbacks.\n\nThe polder system is composed of a sequence of level controlled polder basins with weirs inbetween each basin and an inlet and outlet to main system\n\nmodel = Model(starttime=\"2020-01-01\", endtime=\"2021-01-01\", crs=\"EPSG:28992\")\n\nAll the polder basins are exposed to time varying forcings (precipitation, evaporation, drainage, infiltration) to mimic situations of water excess and water shortage.\nIn case of water excess, a pump in the most downstream polder will need to pump the surplus water to the main water system. In case of water shortage, an inlet at the most upstream polder will need to bring water into the cascase of polders. The main water system acts as a water source.\nModel approach: All polder basins as well as the main water system are modelled with basin nodes. To let the system experience all 4 excess/shortage situation, forcing time series are made in a way that is adapting to them. Overall, assume that in one year, the system will experience precipitation (situation 1) in winter and early spring, precipitation shortage (situation 2) from late spring until early autumn. During situation 2, polder basin 4 will experience additional seepage (compoensating its shortage), and later polder basin 3 will also receive more seepage.\nSetting up the basins:\n\ntime = pd.date_range(model.starttime, model.endtime)\nday_of_year = time.day_of_year.to_numpy()\n\nprecipitation = np.zeros(day_of_year.size)\nprecipitation[0:90] = 1.72e-8\nprecipitation[330:366] = 1.72e-8\n\nevaporation = np.zeros(day_of_year.size)\nevaporation[130:270] = 2.87e-8\n\ndrainage = np.zeros(day_of_year.size)\ndrainage[120:270] = 0.4 * 2.87e-8\ndrainage_3 = drainage.copy()\ndrainage_3[210:240] = 17 * 2.87e-8\ndrainage_4 = drainage.copy()\ndrainage_4[160:240] = 13 * 2.87e-8\n\ninfiltration = np.zeros(day_of_year.size)\ninfiltration[0:90] = 5e-8\n\npolder_profile = basin.Profile(area=[100, 100], level=[0.0, 3.0])\n\nbasin_time = [\n    basin.Time(\n        time=pd.date_range(model.starttime, model.endtime),\n        drainage=drainage,\n        potential_evaporation=evaporation,\n        infiltration=0.0,\n        precipitation=precipitation,\n        urban_runoff=0.0,\n    ),\n]\n\nbasin_time4 = [\n    basin.Time(\n        time=pd.date_range(model.starttime, model.endtime),\n        drainage=drainage_4,\n        potential_evaporation=evaporation,\n        infiltration=0.0,\n        precipitation=precipitation,\n        urban_runoff=0.0,\n    ),\n]\nbasin_time3 = [\n    basin.Time(\n        time=pd.date_range(model.starttime, model.endtime),\n        drainage=drainage_3,\n        potential_evaporation=evaporation,\n        infiltration=0.0,\n        precipitation=precipitation,\n        urban_runoff=0.0,\n    ),\n]\n\nmodel.basin.add(\n    Node(1, Point(2.0, 0.0)),\n    [\n        basin.State(level=[2.5]),\n        basin.Profile(area=[1000, 1000], level=[0.0, 3.0]),\n        basin.Time(\n            time=pd.date_range(model.starttime, model.endtime),\n            drainage=0.0,\n            potential_evaporation=0.0,\n            infiltration=0.0,\n            precipitation=0.0,\n            urban_runoff=0.0,\n        ),\n    ],\n)\nmodel.basin.add(\n    Node(4, Point(0.0, -2.0)),\n    [basin.State(level=[1.5]), polder_profile, *basin_time],\n)\nmodel.basin.add(\n    Node(6, Point(0.0, -4.0)),\n    [basin.State(level=[1.0]), polder_profile, *basin_time],\n)\nmodel.basin.add(\n    Node(8, Point(2.0, -4.0)),\n    [basin.State(level=[1.5]), polder_profile, *basin_time3],\n)\nmodel.basin.add(\n    Node(10, Point(4.0, -4.0)),\n    [basin.State(level=[1.3]), polder_profile, *basin_time4],\n)\nmodel.basin.add(\n    Node(12, Point(4.0, -2.0)),\n    [basin.State(level=[0.1]), polder_profile, *basin_time],\n)\n\nAfter all the basins are defined the connecting component inbetween the basins needs to be determined. For polder basin 5 (node 12), the water level needs to be maintain at 0.0 meter. This means that either there should be no water in this basin, or the basin bottom is lower than the reference level, and the water level should be maintained at the reference level.\nSince the water level of the main system is at 2.5 meter above the reference level a pump is needed to remove the water from polder basin 5.\nSetup the pumps:\n\nmodel.pump.add(\n    Node(13, Point(4.0, -1.0)),\n    [pump.Static(flow_rate=[0.5 / 3600])],\n)\n\nAccording to the description of situation 1 and 2, the water in one polder basin needs to be able to flow to the downstream basin if the current basin has too much water (i.e.Â the water level is above the setpoint) or if the downstream basin is below setpoint and needs more water. This could be modelled with an uncontrolled TabulatedRatingCurve node with Q=0 at the setpoint level (and Q rising when the level rises above setpoint) , or with an Outlet node where the minimum crest is specified at or just below the setpoint. In this example, weâve chosen for the Outlet where we specify the minimum crest level 5 cm below the setpoint. For example: the Outlet of polder basin 1 (node 4) is specified with a minimum crest level of 1.95 meter.\nSetup the outlets:\n\n# Set up outlet\nmodel.outlet.add(\n    Node(2, Point(0.0, -1.0)),\n    [outlet.Static(flow_rate=[2 * 0.5 / 3600], min_crest_level=[0.0])],\n)\nmodel.outlet.add(\n    Node(5, Point(0.0, -3.0)),\n    [outlet.Static(flow_rate=[0.5 / 3600], min_crest_level=[1.95])],\n)\nmodel.outlet.add(\n    Node(7, Point(1.0, -4.0)),\n    [outlet.Static(flow_rate=[0.5 / 3600], min_crest_level=[1.45])],\n)\nmodel.outlet.add(\n    Node(9, Point(3.0, -4.0)),\n    [outlet.Static(flow_rate=[0.5 / 3600], min_crest_level=[0.95])],\n)\nmodel.outlet.add(\n    Node(11, Point(4.0, -3.0)),\n    [outlet.Static(flow_rate=[0.5 / 3600], min_crest_level=[0.45])],\n)\n\nWhen using Outlets as connecting nodes, the flow over the Outlet needs to be controlled to maintain the water level at the setpoint. For this purpose we introduce local PidControllers, where the targets of the PidControllers are set to the setpoints. Disadvantage of this local control approach is the delay that is introduced to transport the âbasin X has a shortageâ message upstream through the cascade to the inlet. Current functionality does not offer the capability for PidControl to take multiple observations into account when controlling the inlet. Combining multiple observations in one control is feasible with DiscreteControl. This could be an alternative approach to controlling the inlet for the cascading water system.\nSetup the PID control:\n\npid_control_data = {\n    \"listen_node_type\": \"Basin\",\n    \"proportional\": [0.05],\n    \"integral\": [0.00],\n    \"derivative\": [0.0],\n}\nmodel.pid_control.add(\n    Node(3, Point(-1.0, -1.0)),\n    [pid_control.Static(listen_node_id=[4], target=[2.0], **pid_control_data)],\n)\nmodel.pid_control.add(\n    Node(14, Point(-1.0, -3.0)),\n    [pid_control.Static(listen_node_id=[6], target=[1.5], **pid_control_data)],\n)\nmodel.pid_control.add(\n    Node(15, Point(1.0, -3.0)),\n    [pid_control.Static(listen_node_id=[8], target=[1.0], **pid_control_data)],\n)\nmodel.pid_control.add(\n    Node(16, Point(3.0, -3.0)),\n    [pid_control.Static(listen_node_id=[10], target=[0.5], **pid_control_data)],\n)\n\nSetup the edges:\n\nmodel.edge.add(model.basin[1], model.outlet[2])\nmodel.edge.add(model.pid_control[3], model.outlet[2])\nmodel.edge.add(model.outlet[2], model.basin[4])\nmodel.edge.add(model.basin[4], model.outlet[5])\nmodel.edge.add(model.outlet[5], model.basin[6])\nmodel.edge.add(model.basin[6], model.outlet[7])\nmodel.edge.add(model.outlet[7], model.basin[8])\nmodel.edge.add(model.basin[8], model.outlet[9])\nmodel.edge.add(model.outlet[9], model.basin[10])\nmodel.edge.add(model.basin[10], model.outlet[11])\nmodel.edge.add(model.outlet[11], model.basin[12])\nmodel.edge.add(model.basin[12], model.pump[13])\nmodel.edge.add(model.pump[13], model.basin[1])\nmodel.edge.add(model.pid_control[14], model.outlet[5])\nmodel.edge.add(model.pid_control[15], model.outlet[7])\nmodel.edge.add(model.pid_control[16], model.outlet[9])\n\nTo plot the model\n\nmodel.plot()\n\n\n\n\n\n\n\n\nWrite the model to a TOML file and run it in the Julia.\n\ndatadir = Path(\"data\")\nmodel.write(datadir / \"local_pidcontrolled_cascade/ribasim.toml\")\n\nPosixPath('data/local_pidcontrolled_cascade/ribasim.toml')\n\n\nAfter running the model, read back the result to plot the flow of each polder basin.\n\ndatadir_flow = datadir / \"local_pidcontrolled_cascade/results/flow.arrow\"\ndf_flow = pd.read_feather(datadir_flow)\ndf_flow[\"edge\"] = list(zip(df_flow.from_node_id, df_flow.to_node_id))\ndf_flow[\"flow_m3d\"] = df_flow.flow_rate * 86400\n\ndf_pivot = df_flow.pivot_table(index=\"time\", columns=\"edge\", values=\"flow_m3d\")\n\nBelow graphs show the flow exchanged with the mainsystem (i.e.Â the inlet and the pump), and the flow of weirs inbetween the polder basins.\n\ndf_input = df_pivot.loc[:, [(1, 2), (13, 1)]]\ndf_input.plot(ylim=[-1.0, 20.0])\ndf_weirs = df_pivot.loc[:, [(4, 5), (6, 7), (8, 9), (10, 11)]]\ndf_weirs.plot(ylim=[-1.0, 15.0])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBelow graph shows the vertical flux on each basin.\n\ndatadir_basin = datadir / \"local_pidcontrolled_cascade/results/basin.arrow\"\ndf_basin = pd.read_feather(datadir_basin)\ndf_basin[\"vertical_flux\"] = (\n    df_basin[\"precipitation\"]\n    - df_basin[\"evaporation\"]\n    + df_basin[\"drainage\"]\n    + df_basin[\"infiltration\"]\n)\ndf_basin_wide = df_basin.pivot_table(\n    index=\"time\", columns=\"node_id\", values=[\"storage\", \"level\", \"vertical_flux\"]\n)\ndf_basin_wide[\"vertical_flux\"].plot()\n\n\n\n\n\n\n\n\nIn the following graph, the water level of basins are shown. The five polder basins are given starting levels that are different from their setpoints. It can be observed that in the beginning, the water level are changing and approaching to the set points. Later when the water levels are stable, they will not be affected by the forcing.\n\ndf_basin_wide[\"level\"].plot()",
    "crumbs": [
      "How-to guides",
      "Examples"
    ]
  },
  {
    "objectID": "guide/coupling.html",
    "href": "guide/coupling.html",
    "title": "Coupling",
    "section": "",
    "text": "Ribasim can also be (online) coupled to other kernels with the help of iMOD Coupler. The corresponding documentation can be found within the iMOD Suite Documentation.\n\n\n\nRibasim can be offline coupled to Delwaq, the Deltares Water Quality model. Note that this functionality is still in active development.\n\n\n\n\n\nflowchart LR\n    Ribasim --&gt; Delwaq\n\n\n\n\n\n\n\n\nDelwaq can calculate the concentration of substances in Basin nodes over time, based on initial concentrations, and of FlowBoundary nodes. Ribasim exposes the Basin / concentration, Basin / concentration_state, FlowBoundary / concentration, and LevelBoundary / concentration tables to setup these substances and concentrations.\nWhen a Ribasim model ran with the above tables, one can use the utilities in the coupling/delwaq folder to generate the input required for Delwaq to run, as well as to parse the output from Delwaq into a Ribasim compatible format. For more information see the README.md in the same folder.",
    "crumbs": [
      "How-to guides",
      "Coupling"
    ]
  },
  {
    "objectID": "guide/coupling.html#imod",
    "href": "guide/coupling.html#imod",
    "title": "Coupling",
    "section": "",
    "text": "Ribasim can also be (online) coupled to other kernels with the help of iMOD Coupler. The corresponding documentation can be found within the iMOD Suite Documentation.",
    "crumbs": [
      "How-to guides",
      "Coupling"
    ]
  },
  {
    "objectID": "guide/coupling.html#water-quality",
    "href": "guide/coupling.html#water-quality",
    "title": "Coupling",
    "section": "",
    "text": "Ribasim can be offline coupled to Delwaq, the Deltares Water Quality model. Note that this functionality is still in active development.\n\n\n\n\n\nflowchart LR\n    Ribasim --&gt; Delwaq\n\n\n\n\n\n\n\n\nDelwaq can calculate the concentration of substances in Basin nodes over time, based on initial concentrations, and of FlowBoundary nodes. Ribasim exposes the Basin / concentration, Basin / concentration_state, FlowBoundary / concentration, and LevelBoundary / concentration tables to setup these substances and concentrations.\nWhen a Ribasim model ran with the above tables, one can use the utilities in the coupling/delwaq folder to generate the input required for Delwaq to run, as well as to parse the output from Delwaq into a Ribasim compatible format. For more information see the README.md in the same folder.",
    "crumbs": [
      "How-to guides",
      "Coupling"
    ]
  },
  {
    "objectID": "dev/bmi.html",
    "href": "dev/bmi.html",
    "title": "1 Basic Model Interface (BMI)",
    "section": "",
    "text": "For runtime data exchange and coupling with other kernels, the Julia kernel is wrapped in a Python API (ribasim_api) which implements the Basic Modelling Interface BMI.\n\n\nThe following functions are available to interact with the Ribasim modelâ\n\n\n\n\n\n\n\nsignature\ndescription\n\n\n\n\ninitialize(config_path)\nInitialize a model from the path to the TOML configuration file\n\n\nfinalize()\nWrite all results to the configured files\n\n\nget_current_time()\nGet the current time of the Ribasim simulation\n\n\nget_end_time()\nGet the final time of the Ribasim simulation in seconds\n\n\nget_start_time()\nGet the start time of the Ribasim simulation (0.0)\n\n\nget_time_step()\nGet the proposed next internal Ribasim timestep\n\n\nget_time_units()\nGet the time unit (s)\n\n\nget_value_ptr(string)\nGet the pointer to a Ribasim internal array (see below)\n\n\nupdate()\nPerform a Ribasim internal time step\n\n\nupdate_until(time)\nSet Ribasim internal timesteps until the specified time\n\n\n\nDepending on what is specified in the Ribasim TOML configuration file, Ribasim can internally have adaptive (non-constant) timesteps. update_until will always try to progress the Ribasim simulation to exactly the time specified. This however can fail for algorithms that only support a fixed timestep if that timestep does not fit into the interval until the specified time an integer amount of times.\n\n\n\nThe following pointers to memory containing Ribasim internal arrays are given via the BMI using get_value_ptr(string):\n\n\n\n\n\n\n\n\n\n\n\n\nstring\nmeaning\ntype\nunit\ntemporal type\nwritable\nsorted by\n\n\n\n\nbasin.storage\nstorage per basin\nFloat64\n\\(m^3\\)\ninstantaneous\nno\nbasin node ID\n\n\nbasin.level\nlevel per basin\nFloat64\n\\(m\\)\ninstantaneous\nno\nbasin node ID\n\n\nbasin.infiltration\ninfiltration flux per basin\nFloat64\n\\(m^3 s^{-1}\\)\nforward fill\nyes\nbasin node ID\n\n\nbasin.drainage\ndrainage flux per basin\nFloat64\n\\(m^3 s^{-1}\\)\nforward fill\nyes\nbasin node ID\n\n\nbasin.infiltration_integrated\ncumulative infiltration per basin\nFloat64\n\\(m^3\\)\nintegrated from start\nyes\nbasin node ID\n\n\nbasin.drainage_integrated\ncumulative drainage per basin\nFloat64\n\\(m^3\\)\nintegrated from start\nyes\nbasin node ID\n\n\nbasin.subgrid_level\nsubgrid level\nFloat64\n\\(m\\)\ninstantaneous\nno\nsubgrid ID\n\n\nuser_demand.demand\ndemand per node ID per priority\nFloat64\n\\(m^3 s^{-1}\\)\nforward fill\nyes\nuser_demand node ID, priority index\n\n\nuser_demand.realized\ncumulative intake flow per user\nFloat64\n\\(m^3\\)\nintegrated from start\nyes\nuser_demand node ID\n\n\n\nAdditional notes:\n\nuser_demand.demand yields the only 2D array, the other arrays are 1D. This array is indexed as (node_idx, priority_idx) in Julia, which stores arrays column-major\nThe index of e.g.Â basins and user demand nodes needs to be inferred from the Ribasim input. The same holds for priority_idx, which is global over all subnetworks\nThe data being writable means that Ribasim takes into account the possibility that the data is updated outiside the Ribasim core\nAlthough the *_integrated and *_realized data is writable, this doesnât affect the Ribasim simulation. This integrated data is only computed for the BMI, and can be set to \\(0\\) via the BMI to avoid accuracy problems when the values get too large.\nDifferent from what is exposed via the BMI, the basin forcings and realized user demands are averaged over the allocation timestep and saveat interval respectively.",
    "crumbs": [
      "Contributing",
      "Basic Model Interface (BMI)"
    ]
  },
  {
    "objectID": "dev/bmi.html#functions",
    "href": "dev/bmi.html#functions",
    "title": "1 Basic Model Interface (BMI)",
    "section": "",
    "text": "The following functions are available to interact with the Ribasim modelâ\n\n\n\n\n\n\n\nsignature\ndescription\n\n\n\n\ninitialize(config_path)\nInitialize a model from the path to the TOML configuration file\n\n\nfinalize()\nWrite all results to the configured files\n\n\nget_current_time()\nGet the current time of the Ribasim simulation\n\n\nget_end_time()\nGet the final time of the Ribasim simulation in seconds\n\n\nget_start_time()\nGet the start time of the Ribasim simulation (0.0)\n\n\nget_time_step()\nGet the proposed next internal Ribasim timestep\n\n\nget_time_units()\nGet the time unit (s)\n\n\nget_value_ptr(string)\nGet the pointer to a Ribasim internal array (see below)\n\n\nupdate()\nPerform a Ribasim internal time step\n\n\nupdate_until(time)\nSet Ribasim internal timesteps until the specified time\n\n\n\nDepending on what is specified in the Ribasim TOML configuration file, Ribasim can internally have adaptive (non-constant) timesteps. update_until will always try to progress the Ribasim simulation to exactly the time specified. This however can fail for algorithms that only support a fixed timestep if that timestep does not fit into the interval until the specified time an integer amount of times.",
    "crumbs": [
      "Contributing",
      "Basic Model Interface (BMI)"
    ]
  },
  {
    "objectID": "dev/bmi.html#memory-pointers",
    "href": "dev/bmi.html#memory-pointers",
    "title": "1 Basic Model Interface (BMI)",
    "section": "",
    "text": "The following pointers to memory containing Ribasim internal arrays are given via the BMI using get_value_ptr(string):\n\n\n\n\n\n\n\n\n\n\n\n\nstring\nmeaning\ntype\nunit\ntemporal type\nwritable\nsorted by\n\n\n\n\nbasin.storage\nstorage per basin\nFloat64\n\\(m^3\\)\ninstantaneous\nno\nbasin node ID\n\n\nbasin.level\nlevel per basin\nFloat64\n\\(m\\)\ninstantaneous\nno\nbasin node ID\n\n\nbasin.infiltration\ninfiltration flux per basin\nFloat64\n\\(m^3 s^{-1}\\)\nforward fill\nyes\nbasin node ID\n\n\nbasin.drainage\ndrainage flux per basin\nFloat64\n\\(m^3 s^{-1}\\)\nforward fill\nyes\nbasin node ID\n\n\nbasin.infiltration_integrated\ncumulative infiltration per basin\nFloat64\n\\(m^3\\)\nintegrated from start\nyes\nbasin node ID\n\n\nbasin.drainage_integrated\ncumulative drainage per basin\nFloat64\n\\(m^3\\)\nintegrated from start\nyes\nbasin node ID\n\n\nbasin.subgrid_level\nsubgrid level\nFloat64\n\\(m\\)\ninstantaneous\nno\nsubgrid ID\n\n\nuser_demand.demand\ndemand per node ID per priority\nFloat64\n\\(m^3 s^{-1}\\)\nforward fill\nyes\nuser_demand node ID, priority index\n\n\nuser_demand.realized\ncumulative intake flow per user\nFloat64\n\\(m^3\\)\nintegrated from start\nyes\nuser_demand node ID\n\n\n\nAdditional notes:\n\nuser_demand.demand yields the only 2D array, the other arrays are 1D. This array is indexed as (node_idx, priority_idx) in Julia, which stores arrays column-major\nThe index of e.g.Â basins and user demand nodes needs to be inferred from the Ribasim input. The same holds for priority_idx, which is global over all subnetworks\nThe data being writable means that Ribasim takes into account the possibility that the data is updated outiside the Ribasim core\nAlthough the *_integrated and *_realized data is writable, this doesnât affect the Ribasim simulation. This integrated data is only computed for the BMI, and can be set to \\(0\\) via the BMI to avoid accuracy problems when the values get too large.\nDifferent from what is exposed via the BMI, the basin forcings and realized user demands are averaged over the allocation timestep and saveat interval respectively.",
    "crumbs": [
      "Contributing",
      "Basic Model Interface (BMI)"
    ]
  },
  {
    "objectID": "dev/qgis.html",
    "href": "dev/qgis.html",
    "title": "QGIS plugin development",
    "section": "",
    "text": "1 Set up the developer environment\nAfter you have installed the environment as described here you must still activate the QGIS plugins. The simplest way to do this is by running pixi run install-qgis-plugins. It grabs the latest version of the iMOD QGIS plugin and it makes a symlink to the ribasim_qgis folder so that QGIS can find it. It also installs plugins that make it possible to reload and debug your plugin while QGIS is open.\n\n\n\n\n\n\nNote\n\n\n\nOn Windows you need to have Developer mode enabled. Otherwise you will not have enough access rights to create symlinks. For more info, see this Windows blog.\nWe wanted to implement this via pip install --editable, but QGIS doesnât find the metadata.txt and therefore cannot load the plugin on startup.\n\n\n\n\n2 Running QGIS\nIn order to run QGIS with the plugins, simply call pixi run qgis. You will find the Ribasim and iMOD plugins in the tool bars.\n\n\n\n\n\n\nNote\n\n\n\nOn Windows, running QGIS from the start menu will disable Python, and thus the plugins. QGIS needs some more paths during the startup and the Pixi environment provides those.\n\n\n\n\n3 Running tests\nTo run the QGIS plugin tests in the application environment of QGIS, it is best to make use of the Docker environment provided in this repository. Make sure that docker is installed and available in your path.\nThen simply call pixi run test-ribasim-qgis.\n\n\n4 Debugging\nAfter installing the plugins via pixi run install-qgis-plugins. Extra debugging tools are also installed in QGIS that is installed within your pixi environment.\nAfter you have started pixi run qgis, you can make alterations to the Python code and use the Plugin Reloader to reload the plugin without restarting QGIS. The shortcut in QGIS is CTRL+F5.\nIt is also possible to connect the debugger of Visual Studio Code. For this the debugvs plugin is installed in QGIS. In QGIS press the button to Enable Debug for Visual Studio. Then go to Visual Studio Code and start the launch task Ribasim QGIS: Attach to QGIS. Now you can place breakpoints.\n\n\n\n\n\n\nNote\n\n\n\nWe are currently using debugvs 0.7 with ptvsd as service, since there is an open issue that breaks debugvs 0.8 with debugpy.",
    "crumbs": [
      "Contributing",
      "QGIS plugin development"
    ]
  },
  {
    "objectID": "dev/core.html",
    "href": "dev/core.html",
    "title": "Julia core development",
    "section": "",
    "text": "The computational core is one of the components of Ribasim as illustrated in the component overview.\nThe computational process can be divided in three phases:\n\nModel initialization\nRunning the simulation loop\nWriting the output files\n\nA more detailed sequence diagram of the simulation loop is available at the core home page.",
    "crumbs": [
      "Contributing",
      "Julia core development"
    ]
  },
  {
    "objectID": "dev/core.html#install-optional-julia-libraries",
    "href": "dev/core.html#install-optional-julia-libraries",
    "title": "Julia core development",
    "section": "2.1 Install optional Julia libraries",
    "text": "2.1 Install optional Julia libraries\nStart the Julia REPL by executing pixi run julia in your terminal. Within the REPL type ] to enter the Pkg REPL. For more information on how to use Pkg, see the Getting Started page in its documentation. There you can add Revise to your global environment.\npkg&gt; add Revise",
    "crumbs": [
      "Contributing",
      "Julia core development"
    ]
  },
  {
    "objectID": "dev/core.html#setup-revise.jl",
    "href": "dev/core.html#setup-revise.jl",
    "title": "Julia core development",
    "section": "2.2 Setup Revise.jl",
    "text": "2.2 Setup Revise.jl\nRevise.jl is a library that allows you to modify code and use the changes without restarting Julia. You can let it start automatically by following these instructions.",
    "crumbs": [
      "Contributing",
      "Julia core development"
    ]
  },
  {
    "objectID": "dev/core.html#install-visual-studio-code-optional",
    "href": "dev/core.html#install-visual-studio-code-optional",
    "title": "Julia core development",
    "section": "2.3 Install Visual Studio Code (optional)",
    "text": "2.3 Install Visual Studio Code (optional)\nThere is a section on editors and IDEs for Julia on https://julialang.org/, scroll down to see it. We use and recommend Microsoftâs free editor Visual Studio Code. When combined with the Julia extension it provides a powerful and interactive development experience. Make sure to have the correct environment when opening your IDE by running open-vscode.bat, or opening a pixi shell and then calling the command to open the editor of your choice.",
    "crumbs": [
      "Contributing",
      "Julia core development"
    ]
  },
  {
    "objectID": "dev/core.html#sec-test",
    "href": "dev/core.html#sec-test",
    "title": "Julia core development",
    "section": "3.1 Running tests",
    "text": "3.1 Running tests\nYou will want to run the testsuite on a regular basis to check if your changes had unexpected side effects. It is also a good way to find out if your development environment is set up correctly.\nBefore the tests can run, you need to prepare model input.\nWith the root of the repository as your working directory you can start the REPL with activated root environment by running the following:\njulia --project\nWhile not technically required, it is advised to import Ribasim first to catch installation issues early on.\njulia&gt; using Ribasim\nThen open the Pkg REPL by typing ] and execute:\npkg&gt; test Ribasim\nIn order to debug tests, you can run individual test items from Visual Studio Code. Click the green play icon in front of a test item, as show in the image below. The first run will be slow.",
    "crumbs": [
      "Contributing",
      "Julia core development"
    ]
  },
  {
    "objectID": "dev/core.html#render-documentation",
    "href": "dev/core.html#render-documentation",
    "title": "Julia core development",
    "section": "3.2 Render documentation",
    "text": "3.2 Render documentation\nExample models are created and simulated as part of the rendering of the documentation.\nIn order to preview documentation you can run the following command from the docs/ folder. Afterwards, a browser tab will open with the rendered documentation, updating it as you make changes.\npixi run quarto-preview\nThe documentation also includes Jupyter notebooks. Note that they are stored in the repository without any output, and this should stay this way to keep the repository small. The documentation rendering process adds the output by running the notebooks.\n\n\n\n\n\n\nTip\n\n\n\nThe Jupyter VS Code extension allows you to run Jupyter notebooks directly in VS Code.",
    "crumbs": [
      "Contributing",
      "Julia core development"
    ]
  },
  {
    "objectID": "dev/core.html#run-ribasim-simulations",
    "href": "dev/core.html#run-ribasim-simulations",
    "title": "Julia core development",
    "section": "3.3 Run Ribasim simulations",
    "text": "3.3 Run Ribasim simulations\nAssuming your working directory is the root of the repository, you can activate this project by entering the Pkg mode of the REPL with ] and execute:\npkg&gt; activate .\npkg&gt; instantiate\nPress backspace to go back to the Julia REPL. There you can run a model with:\njulia&gt; Ribasim.run(\"path/to/model/ribasim.toml\")\n\n\n\n\n\n\nTip\n\n\n\nThe Julia VS Code extension allows you to execute code cells in REPL. This is a very convenient way of executing only parts of your source file.",
    "crumbs": [
      "Contributing",
      "Julia core development"
    ]
  },
  {
    "objectID": "dev/core.html#build-ribasim",
    "href": "dev/core.html#build-ribasim",
    "title": "Julia core development",
    "section": "3.4 Build Ribasim",
    "text": "3.4 Build Ribasim\nThe Ribasim core can be built into an executable with a command line interface (CLI) and a shared library, libribasim. These products will run without a Julia installation. To create both these products at once, run:\npixi run build\nTo verify that the build was successful, you can run both these commands.\npixi run test-ribasim-api\npixi run test-ribasim-cli\nDuring development these steps are normally done on TeamCity, though in some cases it can be more convenient to build locally.",
    "crumbs": [
      "Contributing",
      "Julia core development"
    ]
  },
  {
    "objectID": "dev/addnode.html",
    "href": "dev/addnode.html",
    "title": "Adding node types",
    "section": "",
    "text": "Several parts of the code have to be made aware of the new node type. In the rest of this page we shall call our new node type NewNodeType.",
    "crumbs": [
      "Contributing",
      "Adding node types"
    ]
  },
  {
    "objectID": "dev/addnode.html#parameters",
    "href": "dev/addnode.html#parameters",
    "title": "Adding node types",
    "section": "1.1 Parameters",
    "text": "1.1 Parameters\nThe parameters object (defined in parameter.jl) passed to the ODE solver must be made aware of the new node type. Therefore define a struct in parameter.jl which holds the data for each node of the new node type:\nstruct NewNodeType &lt;: AbstractParameterNode\n    node_id::Vector{NodeID}\n    # Other fields\nend\nAnother abstract type which subtypes from AbstractParameterNode is called AbstractDemandNode. For creating new node type used in allocation, define a struct:\nstruct NewNodeType &lt;: AbstractDemandNode\n    node_id::Vector{NodeID}\n    # Other fields\nend\nThese fields do not have to correspond 1:1 with the input tables (see below). The vector with all node IDs that are of the new type in a given model is a mandatory field. Now you can:\n\nAdd new_node_type::NewNodeType to the Parameters object;\nAdd new_node_type = NewNodeType(db,config) to the function Parameters in read.jl and add new_node_type at the proper location in the Parameters constructor call.",
    "crumbs": [
      "Contributing",
      "Adding node types"
    ]
  },
  {
    "objectID": "dev/addnode.html#reading-from-configuration",
    "href": "dev/addnode.html#reading-from-configuration",
    "title": "Adding node types",
    "section": "1.2 Reading from configuration",
    "text": "1.2 Reading from configuration\nThere can be several schemas associated with a single node type. To define a schema for the new node type, add the following to schema.jl:\n@schema \"ribasim.newnodetype.static\" NewNodeTypeStatic\n\n\"\"\"\nnode_id: node ID of the NewNodeType node\n\"\"\"\n@version NewNodeTypeStaticV1 begin\n    node_id::Int32\n    # Other fields\nend\nHere static refers to data that does not change over time. For naming conventions of these schemas see Node usage. If a new schema contains a priority column for allocation, it must also be added to the list of all such schemas in the function get_all_priorities in util.jl.\nvalidation.jl deals with checking and applying a specific sorting order for the tabular data (default is sorting by node ID only), see sort_by_function and sorted_table!.\nNow we define the function that is called in the second bullet above, in read.jl:\nfunction NewNodeType(db::DB, config::Config)::NewNodeType\n    static = load_structvector(db, config, NewNodeTypeStaticV1)\n    defaults = (; foo = 1, bar = false)\n    # Process potential control states in the static data\n    parsed_parameters, valid = parse_static_and_time(db, config, \"NewNodeType\"; static, defaults)\n\n    if !valid\n        error(\"Errors occurred when parsing NewNodeType data.\")\n    end\n\n    # Unpack the fields of static as inputs for the NewNodeType constructor\n    return NewNodeType(\n        NodeID.(NodeType.NewNodeType, parsed_parameters.node_id),\n        parsed_parameters.some_property,\n        parsed_parameters.control_mapping)\nend",
    "crumbs": [
      "Contributing",
      "Adding node types"
    ]
  },
  {
    "objectID": "dev/addnode.html#node-behavior",
    "href": "dev/addnode.html#node-behavior",
    "title": "Adding node types",
    "section": "1.3 Node behavior",
    "text": "1.3 Node behavior\nIn general if the new node type dictates flow, the behavior of the new node in the Ribasim core is defined in a method of the formulate_flow! function, which is called within the water_balance! (both in solve.jl) function being the right hand side of the system of differential equations solved by Ribasim. Here the details depend highly on the specifics of the node type. An example structure of a formulate_flow! method is given below.\nfunction formulate_flow!(new_node_type::NewNodeType, p::Parameters)::Nothing\n    # Retrieve relevant parameters\n    (; graph) = p\n    (; node_id, param_1, param_2) = new_node_type\n\n    # Loop over nodes of NewNodeType\n    for (i, id) in enumerate(node_id)\n        # compute e.g. flow based on param_1[i], param_2[i]\n    end\n\n    return nothing\nend\nIf the new node type is non-conservative, meaning it either adds or removes water from the model, these boundary flows also need to be recorded. This is done by storing it on the diagonal of the flow[from, to] matrix, e.g.Â flow[id, id] = q, where q is positive for water added to the model. Non-conservative node types need to be added to the nonconservative_nodetypes set such that this diagonal is set to a nonzero on creating the flow sparse matrix in the Connectivity constructor.",
    "crumbs": [
      "Contributing",
      "Adding node types"
    ]
  },
  {
    "objectID": "dev/addnode.html#the-jacobian",
    "href": "dev/addnode.html#the-jacobian",
    "title": "Adding node types",
    "section": "1.4 The Jacobian",
    "text": "1.4 The Jacobian\nSee Equations for a mathematical description of the Jacobian.\nBefore the Julia core runs its simulation, the sparsity structure jac_prototype of \\(J\\) is determined with get_jac_prototype in sparsity.jl. This function runs trough all node types and looks for nodes that create dependencies between states. It creates a sparse matrix of zeros and ones, where the ones denote locations of possible non-zeros in \\(J\\). Note that only nodes that set flows in the physical layer (or have their own state like PidControl) affect the sparsity structure.\nWe divide the various node types in groups based on what type of state dependencies they yield, and these groups are discussed below. Each group has its own method update_jac_prototype! in utils.jl for the sparsity structure induced by nodes of that group. NewNodeType should be added to the signature of one these methods, or to the list of node types that do not contribute to the Jacobian in the method of update_jac_prototype! whose signature contains node::AbstractParameterNode. Of course it is also possible that a new method of update_jac_prototype! has to be introduced.\nThe current dependency groups are:\n\nOut-neighbor dependencies: examples are TabulatedRatingCurve, Pump (the latter only in the reduction factor regime and not PID controlled). If the in-neighbor of a node of this group is a basin, then the storage of this basin affects itself and the storage of the outneighbor (or the basin one node further if it is connected with a FractionalFlow in between) if that is also a basin;\nEither-neighbor dependencies: examples are LinearResistance, ManningResistance. If either the in-neighbor or out-neighbor of a node of this group is a basin, the storage of this basin depends on itself. If both the in-neighbor and the out-neighbor are basins, their storages also depend on eachother.\nThe PidControl node is a special case which is discussed in the PID equations.\n\nUsing jac_prototype the Jacobian of water_balance! is computed automatically using ForwardDiff.jl with memory management provided by PreallocationTools.jl. These computations make use of DiffCache and dual numbers.",
    "crumbs": [
      "Contributing",
      "Adding node types"
    ]
  },
  {
    "objectID": "dev/addnode.html#python-class",
    "href": "dev/addnode.html#python-class",
    "title": "Adding node types",
    "section": "2.1 Python class",
    "text": "2.1 Python class\nIn python/ribasim/ribasim/config.py add\n\nthe above defined schemas to the imports from ribasim.schemas. This requires code generation to work, see Finishing up;\na class of the following form with all schemas associated with the node type:\n\nclass NewNodeType(NodeModel):\n    static: TableModel[NewNodeTypeStaticSchema] = Field(\n        default_factory=TableModel[NewNodeTypeStaticSchema],\n        json_schema_extra={\"sort_keys\": [\"node_id\"]},\n    )\nIn python/ribasim/ribasim/__init__.py add\n\nNewNodeType to the imports from ribasim.config;\n\"NewNodeType\" to __all__.\n\nIn python/ribasim/ribasim/model.py, add\n\nNewNodeType to the imports from ribasim.config;\nnew_node_type as a parameter and in the docstring of the Model class.\n\nIn python/ribasim/ribasim/geometry/node.py add a color and shape description in the MARKERS and COLORS dictionaries.",
    "crumbs": [
      "Contributing",
      "Adding node types"
    ]
  },
  {
    "objectID": "concept/concept.html",
    "href": "concept/concept.html",
    "title": "Introduction",
    "section": "",
    "text": "Decision makers need to balance the supply and demand of water at the river basin scale, under increasing environmental pressure. Ribasim allows users to model basins under current and changing conditions to evaluate and design and management of the water system. It is available as free and open source software under the MIT license. Besides a model simulation core, Ribasim also includes tooling to assist in building models from basic datasets and visualize results. The model and its results provides insights to decision makers, enabling them to build consensus amongst water users and make informed decisions about how to manage water resources optimally.\nThe model concept of Ribasim is composed of multiple layers: - a physical layer representing water bodies and associated infrastructure as well as abstractions, - a rule-based control layer to manage the infrastructure, and - (optionally) a priority-based allocation layer to take centralized decisions on user abstractions. - (optionally) a coupling layer to exchange fluxes and heads with other kernels\nTypically hydrological processes on land will be represented in detail by other models which can be coupled (online) to Ribasim with the help of iMOD Coupler. Currently, an online coupling with MODFLOW 6 (groundwater) and with Metaswap + MODFLOW 6 (unsaturated zone + groundwater) is available. The corresponding documentation can be found within the iMOD Suite Documentation.\nThis version of Ribasim is the follow up of the legacy Fortran kernel of Ribasim (version 7) applied world wide, the Fortran kernel SIMRES applied in the Netherlands, and the surface water models Distribution Model and Mozart of the Dutch National Hydrological Instrument.",
    "crumbs": [
      "Concepts",
      "Introduction"
    ]
  },
  {
    "objectID": "concept/concept.html#sec-physical",
    "href": "concept/concept.html#sec-physical",
    "title": "Introduction",
    "section": "2.1 Physical layer",
    "text": "2.1 Physical layer\nTo represent the physical characteristics of the water system in an area, Ribasim allows you to divide the area into a network of connected representative elementary watersheds (Reggiani, Sivapalan, and Majid Hassanizadeh 1998). Within Ribasim, these elements are called basins, which are essentially buckets or reservoirs holding an aggregated volume of water bodies in an area. Basins are chained in a graph with connector nodes determining the exchange of water between the basins. These connector nodes can represent open water connections (e.g.Â bifurcations or resistance in a free flowing open water channel) or infrastructure elements such as pumps, gates or weirs. An overview of node types and associated data inputs is provided on the usage page, while the associated mathematical formations are described on the equations page.",
    "crumbs": [
      "Concepts",
      "Introduction"
    ]
  },
  {
    "objectID": "concept/concept.html#sec-control",
    "href": "concept/concept.html#sec-control",
    "title": "Introduction",
    "section": "2.2 Control layer",
    "text": "2.2 Control layer\nInfrastructure elements are often controlled by humans to implement a certain water management strategy. Ribasim allows the configuration of conditional rules to influence the exchange of water between basins, either by setting inflow or outflow, or by controlling a water level. Control rules evaluate one or multiple conditions to change a parameter setting of an infrastructure element when the conditional criteria are met. Conditions can be either calculated values within the network as well as boundary conditions or (todo) external observations, i.e.Â observation values external to the model. An overview of node types and associated data inputs is provided on the usage page, while the associated mathematical formations are described on the equations page.",
    "crumbs": [
      "Concepts",
      "Introduction"
    ]
  },
  {
    "objectID": "concept/concept.html#sec-allocation",
    "href": "concept/concept.html#sec-allocation",
    "title": "Introduction",
    "section": "2.3 Allocation layer",
    "text": "2.3 Allocation layer\nRibasim allows water users (water demands) to abstract water from the basins (i.e.Â from the physical layer) unless the water level drops below a minimum level. Under dry conditions, water managers may want to prioritize some abstractions over other abstractions. The Ribasim allocation layer can take care of this prioritization by reducing the abstraction rates of lower-priority demands to ensure that sufficient water remains available in the system for the higher-priority demands. The associated mathematical formulations are described on the allocation page. In case of large networks, a subdivision in a main network with subnetworks is recommended. For more details see the explanation of the simulation loop.\nThe layers and the main components and dataflows between the layers are shown in the next figure:\n\n\n\n\n\nflowchart TB\nphysical:::layer\nrbc:::layer\nallocation:::layer\nuser_demand\nbasin\nconnector[basin connector]\ncontrol[control rules]\ncondition\nalloc[global allocation]\n\nsubgraph physical[physical layer]\n    user_demand--&gt;|abstraction| basin\n    basin&lt;--&gt;|flow| connector\nend\n\nsubgraph rbc[rule based control layer]\n   condition --&gt; control\nend\n\nsubgraph allocation[allocation layer]\n    alloc\nend\n\nuser_demand--&gt;|request demand| alloc\nalloc--&gt;|assign allocation| user_demand\nbasin--&gt;|volume| alloc\nbasin --&gt; |volume or level| condition\nalloc --&gt; |optional flow update| control\ncontrol --&gt; |action| connector\n\n%% class definitions for C4 model\nclassDef layer fill:transparent,stroke-dasharray:5 5",
    "crumbs": [
      "Concepts",
      "Introduction"
    ]
  },
  {
    "objectID": "concept/modelconcept.html",
    "href": "concept/modelconcept.html",
    "title": "Model concept",
    "section": "",
    "text": "A brief summary of the concept is given introduction. As indicated, the model concept is organized in three layers:",
    "crumbs": [
      "Concepts",
      "Numerics",
      "Model concept"
    ]
  },
  {
    "objectID": "concept/modelconcept.html#water-balance-equations",
    "href": "concept/modelconcept.html#water-balance-equations",
    "title": "Model concept",
    "section": "1.1 Water balance equations",
    "text": "1.1 Water balance equations\nThe water balance equation for a drainage basin (Wikipedia contributors 2022) can be defined by a first-order ordinary differential equation (ODE), where the change of the storage \\(S\\) over time is determined by the inflow fluxes minus the outflow fluxes.\n\\[\n\\frac{\\mathrm{d}S}{\\mathrm{d}t} = Q_{in} - Q_{out}\n\\]\nWe can split out the fluxes into separate terms, such as precipitation \\(P\\), evapotranspiration \\(ET\\) and runoff \\(R\\). For now other fluxes are combined into \\(Q_{rest}\\). If we define all fluxes entering our reservoir as positive, and those leaving the system as negative, all fluxes can be summed up.\n\\[\n\\frac{\\mathrm{d}S}{\\mathrm{d}t} = R + P + ET + Q_{rest}\n\\]",
    "crumbs": [
      "Concepts",
      "Numerics",
      "Model concept"
    ]
  },
  {
    "objectID": "concept/modelconcept.html#time",
    "href": "concept/modelconcept.html#time",
    "title": "Model concept",
    "section": "1.2 Time",
    "text": "1.2 Time\nThe water balance equation can be applied on many timescales; years, weeks, days or hours. Depending on the application and available data any of these can be the best choice. In Ribasim, we make use of DifferentialEquations.jl and its ODE solvers. Many of these solvers are based on adaptive time stepping, which means the solver will decide how large the time steps can be depending on the state of the system.\nThe forcing, like precipitation, is generally provided as a time series. Ribasim is set up to support unevenly spaced timeseries. The solver will stop on timestamps where new forcing values are available, so they can be loaded as the new value.\nRibasim is essentially a continuous model, rather than daily or hourly. If you want to use hourly forcing, you only need to make sure that your forcing data contains hourly updates. The output frequency can be configured independently. To be able to write a closed water balance, we accumulate the fluxes. This way any variations in between timesteps are also included, and we can output in mÂ³ rather than mÂ³sâ»Â¹.",
    "crumbs": [
      "Concepts",
      "Numerics",
      "Model concept"
    ]
  },
  {
    "objectID": "concept/modelconcept.html#sec-space",
    "href": "concept/modelconcept.html#sec-space",
    "title": "Model concept",
    "section": "1.3 Space",
    "text": "1.3 Space\nThe water balance equation can be applied on different spatial scales. Besides modelling a single lumped watershed, it allows you to divide the area into a network of connected representative elementary watersheds (REWs) (Reggiani, Sivapalan, and Majid Hassanizadeh 1998). At this scale global water balance laws can be formulated by means of integration of point-scale conservation equations over control volumes. Such an approach makes Ribasim a semi-distributed model. In this document we typically use the term âbasinâ to refer to the REW. Each basin has an associated polygon, and the set of basins is connected to each other as described by a graph, which we call the network. Below is a representation of both on the map.\n\n\n\nMozart Local Surface Water polygons and their drainage.\n\n\nThe network is described as graph. Flow can be bi-directional, and the graph does not have to be acyclic.\n\n\n\n\n\ngraph LR;\n    A[\"basin A\"] --- B[\"basin B\"];\n    A --- C[\"basin C\"];\n    B --- D[\"basin D\"];\n    C --- D;\n\n\n\n\n\n\nInternally a directed graph is used. The direction is defined to be the positive flow direction, and is generally set in the dominant flow direction. The basins are the nodes of the network graph. Basin states and properties such storage volume and wetted area are associated with the nodes (A, B, C, D), as are most forcing data such as precipitation, evaporation, or water demand. Basin connection properties and interbasin flows are associated with the edges (the lines between A, B, C, and D) instead.\nMultiple basins may exist within the same spatial polygon, representing different aspects of the surface water system (perennial ditches, ephemeral ditches, or even surface ponding). FigureÂ 1, FigureÂ 2, FigureÂ 3 show the 25.0 m rasterized primary, secondary, and tertiary surface waters as identified by BRT TOP10NL (PDOK 2022) in the Hupsel basin. These systems may represented in multiple ways.\n\n\n\n\n\n\nFigureÂ 1: Hupsel: primary surface water.\n\n\n\n\n\n\n\n\n\nFigureÂ 2: Hupsel: secondary surface water.\n\n\n\n\n\n\n\n\n\nFigureÂ 3: Hupsel: tertiary surface water.\n\n\n\nAs a single basin (A) containing all surface water, discharging to its downstream basin to the west (B):\n\n\n\n\n\ngraph LR;\n    A[\"basin A\"] --&gt; B[\"basin B\"];\n\n\n\n\n\n\nSuch a system may be capable of representing discharge, but it cannot represent residence times or differences in solute concentrations: within a single basin, a drop of water is mixed instantaneously. Instead, we may the group primary (P), secondary (S), and tertiary (T) surface waters. Then T may flow into S, S into P, and P discharges to the downstream basin (B.)\n\n\n\n\n\ngraph LR;\n    T[\"basin T\"] --&gt; S[\"basin S\"];\n    S --&gt; P[\"basin P\"];\n    P --&gt; B[\"basin B\"];\n\n\n\n\n\n\nAs each (sub)basin has its own volume, low throughput (high volume, low discharge, long residence time) and high throughput (low volume, high discharge, short residence time) systems can be represented in a lumped manner; of course, more detail requires more parameters.",
    "crumbs": [
      "Concepts",
      "Numerics",
      "Model concept"
    ]
  },
  {
    "objectID": "concept/modelconcept.html#structures-in-a-water-system",
    "href": "concept/modelconcept.html#structures-in-a-water-system",
    "title": "Model concept",
    "section": "1.4 Structures in a water system",
    "text": "1.4 Structures in a water system\nIn addition to free flowing waterbodies, a watersystem typically has structures to control the flow of water. Ribasim uses connector nodes which simplify the hydraulic behavior for the free flowing conditions or structures. The following type of connector nodes are available for this purpose:\n\nTabulatedRatingCurve: one-directional flow based on upstream head. Node type typically used for gravity flow conditions either free flowing open water channels or over a fixed structure.\nLinearResistance: bi-directional flow based on head difference and linear resistance. Node type typically used for bi-directional flow situations or situations where head difference over a structure determines its actual flow capacity.\nManningResistance: bi-directional flow based on head difference and resistance using Manning-Gauckler formula. Same usage as LinearResistance, providing a better hydrological meaning to the resistance parameterization.\nPump: one-directional structure with a set flow rate. Node type typically used in combination with control to force water over the edge.\nOutlet: one-directional gravity structure with a set flow rate. Node type typically used in combination with control to force water over the edge, even if their is a mismatch in actual hydraulic capacity. The node type has an automated mechanism to stop the flow when the head difference is zero.\nFractionalFlow: to split an outflow over multiple edges based on a flow fraction. Node type is typically used for diversions or bifurcations with a known and fixed ratio.\n\nThe control layer can activate or deactivate nodes, set flow rates for the Pump and Outlet, or choose different parameterizations for TabulatedRatingCurve, LinearResistance, ManningResistance or FractionalFlow.\nConnector nodes are required within a Ribasim network to determine the flow exchange between basins.",
    "crumbs": [
      "Concepts",
      "Numerics",
      "Model concept"
    ]
  },
  {
    "objectID": "concept/core.html",
    "href": "concept/core.html",
    "title": "Julia core",
    "section": "",
    "text": "With the term âcoreâ, we mean the computational engine of Ribasim. As detailed in the usage documentation, it is generally used as a command line tool.\nA quick overview of the model concept is available in the introduction, while a more in depth discussion is available on the model concept page. The theory is described on the equations page, and more in-depth numerical considerations are described on the numerical considerations page. As allocation is a large and self-contained part of the Ribasim core, it is described on the separate allocation page. Input validation is described on the validation page.\nThe core is implemented in the Julia programming language, and can be found in the Ribasim repository under the core/ folder. For developers we also advise to read the developer documentation. Information on coupling can be found here.\nAn overview of all components is given in the Get Started section.\n\n1 The simulation loop\nThe computational process can be divided in three phases:\n\nModel initialization\nRunning the simulation loop\nWriting the output files\n\nThe figure below gives a more detailed description of the simulation loop in the form of a sequence diagram. From top to bottom, it contains the following blocks:\n\nAllocation optimization; activated when the allocation timestep has been passed;\nControl actions; activated when some discrete control callback is triggered;\nWater balance; computing the flows over flow edges happens each timestep;\nTime integration step; done by the integrator from OrdinaryDiffEq.jl.\n\n\n\n\n\n\nsequenceDiagram\n    autonumber\n    participant Int as Process: Integrator\n    participant Optim as Process: Allocation optimization\n    participant Param as Data: Parameters\n    participant State as Data: State\n    participant Sim as Process: Water balance\n    loop Simulation loop (OrdinaryDiffEq.jl)\n        activate Int\n        %% Allocation\n        rect rgb(200, 200, 200)\n            opt Allocation optimization, per allocation network (JuMP.jl, HiGHS)\n                activate Optim\n                Int-&gt;&gt;Optim: Callback: allocation timestep has passed\n                Param--&gt;&gt;Optim: Input\n                State--&gt;&gt;Optim: Input\n                Optim-&gt;&gt;Optim: Optimize Basin allocations if below target level\n                Optim-&gt;&gt;Optim: Optimize UserDemand allocation, per priority\n                Optim--&gt;&gt;Param: Set allocated flow rates\n                deactivate Optim\n            end\n        end\n        %% Control\n        rect rgb(200, 200, 200)\n            opt Control actions\n                Int-&gt;&gt;Int: DiscreteControl callback\n                Int--&gt;&gt;Param: Parameter updates by control\n            end\n        end\n        %% water_balance!\n        rect rgb(200, 200, 200)\n            activate Sim\n            State--&gt;&gt;Sim: Input\n            Param--&gt;&gt;Sim: Input\n            Sim-&gt;&gt;Sim: Compute flows over edges per node type\n            Sim--&gt;&gt;Param: Set flows\n            deactivate Sim\n        end\n        %% Time integration\n        rect rgb(200, 200, 200)\n            State--&gt;&gt;Int: Input\n            Param--&gt;&gt;Int: Input\n            Int-&gt;&gt;Int: Time integration step\n            Int--&gt;&gt;State: Update state\n        end\n        deactivate Int\n  end\n\n\n\n\n\n\n\n\n2 Nested allocation\nSince water systems may be extensive, like in the Netherlands, Ribasim models may become large networks with over ten thousand nodes. To keep a proper functioning allocation concept under these circumstances, the modeller can decompose the network domain into a main network and multiple sub-networks. The allocation will then be conducted in three steps:\n\nconduct an inventory of demands from the sub-networks to inlets from the main network,\nallocate the available water in the main network to the subnetworks inlets,\nallocate the assigned water within each subnetwork to the individual demand nodes.\n\nThe demand nodes then will request this updated demand from the rule-based simulation. Whether this updated demand is indeed abstracted depends on all dry-fall control mechanism implemented in the rule-based simulation.\nThe following sequence diagram illustrates this calculation process within then allocation phase.\n\n\n\n\n\nsequenceDiagram\nparticipant boundary\nparticipant basin\nparticipant user_demand\nparticipant allocation_subNetwork\nparticipant allocation_mainNetwork\n\nuser_demand-&gt;&gt;allocation_subNetwork: demand\nloop\n   allocation_subNetwork--&gt;&gt;allocation_mainNetwork: demand inventory at inlets\nend\nuser_demand-&gt;&gt;allocation_mainNetwork: demand\nboundary-&gt;&gt;allocation_mainNetwork: source availability\nbasin-&gt;&gt;allocation_mainNetwork: source availability\nallocation_mainNetwork--&gt;&gt;allocation_mainNetwork: allocate to inlets (and user_demands)\nallocation_mainNetwork-&gt;&gt;user_demand: allocated\nallocation_mainNetwork-&gt;&gt;allocation_subNetwork: allocated\nloop\n   allocation_subNetwork--&gt;&gt;allocation_subNetwork: allocate to user_demands\nend\nallocation_subNetwork-&gt;&gt;user_demand: allocated\nuser_demand-&gt;&gt;basin: abstracted",
    "crumbs": [
      "Concepts",
      "Implementation",
      "Julia core"
    ]
  },
  {
    "objectID": "changelog.html",
    "href": "changelog.html",
    "title": "1 Changelog",
    "section": "",
    "text": "All notable changes to this project will be documented in this file. The format is based on Keep a Changelog,\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSupport for concentration state and time for Delwaq coupling.\nShow exact commit on ribasim --version if it is not a release. #1479\n\n\n\n\n\nOptimized performance.\nDocumentation has been overhauled to be more user-friendly.\nStricter TabulatedRatingCurve validation. #1469\nStricter Basin / profile validation. #1486\nAllocation objective function now gives equal ratios during shortage. #1386\n\n\n\n\n\nDonât require unique node IDs. #1513\n\n\n\n\n\n\n\n\nThere is more validation on the edges. #1434\nIf the model does not converge and the used algorithm supports it, we log which Basins donât converge. #1440\n\n\n\n\n\nIf negative storages inadvertently happen, we now throw an error. #1425\nUsers of the QGIS plugin need to remove the old version to avoid two copies due to #1453.\n\n\n\n\n\nPerformance improvements have been a focus of this release, giving up to 10x faster runs. #1433, #1436, #1438, #1448, #1457\nThe CLI exe is now always in the root of the zip and makes use of the libribasim shared library. #1415",
    "crumbs": [
      "Overview",
      "Changelog"
    ]
  },
  {
    "objectID": "changelog.html#v2024.9.0---2024-06-18",
    "href": "changelog.html#v2024.9.0---2024-06-18",
    "title": "1 Changelog",
    "section": "",
    "text": "Support for concentration state and time for Delwaq coupling.\nShow exact commit on ribasim --version if it is not a release. #1479\n\n\n\n\n\nOptimized performance.\nDocumentation has been overhauled to be more user-friendly.\nStricter TabulatedRatingCurve validation. #1469\nStricter Basin / profile validation. #1486\nAllocation objective function now gives equal ratios during shortage. #1386\n\n\n\n\n\nDonât require unique node IDs. #1513",
    "crumbs": [
      "Overview",
      "Changelog"
    ]
  },
  {
    "objectID": "changelog.html#v2024.8.0---2024-05-14",
    "href": "changelog.html#v2024.8.0---2024-05-14",
    "title": "1 Changelog",
    "section": "",
    "text": "There is more validation on the edges. #1434\nIf the model does not converge and the used algorithm supports it, we log which Basins donât converge. #1440\n\n\n\n\n\nIf negative storages inadvertently happen, we now throw an error. #1425\nUsers of the QGIS plugin need to remove the old version to avoid two copies due to #1453.\n\n\n\n\n\nPerformance improvements have been a focus of this release, giving up to 10x faster runs. #1433, #1436, #1438, #1448, #1457\nThe CLI exe is now always in the root of the zip and makes use of the libribasim shared library. #1415",
    "crumbs": [
      "Overview",
      "Changelog"
    ]
  },
  {
    "objectID": "reference/validation.html",
    "href": "reference/validation.html",
    "title": "Validation",
    "section": "",
    "text": "The tables below show the validation rules applied to the input to the Julia core before running the model.\n\n1 Connectivity\nIn the table below, each column shows which node types are allowed to be downstream (or âdown-controlâ) of the node type at the top of the column.\n\n\nCode\nusing Ribasim\nusing DataFrames: DataFrame\nusing MarkdownTables\n\nnode_names_snake_case = Vector{Symbol}()\nnode_names_camel_case = Vector{Symbol}()\nfor (node_name, node_type) in zip(fieldnames(Ribasim.Parameters), fieldtypes(Ribasim.Parameters))\n    if node_type &lt;: Ribasim.AbstractParameterNode\n        push!(node_names_snake_case, node_name)\n        push!(node_names_camel_case, nameof(node_type))\n    end\nend\n\nfunction to_symbol(b::Bool)::String\n    return b ? \"â\" : \"x\"\nend\n\n\ndf = DataFrame()\ndf[!, :downstream] = node_names_snake_case\n\nfor node_name in node_names_snake_case\n    df[!, node_name] =\n        [(to_symbol(node_name_ in Ribasim.neighbortypes(node_name))) for node_name_ in node_names_snake_case]\nend\n\nmarkdown_table(df)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndownstream\nbasin\nlinear_resistance\nmanning_resistance\ntabulated_rating_curve\nfractional_flow\nlevel_boundary\nflow_boundary\npump\noutlet\nterminal\ndiscrete_control\npid_control\nuser_demand\nlevel_demand\nflow_demand\n\n\n\n\nbasin\nx\nâ\nâ\nâ\nâ\nx\nâ\nâ\nâ\nx\nx\nx\nâ\nâ\nx\n\n\nlinear_resistance\nâ\nx\nx\nx\nx\nâ\nx\nx\nx\nx\nâ\nx\nx\nx\nâ\n\n\nmanning_resistance\nâ\nx\nx\nx\nx\nx\nx\nx\nx\nx\nâ\nx\nx\nx\nâ\n\n\ntabulated_rating_curve\nâ\nx\nx\nx\nx\nâ\nx\nx\nx\nx\nâ\nx\nx\nx\nâ\n\n\nfractional_flow\nx\nx\nx\nâ\nx\nx\nâ\nâ\nâ\nx\nâ\nx\nâ\nx\nx\n\n\nlevel_boundary\nx\nâ\nx\nâ\nâ\nx\nâ\nâ\nâ\nx\nx\nx\nâ\nx\nx\n\n\nflow_boundary\nx\nx\nx\nx\nx\nx\nx\nx\nx\nx\nx\nx\nx\nx\nx\n\n\npump\nâ\nx\nx\nx\nx\nâ\nx\nx\nx\nx\nâ\nâ\nx\nx\nâ\n\n\noutlet\nâ\nx\nx\nx\nx\nâ\nx\nx\nx\nx\nâ\nâ\nx\nx\nâ\n\n\nterminal\nx\nx\nx\nâ\nâ\nx\nâ\nâ\nâ\nx\nx\nx\nâ\nx\nx\n\n\ndiscrete_control\nx\nx\nx\nx\nx\nx\nx\nx\nx\nx\nx\nx\nx\nx\nx\n\n\npid_control\nx\nx\nx\nx\nx\nx\nx\nx\nx\nx\nâ\nx\nx\nx\nx\n\n\nuser_demand\nâ\nx\nx\nx\nx\nx\nx\nx\nx\nx\nx\nx\nx\nx\nx\n\n\nlevel_demand\nx\nx\nx\nx\nx\nx\nx\nx\nx\nx\nx\nx\nx\nx\nx\n\n\nflow_demand\nx\nx\nx\nx\nx\nx\nx\nx\nx\nx\nx\nx\nx\nx\nx\n\n\n\n\n\n\n\n2 Neighbor amounts\nThe table below shows for each node type between which bounds the amount of in- and outneighbors must be, for both flow and control edges.\n\n\nCode\nflow_in_min = Vector{String}()\nflow_in_max = Vector{String}()\nflow_out_min = Vector{String}()\nflow_out_max = Vector{String}()\ncontrol_in_min = Vector{String}()\ncontrol_in_max = Vector{String}()\ncontrol_out_min = Vector{String}()\ncontrol_out_max = Vector{String}()\n\nfunction unbounded(i::Int)::String\n    return i == typemax(Int) ? \"â\" : string(i)\nend\n\nfor node_name in node_names_camel_case\n    bounds_flow = Ribasim.n_neighbor_bounds_flow(node_name)\n    push!(flow_in_min, string(bounds_flow.in_min))\n    push!(flow_in_max, unbounded(bounds_flow.in_max))\n    push!(flow_out_min, string(bounds_flow.out_min))\n    push!(flow_out_max, unbounded(bounds_flow.out_max))\n\n    bounds_control = Ribasim.n_neighbor_bounds_control(node_name)\n    push!(control_in_min, string(bounds_control.in_min))\n    push!(control_in_max, unbounded(bounds_control.in_max))\n    push!(control_out_min, string(bounds_control.out_min))\n    push!(control_out_max, unbounded(bounds_control.out_max))\n\nend\n\ndf = DataFrame(\n    ;\n    node_type = node_names_snake_case,\n    flow_in_min,\n    flow_in_max,\n    flow_out_min,\n    flow_out_max,\n    control_in_min,\n    control_in_max,\n    control_out_min,\n    control_out_max,\n)\n\nmarkdown_table(df)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nnode_type\nflow_in_min\nflow_in_max\nflow_out_min\nflow_out_max\ncontrol_in_min\ncontrol_in_max\ncontrol_out_min\ncontrol_out_max\n\n\n\n\nbasin\n0\nâ\n0\nâ\n0\n1\n0\n0\n\n\nlinear_resistance\n1\n1\n1\n1\n0\n1\n0\n0\n\n\nmanning_resistance\n1\n1\n1\n1\n0\n1\n0\n0\n\n\ntabulated_rating_curve\n1\n1\n1\nâ\n0\n1\n0\n0\n\n\nfractional_flow\n1\n1\n1\n1\n0\n1\n0\n0\n\n\nlevel_boundary\n0\nâ\n0\nâ\n0\n0\n0\n0\n\n\nflow_boundary\n0\n0\n1\nâ\n0\n0\n0\n0\n\n\npump\n1\n1\n1\nâ\n0\n1\n0\n0\n\n\noutlet\n1\n1\n1\nâ\n0\n1\n0\n0\n\n\nterminal\n1\nâ\n0\n0\n0\n0\n0\n0\n\n\ndiscrete_control\n0\n0\n0\n0\n0\n0\n1\nâ\n\n\npid_control\n0\n0\n0\n0\n0\n1\n1\n1\n\n\nuser_demand\n1\n1\n1\n1\n0\n0\n0\n0\n\n\nlevel_demand\n0\n0\n0\n0\n0\n0\n1\nâ\n\n\nflow_demand\n0\n0\n0\n0\n0\n0\n1\n1",
    "crumbs": [
      "Reference",
      "Validation"
    ]
  },
  {
    "objectID": "reference/test-models.html",
    "href": "reference/test-models.html",
    "title": "Test models",
    "section": "",
    "text": "Ribasim developers use the following models in their testbench and in order to test new features.\n\n\nCode\nimport ribasim_testmodels\nimport matplotlib.pyplot as plt\n\nfor model_name, model_constructor in ribasim_testmodels.constructors.items():\n    if model_name.startswith(\"invalid\"):\n        continue\n\n    model = model_constructor()\n    fig, ax = plt.subplots()\n    model.plot(ax)\n    ax.set_title(label=model_name, loc=\"left\")\n    fig.text(0, 1, model_constructor.__doc__)\n    fig.tight_layout()\n    plt.show()\n    plt.close(fig)",
    "crumbs": [
      "Reference",
      "Test models"
    ]
  },
  {
    "objectID": "reference/python/nodes.manning_resistance.html",
    "href": "reference/python/nodes.manning_resistance.html",
    "title": "1 nodes.manning_resistance",
    "section": "",
    "text": "1 nodes.manning_resistance\nnodes.manning_resistance"
  },
  {
    "objectID": "reference/python/nodes.terminal.html",
    "href": "reference/python/nodes.terminal.html",
    "title": "1 nodes.terminal",
    "section": "",
    "text": "1 nodes.terminal\nnodes.terminal"
  },
  {
    "objectID": "reference/python/EdgeTable.html",
    "href": "reference/python/EdgeTable.html",
    "title": "1 EdgeTable",
    "section": "",
    "text": "1 EdgeTable\nEdgeTable()\nDefines the connections between nodes."
  },
  {
    "objectID": "reference/python/nodes.pump.html",
    "href": "reference/python/nodes.pump.html",
    "title": "1 nodes.pump",
    "section": "",
    "text": "1 nodes.pump\nnodes.pump"
  },
  {
    "objectID": "reference/python/index.html",
    "href": "reference/python/index.html",
    "title": "1 Python API",
    "section": "",
    "text": "The Model class represents an entire Ribasim model.\n\n\n\nModel\n\n\n\n\n\n\n\nThe Edge database layer.\n\n\n\nEdgeTable\nDefines the connections between nodes.\n\n\n\n\n\n\nAvailable node types to model different situations.\n\n\n\nnodes.basin\n\n\n\nnodes.fractional_flow\n\n\n\nnodes.tabulated_rating_curve\n\n\n\nnodes.pump\n\n\n\nnodes.outlet\n\n\n\nnodes.user_demand\n\n\n\nnodes.level_boundary\n\n\n\nnodes.flow_boundary\n\n\n\nnodes.linear_resistance\n\n\n\nnodes.manning_resistance\n\n\n\nnodes.terminal\n\n\n\nnodes.discrete_control\n\n\n\nnodes.pid_control\n\n\n\nnodes.flow_demand\n\n\n\nnodes.level_demand",
    "crumbs": [
      "Reference",
      "Python API"
    ]
  },
  {
    "objectID": "reference/python/index.html#model",
    "href": "reference/python/index.html#model",
    "title": "1 Python API",
    "section": "",
    "text": "The Model class represents an entire Ribasim model.\n\n\n\nModel",
    "crumbs": [
      "Reference",
      "Python API"
    ]
  },
  {
    "objectID": "reference/python/index.html#edge",
    "href": "reference/python/index.html#edge",
    "title": "1 Python API",
    "section": "",
    "text": "The Edge database layer.\n\n\n\nEdgeTable\nDefines the connections between nodes.",
    "crumbs": [
      "Reference",
      "Python API"
    ]
  },
  {
    "objectID": "reference/python/index.html#node-types",
    "href": "reference/python/index.html#node-types",
    "title": "1 Python API",
    "section": "",
    "text": "Available node types to model different situations.\n\n\n\nnodes.basin\n\n\n\nnodes.fractional_flow\n\n\n\nnodes.tabulated_rating_curve\n\n\n\nnodes.pump\n\n\n\nnodes.outlet\n\n\n\nnodes.user_demand\n\n\n\nnodes.level_boundary\n\n\n\nnodes.flow_boundary\n\n\n\nnodes.linear_resistance\n\n\n\nnodes.manning_resistance\n\n\n\nnodes.terminal\n\n\n\nnodes.discrete_control\n\n\n\nnodes.pid_control\n\n\n\nnodes.flow_demand\n\n\n\nnodes.level_demand",
    "crumbs": [
      "Reference",
      "Python API"
    ]
  },
  {
    "objectID": "reference/python/nodes.fractional_flow.html",
    "href": "reference/python/nodes.fractional_flow.html",
    "title": "1 nodes.fractional_flow",
    "section": "",
    "text": "1 nodes.fractional_flow\nnodes.fractional_flow"
  },
  {
    "objectID": "reference/python/nodes.discrete_control.html",
    "href": "reference/python/nodes.discrete_control.html",
    "title": "1 nodes.discrete_control",
    "section": "",
    "text": "1 nodes.discrete_control\nnodes.discrete_control"
  },
  {
    "objectID": "reference/python/nodes.flow_boundary.html",
    "href": "reference/python/nodes.flow_boundary.html",
    "title": "1 nodes.flow_boundary",
    "section": "",
    "text": "1 nodes.flow_boundary\nnodes.flow_boundary"
  },
  {
    "objectID": "reference/python/nodes.outlet.html",
    "href": "reference/python/nodes.outlet.html",
    "title": "1 nodes.outlet",
    "section": "",
    "text": "1 nodes.outlet\nnodes.outlet"
  },
  {
    "objectID": "reference/node/pid-control.html",
    "href": "reference/node/pid-control.html",
    "title": "PidControl",
    "section": "",
    "text": "The PidControl node controls the level in a Basin by continuously controlling the flow rate of a connected Pump or Outlet. See also PID controller.\nWhen a PidControl node is made inactive, the node under its control retains the last flow rate value, and the error integral is reset to 0.\nIn the future controlling the flow on a particular edge could be supported.",
    "crumbs": [
      "Reference",
      "Nodes",
      "PidControl"
    ]
  },
  {
    "objectID": "reference/node/pid-control.html#time",
    "href": "reference/node/pid-control.html#time",
    "title": "PidControl",
    "section": "2.1 Time",
    "text": "2.1 Time\nThis table is the transient form of the PidControl table. The differences are that a time column is added and the nodes are assumed to be active so this column is removed. The table must by sorted by time, and per time it must be sorted by node_id. With this the target level and PID coefficients can be updated over time. In between the given times the these values interpolated linearly, and outside these values area constant given by the nearest time value. Note that a node_id can be either in this table or in the static one, but not both.\n\n\n\ncolumn\ntype\nunit\nrestriction\n\n\n\n\nnode_id\nInt32\n-\nsorted\n\n\ntime\nDateTime\n-\nsorted per node_id\n\n\nlisten_node_type\nInt32\n-\nknown node type\n\n\nlisten_node_id\nInt32\n-\n-\n\n\ntarget\nFloat64\n\\(m\\)\n-\n\n\nproportional\nFloat64\n\\(s^{-1}\\)\n-\n\n\nintegral\nFloat64\n\\(s^{-2}\\)\n-\n\n\nderivative\nFloat64\n-\n-",
    "crumbs": [
      "Reference",
      "Nodes",
      "PidControl"
    ]
  },
  {
    "objectID": "reference/node/pid-control.html#the-derivative-term",
    "href": "reference/node/pid-control.html#the-derivative-term",
    "title": "PidControl",
    "section": "3.1 The derivative term",
    "text": "3.1 The derivative term\nWhen \\(K_d \\ne 0\\) this adds a level of complexity. We can see this by looking at the error derivative more closely: \\[\n\\frac{\\text{d}e}{\\text{d}t} = \\frac{\\text{d}\\text{SP}}{\\text{d}t} - \\frac{1}{A(u_\\text{PID})}\\frac{\\text{d}u_\\text{PID}}{\\text{d}t},\n\\]\nwhere \\(A(u_\\text{PID})\\) is the area of the controlled basin as a function of the storage of the controlled basin \\(u_\\text{PID}\\). The complexity arises from the fact that \\(Q_\\text{PID}\\) is a contribution to \\(\\frac{\\text{d}u_\\text{PID}}{\\text{d}t} = f_\\text{PID}\\), which makes EquationÂ 2 an implicit equation for \\(Q_\\text{PID}\\). We define\n\\[\nf_\\text{PID} = \\hat{f}_\\text{PID} \\pm Q_\\text{pump/outlet},\n\\]\nthat is, \\(\\hat{f}_\\text{PID}\\) is the right hand side of the ODE for the controlled basin storage state without the contribution of the PID controlled pump. The plus sign holds for an outlet and the minus sign for a pump, dictated by the way the pump and outlet connectivity to the controlled basin is enforced.\nUsing this, solving EquationÂ 2 for \\(Q_\\text{PID}\\) yields \\[\nQ_\\text{pump/outlet} = \\text{clamp}\\left(\\phi(u_\\text{us})\\frac{K_pe + K_iI + K_d \\left(\\frac{\\text{d}\\text{SP}}{\\text{d}t}-\\frac{\\hat{f}_\\text{PID}}{A(u_\\text{PID})}\\right)}{1\\pm\\phi(u_\\text{us})\\frac{K_d}{A(u_\\text{PID})}}, Q_{\\min}, Q_{\\max}\\right),\n\\]\nwhere the clamping is again done last. Note that to compute this, \\(\\hat{f}_\\text{PID}\\) has to be known first, meaning that the PID controlled Pump or Outlet flow rate has to be computed after all other contributions to the PID controlled Basinâs storage are known.",
    "crumbs": [
      "Reference",
      "Nodes",
      "PidControl"
    ]
  },
  {
    "objectID": "reference/node/pid-control.html#the-sign-of-the-parameters",
    "href": "reference/node/pid-control.html#the-sign-of-the-parameters",
    "title": "PidControl",
    "section": "3.2 The sign of the parameters",
    "text": "3.2 The sign of the parameters\nNote by EquationÂ 1 that the error is positive if the setpoint is larger than the Basin level and negative if the setpoint is smaller than the Basin level.\nWe enforce the convention that when a Pump is controlled, its edge points away from the Basin, and when an Outlet is controlled, its edge points towards the Basin, so that the main flow direction along these edges is positive. Therefore, positive flows of the Pump and Outlet have opposite effects on the Basin, and thus the parameters \\(K_p,K_i,K_d\\) of the Pump and Outlet must have opposite signs to achieve the same goal.",
    "crumbs": [
      "Reference",
      "Nodes",
      "PidControl"
    ]
  },
  {
    "objectID": "reference/node/level-boundary.html",
    "href": "reference/node/level-boundary.html",
    "title": "LevelBoundary",
    "section": "",
    "text": "LevelBoundary is a node whose water level is determined by the input. It can be used as a boundary condition like the level of the sea or a lake. Since the water level is unaffected by flow, it acts like an infinitely large Basin. Connect the LevelBoundary to a node that will look at the level to calculate the flow, like a LinearResistance.",
    "crumbs": [
      "Reference",
      "Nodes",
      "LevelBoundary"
    ]
  },
  {
    "objectID": "reference/node/level-boundary.html#static",
    "href": "reference/node/level-boundary.html#static",
    "title": "LevelBoundary",
    "section": "1.1 Static",
    "text": "1.1 Static\n\n\n\ncolumn\ntype\nunit\nrestriction\n\n\n\n\nnode_id\nInt32\n-\nsorted\n\n\nactive\nBool\n-\n(optional, default true)\n\n\nlevel\nFloat64\n\\(m\\)\n-",
    "crumbs": [
      "Reference",
      "Nodes",
      "LevelBoundary"
    ]
  },
  {
    "objectID": "reference/node/level-boundary.html#time",
    "href": "reference/node/level-boundary.html#time",
    "title": "LevelBoundary",
    "section": "1.2 Time",
    "text": "1.2 Time\nThis table is the transient form of the LevelBoundary table. The only difference is that a time column is added and activity is assumed to be true. The table must by sorted by time, and per time it must be sorted by node_id. With this the levels can be updated over time. In between the given times the level is interpolated linearly, and outside the flow rate is constant given by the nearest time value. Note that a node_id can be either in this table or in the static one, but not both.\n\n\n\ncolumn\ntype\nunit\nrestriction\n\n\n\n\nnode_id\nInt32\n-\nsorted\n\n\ntime\nDateTime\n-\nsorted per node_id\n\n\nlevel\nFloat64\n\\(m\\)\n-",
    "crumbs": [
      "Reference",
      "Nodes",
      "LevelBoundary"
    ]
  },
  {
    "objectID": "reference/node/level-boundary.html#sec-level-boundary-conc",
    "href": "reference/node/level-boundary.html#sec-level-boundary-conc",
    "title": "LevelBoundary",
    "section": "1.3 Concentration",
    "text": "1.3 Concentration\nThis table defines the concentration(s) of (a) substance(s) for the flow from the LevelBoundary.\n\n\n\n\n\n\n\n\n\ncolumn\ntype\nunit\nrestriction\n\n\n\n\nnode_id\nInt32\n-\nsorted\n\n\ntime\nDateTime\n-\nsorted per node_id\n\n\nsubstance\nString\n-\ncan correspond to known Delwaq substances\n\n\nconcentration\nFloat64\n\\(g m^{-3}\\)",
    "crumbs": [
      "Reference",
      "Nodes",
      "LevelBoundary"
    ]
  },
  {
    "objectID": "reference/node/level-demand.html",
    "href": "reference/node/level-demand.html",
    "title": "LevelDemand",
    "section": "",
    "text": "A LevelDemand node associates a minimum and a maximum level with connected Basins to be used by the allocation algorithm.\nSince this connection conveys information rather than flow, an outgoing control edge must be used. Below the minimum level the Basin has a demand, above the maximum level the Basin has a surplus and acts as a source. The source can be used by all nodes with demands in order of priority.\nThe same LevelDemand node can be used for Basins in different subnetworks.\nBoth min_level and max_level are optional, to be able to handle only the demand or surplus side. If both are missing, LevelDemand wonât have any effects on allocation.",
    "crumbs": [
      "Reference",
      "Nodes",
      "LevelDemand"
    ]
  },
  {
    "objectID": "reference/node/level-demand.html#static",
    "href": "reference/node/level-demand.html#static",
    "title": "LevelDemand",
    "section": "1.1 Static",
    "text": "1.1 Static\n\n\n\ncolumn\ntype\nunit\nrestriction\n\n\n\n\nnode_id\nInt32\n-\nsorted\n\n\nmin_level\nFloat64\n\\(m\\)\n(optional, default -Inf)\n\n\nmax_level\nFloat64\n\\(m\\)\n(optional, default Inf)\n\n\npriority\nInt32\n-\npositive",
    "crumbs": [
      "Reference",
      "Nodes",
      "LevelDemand"
    ]
  },
  {
    "objectID": "reference/node/level-demand.html#time",
    "href": "reference/node/level-demand.html#time",
    "title": "LevelDemand",
    "section": "1.2 Time",
    "text": "1.2 Time\nThis table is the transient form of the LevelDemand table, in which time-dependent minimum and maximum levels can be supplied. Similar to the static version, only a single priority per LevelDemand node can be provided.\n\n\n\ncolumn\ntype\nunit\nrestriction\n\n\n\n\nnode_id\nInt32\n-\nsorted\n\n\ntime\nDateTime\n-\nsorted per node id\n\n\nmin_level\nFloat64\n\\(m\\)\n-\n\n\nmax_level\nFloat64\n\\(m\\)\n-\n\n\npriority\nInt32\n-\npositive",
    "crumbs": [
      "Reference",
      "Nodes",
      "LevelDemand"
    ]
  },
  {
    "objectID": "reference/node/discrete-control.html",
    "href": "reference/node/discrete-control.html",
    "title": "DiscreteControl",
    "section": "",
    "text": "Set parameters of other nodes based on model state conditions (e.g.Â Basin level).",
    "crumbs": [
      "Reference",
      "Nodes",
      "DiscreteControl"
    ]
  },
  {
    "objectID": "reference/node/discrete-control.html#variable",
    "href": "reference/node/discrete-control.html#variable",
    "title": "DiscreteControl",
    "section": "1.1 Variable",
    "text": "1.1 Variable\nThe compound variable schema defines linear combinations of variables which can be used in conditions. This means that this schema defines new variables with the given compound_variable_id that look like \\[\n\\text{weight}_1 * \\text{variable}_1 + \\text{weight}_2 * \\text{variable}_2 + \\ldots,\n\\]\nwhich can be for instance an average or a difference of variables. If a variable comes from a time-series, a look ahead \\(\\Delta t\\) can be supplied.\n\n\n\n\n\n\n\n\n\ncolumn\ntype\nunit\nrestriction\n\n\n\n\nnode_id\nInt32\n-\nsorted\n\n\ncompound_variable_id\nInt32\n-\nsorted per node_id\n\n\nlisten_node_type\nString\n-\nknown node type\n\n\nlisten_node_id\nInt32\n-\nsorted per node_id\n\n\nvariable\nString\n-\nmust be âlevelâ or âflow_rateâ, sorted per listen_node_id\n\n\nweight\nFloat64\n-\n(optional, default 1.0)\n\n\nlook_ahead\nFloat64\n\\(s\\)\nOnly on transient boundary conditions, non-negative (optional, default 0.0).",
    "crumbs": [
      "Reference",
      "Nodes",
      "DiscreteControl"
    ]
  },
  {
    "objectID": "reference/node/discrete-control.html#condition",
    "href": "reference/node/discrete-control.html#condition",
    "title": "DiscreteControl",
    "section": "1.2 Condition",
    "text": "1.2 Condition\nThe condition schema defines conditions of the form âthe discrete_control node with this node_id listens to whether the variable given by the node_id and compound_variable_id is greater than greater_thanâ. Multiple conditions with different greater_than values can be defined on the same compound_variable.\n\n\n\ncolumn\ntype\nunit\nrestriction\n\n\n\n\nnode_id\nInt32\n-\nsorted\n\n\ncompound_variable_id\nInt32\n-\n-\n\n\ngreater_than\nFloat64\nvarious\nsorted per variable",
    "crumbs": [
      "Reference",
      "Nodes",
      "DiscreteControl"
    ]
  },
  {
    "objectID": "reference/node/discrete-control.html#logic",
    "href": "reference/node/discrete-control.html#logic",
    "title": "DiscreteControl",
    "section": "1.3 Logic",
    "text": "1.3 Logic\nThe logic schema defines which control states are triggered based on the truth of the conditions a DiscreteControl node listens to. DiscreteControl is applied in the Julia core as follows:\n\nDuring the simulation it is checked whether the truth of any of the conditions changes.\nWhen a condition changes, the corresponding DiscreteControl node ID is retrieved (node_id in the condition schema above).\nThe truth value of all the conditions this DiscreteControl node listens to are retrieved, in the sorted order as specified in the condition schema. This is then converted into a string of âTâ for true and âFâ for false. This string we call the truth state.*\nThe table below determines for the given DiscreteControl node ID and truth state what the corresponding control state is.\nFor all the nodes this DiscreteControl node affects (as given by the âcontrolâ edges in Edges / static), their parameters are set to those parameters in NodeType / static corresponding to the determined control state.\n\n*. There is also a second truth state created in which for the last condition that changed it is specified whether it was an upcrossing (âUâ) or downcrossing (âDâ) of the threshold (greater than) value. If a control state is specified for a truth state that is crossing-specific, this takes precedence over the control state for the truth state that contains only âTâ and âFâ.\n\n\n\n\n\n\nNote\n\n\n\nWhen creating truth states, it is important to not use the order of the condition table as you provide it, but the order as it is written to the file. Users can provide tables in any order, but when writing the model it gets sorted in the required order as specified in the schema.\n\n\n\n\n\n\n\n\n\n\n\ncolumn\ntype\nunit\nrestriction\n\n\n\n\nnode_id\nInt32\n-\nsorted\n\n\ncontrol_state\nString\n-\n-\n\n\ntruth_state\nString\n-\nConsists of the characters âTâ (true), âFâ (false), âUâ (upcrossing), âDâ (downcrossing) and â*â (any), sorted per node_id",
    "crumbs": [
      "Reference",
      "Nodes",
      "DiscreteControl"
    ]
  },
  {
    "objectID": "reference/node/fractional-flow.html",
    "href": "reference/node/fractional-flow.html",
    "title": "FractionalFlow",
    "section": "",
    "text": "FractionalFlow allows splitting a flow into multiple fractions, as a way to model river bifurcations. It cannot be directly behind a Basin since that doesnât prescribe a flow.\nFor example, if you want to send 20% of the flow over a TabulatedRatingCurve to one downstream Basin, and the rest to another, you can do that as follows:\n\n\n\n\n\nflowchart LR\n    Basin#1[Basin #1] --&gt; TabulatedRatingCurve\n    TabulatedRatingCurve --&gt;|1.0| FractionalFlow\n    FractionalFlow --&gt;|0.2| Basin#2[Basin #2]\n    FractionalFlow --&gt;|0.8| Basin#3[Basin #3]\n\n\n\n\n\n\nThe FractionalFlow node is useful if you know the fractions at which available flows are divided. It should be noted that there are other ways to bifurcate flows that do not involve a FractionalFlow, with multiple outflows from a single Basin:\n\n\n\n\n\nflowchart LR\n    Basin#1[Basin #1] --&gt; TabulatedRatingCurve#1[TabulatedRatingCurve #1]\n    Basin#1[Basin #1] --&gt; TabulatedRatingCurve#2[TabulatedRatingCurve #2]\n    TabulatedRatingCurve#1[TabulatedRatingCurve #1] --&gt; Basin#2[Basin #2]\n    TabulatedRatingCurve#2[TabulatedRatingCurve #2] --&gt; Basin#3[Basin #3]\n\n\n\n\n\n\n\n1 Tables\n\n\n2 Static\nLets a fraction (in [0,1]) of the incoming flow through.\n\n\n\ncolumn\ntype\nunit\nrestriction\n\n\n\n\nnode_id\nInt32\n-\nsorted\n\n\ncontrol_state\nString\n-\n(optional) sorted per node_id\n\n\nfraction\nFloat64\n-\nin the interval [0,1]\n\n\n\n\n\n3 Equations\n\\[\nQ = Q_\\text{in} \\phi\n\\]\nWhere\n\n\\(Q_\\text{in}\\) is the incoming flow, determined by the incoming node\n\\(\\phi\\) is the fraction of the incoming flow going through this node",
    "crumbs": [
      "Reference",
      "Nodes",
      "FractionalFlow"
    ]
  },
  {
    "objectID": "reference/node/user-demand.html",
    "href": "reference/node/user-demand.html",
    "title": "UserDemand",
    "section": "",
    "text": "A UserDemand takes water from the Basin that supplies it.\nWhen allocation is not used, UserDemand attempts to extract the full demand from the Basin. When allocation is used, water is allocated based on its priority, where priority 1 denotes the most important demand.\nWhen the connected Basin is almost empty or reaches the minimum level at which the UserDemand can extract water (min_level), it will stop extraction.\nUserDemands need an outgoing flow edge along which they can send their return flow, this can also be to the same Basin from which it extracts water. The amount of return flow is always a fraction of the inflow into the UserDemand. The difference is consumed by the UserDemand.",
    "crumbs": [
      "Reference",
      "Nodes",
      "UserDemand"
    ]
  },
  {
    "objectID": "reference/node/user-demand.html#static",
    "href": "reference/node/user-demand.html#static",
    "title": "UserDemand",
    "section": "1.1 Static",
    "text": "1.1 Static\n\n\n\ncolumn\ntype\nunit\nrestriction\n\n\n\n\nnode_id\nInt32\n-\nsorted\n\n\nactive\nBool\n-\n(optional, default true)\n\n\ndemand\nFloat64\n\\(m^3 s^{-1}\\)\nnon-negative\n\n\nreturn_factor\nFloat64\n-\nbetween [0 - 1]\n\n\nmin_level\nFloat64\n\\(m\\)\n-\n\n\npriority\nInt32\n-\npositive, sorted per node id",
    "crumbs": [
      "Reference",
      "Nodes",
      "UserDemand"
    ]
  },
  {
    "objectID": "reference/node/user-demand.html#time",
    "href": "reference/node/user-demand.html#time",
    "title": "UserDemand",
    "section": "1.2 Time",
    "text": "1.2 Time\nThis table is the transient form of the UserDemand table. The only difference is that a time column is added and activity is assumed to be true. The table must by sorted by time, and per time it must be sorted by node_id. With this the demand can be updated over time. In between the given times the demand is interpolated linearly, and outside the demand is constant given by the nearest time value. Note that a node_id can be either in this table or in the static one, but not both.\n\n\n\n\n\n\n\n\n\ncolumn\ntype\nunit\nrestriction\n\n\n\n\nnode_id\nInt32\n-\nsorted\n\n\npriority\nInt32\n-\npositive, sorted per node id\n\n\ntime\nDateTime\n-\nsorted per priority per node id\n\n\ndemand\nFloat64\n\\(m^3 s^{-1}\\)\nnon-negative\n\n\nreturn_factor\nFloat64\n-\nbetween [0 - 1]\n\n\nmin_level\nFloat64\n\\(m\\)\n-",
    "crumbs": [
      "Reference",
      "Nodes",
      "UserDemand"
    ]
  },
  {
    "objectID": "reference/node/flow-boundary.html",
    "href": "reference/node/flow-boundary.html",
    "title": "FlowBoundary",
    "section": "",
    "text": "A FlowBoundary adds water to the model at a specified flow rate. It can be used as a boundary condition like a measured upstream flow rate, or lateral inflow.",
    "crumbs": [
      "Reference",
      "Nodes",
      "FlowBoundary"
    ]
  },
  {
    "objectID": "reference/node/flow-boundary.html#static",
    "href": "reference/node/flow-boundary.html#static",
    "title": "FlowBoundary",
    "section": "1.1 Static",
    "text": "1.1 Static\nWe require that the edge connecting the FlowBoundary to the Basin should point towards the Basin, so that positive flow corresponds to water being added to the model. The set flow rate will be pumped unless the intake storage (for a negative flow rate) is less than \\(10~m^3\\), in which case the flow rate will be linearly reduced to \\(0~m^3/s\\). Note that the connected node must always be a Basin.\n\n\n\ncolumn\ntype\nunit\nrestriction\n\n\n\n\nnode_id\nInt32\n-\nsorted\n\n\nactive\nBool\n-\n(optional, default true)\n\n\nflow_rate\nFloat64\n\\(m^3 s^{-1}\\)\nnon-negative",
    "crumbs": [
      "Reference",
      "Nodes",
      "FlowBoundary"
    ]
  },
  {
    "objectID": "reference/node/flow-boundary.html#time",
    "href": "reference/node/flow-boundary.html#time",
    "title": "FlowBoundary",
    "section": "1.2 Time",
    "text": "1.2 Time\nThis table is the transient form of the FlowBoundary table. The only differences are that a time column is added and the nodes are assumed to be active so this column is removed. The table must by sorted by time, and per time it must be sorted by node_id. With this the flow rates can be updated over time. In between the given times the flow rate is interpolated linearly, and outside the flow rate is constant given by the nearest time value. Note that a node_id can be either in this table or in the static one, but not both.\n\n\n\ncolumn\ntype\nunit\nrestriction\n\n\n\n\nnode_id\nInt32\n-\nsorted\n\n\ntime\nDateTime\n-\nsorted per node_id\n\n\nflow_rate\nFloat64\n\\(m^3 s^{-1}\\)\nnon-negative",
    "crumbs": [
      "Reference",
      "Nodes",
      "FlowBoundary"
    ]
  },
  {
    "objectID": "reference/node/flow-boundary.html#sec-flow-boundary-conc",
    "href": "reference/node/flow-boundary.html#sec-flow-boundary-conc",
    "title": "FlowBoundary",
    "section": "1.3 Concentration",
    "text": "1.3 Concentration\nThis table defines the concentration(s) of (a) substance(s) for the flow from the FlowBoundary.\n\n\n\n\n\n\n\n\n\ncolumn\ntype\nunit\nrestriction\n\n\n\n\nnode_id\nInt32\n-\nsorted\n\n\ntime\nDateTime\n-\nsorted per node_id\n\n\nsubstance\nString\n-\ncan correspond to known Delwaq substances\n\n\nconcentration\nFloat64\n\\(g m^{-3}\\)",
    "crumbs": [
      "Reference",
      "Nodes",
      "FlowBoundary"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Ribasim",
    "section": "",
    "text": "Ribasim is a water resources model to simulate the physical behavior of a managed open water system based on a set of control rules and a prioritized water allocation strategy. \nRibasim is written in the Julia programming language and is built on top of the SciML: Open Source Software for Scientific Machine Learning libraries.\n Ribasim is supported and developed by:",
    "crumbs": [
      "Overview",
      "Ribasim"
    ]
  }
]